This file is a merged representation of the entire codebase, combining all repository files into a single document.
Generated by Repomix on: 2025-01-11T05:54:56.616Z

================================================================
File Summary
================================================================

Purpose:
--------
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.

File Format:
------------
The content is organized as follows:
1. This summary section
2. Repository information
3. Directory structure
4. Multiple file entries, each consisting of:
  a. A separator line (================)
  b. The file path (File: path/to/file)
  c. Another separator line
  d. The full contents of the file
  e. A blank line

Usage Guidelines:
-----------------
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.

Notes:
------
- Some files may have been excluded based on .gitignore rules and Repomix's
  configuration.
- Binary files are not included in this packed representation. Please refer to
  the Repository Structure section for a complete list of file paths, including
  binary files.

Additional Info:
----------------

================================================================
Directory Structure
================================================================
artifacts/
  build-info/
    a41376ba4fdfb875b722abb085e468b4.json
  contracts/
    TestToken.sol/
      TestToken.dbg.json
      TestToken.json
cache/
  solidity-files-cache.json
contracts/
  TestToken.sol
src/
  services/
    ethersService.ts
  tests/
    utils/
      hardhatTestProvider.ts
      testContractHelper.ts
    contract-methods.test.ts
    test.ts
    write-methods.test.ts
  index.ts
  server.ts
.env.example
.gitignore
claude-server.json
hardhat.config.cjs
jest.config.cjs
jest.setup.js
jest.setup.ts
package.json
tsconfig.json

================================================================
Files
================================================================

================
File: artifacts/build-info/a41376ba4fdfb875b722abb085e468b4.json
================
{"id":"a41376ba4fdfb875b722abb085e468b4","_format":"hh-sol-build-info-1","solcVersion":"0.8.24","solcLongVersion":"0.8.24+commit.e11b9ed9","input":{"language":"Solidity","sources":{"contracts/TestToken.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.24;\n\ncontract TestToken {\n    string public name = \"MyToken\";\n    string public symbol = \"MCP\";\n    uint8 public decimals = 18;\n    uint256 public totalSupply;\n    mapping(address => uint256) public balanceOf;\n    mapping(address => mapping(address => uint256)) public allowance;\n\n    event Transfer(address indexed from, address indexed to, uint256 value);\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    constructor() {\n        totalSupply = 1000000 * 10**uint256(decimals);\n        balanceOf[msg.sender] = totalSupply;\n    }\n\n    function transfer(address to, uint256 value) public returns (bool success) {\n        require(balanceOf[msg.sender] >= value, \"insufficient balance\");\n        balanceOf[msg.sender] -= value;\n        balanceOf[to] += value;\n        emit Transfer(msg.sender, to, value);\n        return true;\n    }\n\n    function approve(address spender, uint256 value) public returns (bool success) {\n        allowance[msg.sender][spender] = value;\n        emit Approval(msg.sender, spender, value);\n        return true;\n    }\n\n    function transferFrom(address from, address to, uint256 value) public returns (bool success) {\n        require(balanceOf[from] >= value, \"insufficient balance\");\n        require(allowance[from][msg.sender] >= value, \"exceeds allowance\");\n        balanceOf[from] -= value;\n        balanceOf[to] += value;\n        allowance[from][msg.sender] -= value;\n        emit Transfer(from, to, value);\n        return true;\n    }\n\n    function mint(address to, uint256 value) public {\n        balanceOf[to] += value;\n        totalSupply += value;\n        emit Transfer(address(0), to, value);\n    }\n} "}},"settings":{"evmVersion":"paris","optimizer":{"enabled":false,"runs":200},"outputSelection":{"*":{"*":["abi","evm.bytecode","evm.deployedBytecode","evm.methodIdentifiers","metadata"],"":["ast"]}}}},"output":{"sources":{"contracts/TestToken.sol":{"ast":{"absolutePath":"contracts/TestToken.sol","exportedSymbols":{"TestToken":[220]},"id":221,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1,"literals":["solidity","^","0.8",".24"],"nodeType":"PragmaDirective","src":"32:24:0"},{"abstract":false,"baseContracts":[],"canonicalName":"TestToken","contractDependencies":[],"contractKind":"contract","fullyImplemented":true,"id":220,"linearizedBaseContracts":[220],"name":"TestToken","nameLocation":"67:9:0","nodeType":"ContractDefinition","nodes":[{"constant":false,"functionSelector":"06fdde03","id":4,"mutability":"mutable","name":"name","nameLocation":"97:4:0","nodeType":"VariableDeclaration","scope":220,"src":"83:30:0","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string"},"typeName":{"id":2,"name":"string","nodeType":"ElementaryTypeName","src":"83:6:0","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"value":{"hexValue":"4d79546f6b656e","id":3,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"104:9:0","typeDescriptions":{"typeIdentifier":"t_stringliteral_245c734e6d4ec044daf7beffa09d54d4bafba490113c199734d790b04a7390e5","typeString":"literal_string \"MyToken\""},"value":"MyToken"},"visibility":"public"},{"constant":false,"functionSelector":"95d89b41","id":7,"mutability":"mutable","name":"symbol","nameLocation":"133:6:0","nodeType":"VariableDeclaration","scope":220,"src":"119:28:0","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string"},"typeName":{"id":5,"name":"string","nodeType":"ElementaryTypeName","src":"119:6:0","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"value":{"hexValue":"4d4350","id":6,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"142:5:0","typeDescriptions":{"typeIdentifier":"t_stringliteral_03680a80fc10e1ad314508d1058b02af5d98938afa4b1d7c5d1fdb5f8a411d13","typeString":"literal_string \"MCP\""},"value":"MCP"},"visibility":"public"},{"constant":false,"functionSelector":"313ce567","id":10,"mutability":"mutable","name":"decimals","nameLocation":"166:8:0","nodeType":"VariableDeclaration","scope":220,"src":"153:26:0","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":8,"name":"uint8","nodeType":"ElementaryTypeName","src":"153:5:0","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"value":{"hexValue":"3138","id":9,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"177:2:0","typeDescriptions":{"typeIdentifier":"t_rational_18_by_1","typeString":"int_const 18"},"value":"18"},"visibility":"public"},{"constant":false,"functionSelector":"18160ddd","id":12,"mutability":"mutable","name":"totalSupply","nameLocation":"200:11:0","nodeType":"VariableDeclaration","scope":220,"src":"185:26:0","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":11,"name":"uint256","nodeType":"ElementaryTypeName","src":"185:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"public"},{"constant":false,"functionSelector":"70a08231","id":16,"mutability":"mutable","name":"balanceOf","nameLocation":"252:9:0","nodeType":"VariableDeclaration","scope":220,"src":"217:44:0","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"},"typeName":{"id":15,"keyName":"","keyNameLocation":"-1:-1:-1","keyType":{"id":13,"name":"address","nodeType":"ElementaryTypeName","src":"225:7:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Mapping","src":"217:27:0","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"},"valueName":"","valueNameLocation":"-1:-1:-1","valueType":{"id":14,"name":"uint256","nodeType":"ElementaryTypeName","src":"236:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}},"visibility":"public"},{"constant":false,"functionSelector":"dd62ed3e","id":22,"mutability":"mutable","name":"allowance","nameLocation":"322:9:0","nodeType":"VariableDeclaration","scope":220,"src":"267:64:0","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_mapping$_t_address_$_t_uint256_$_$","typeString":"mapping(address => mapping(address => uint256))"},"typeName":{"id":21,"keyName":"","keyNameLocation":"-1:-1:-1","keyType":{"id":17,"name":"address","nodeType":"ElementaryTypeName","src":"275:7:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Mapping","src":"267:47:0","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_mapping$_t_address_$_t_uint256_$_$","typeString":"mapping(address => mapping(address => uint256))"},"valueName":"","valueNameLocation":"-1:-1:-1","valueType":{"id":20,"keyName":"","keyNameLocation":"-1:-1:-1","keyType":{"id":18,"name":"address","nodeType":"ElementaryTypeName","src":"294:7:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Mapping","src":"286:27:0","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"},"valueName":"","valueNameLocation":"-1:-1:-1","valueType":{"id":19,"name":"uint256","nodeType":"ElementaryTypeName","src":"305:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}}},"visibility":"public"},{"anonymous":false,"eventSelector":"ddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef","id":30,"name":"Transfer","nameLocation":"344:8:0","nodeType":"EventDefinition","parameters":{"id":29,"nodeType":"ParameterList","parameters":[{"constant":false,"id":24,"indexed":true,"mutability":"mutable","name":"from","nameLocation":"369:4:0","nodeType":"VariableDeclaration","scope":30,"src":"353:20:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":23,"name":"address","nodeType":"ElementaryTypeName","src":"353:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":26,"indexed":true,"mutability":"mutable","name":"to","nameLocation":"391:2:0","nodeType":"VariableDeclaration","scope":30,"src":"375:18:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":25,"name":"address","nodeType":"ElementaryTypeName","src":"375:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":28,"indexed":false,"mutability":"mutable","name":"value","nameLocation":"403:5:0","nodeType":"VariableDeclaration","scope":30,"src":"395:13:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":27,"name":"uint256","nodeType":"ElementaryTypeName","src":"395:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"352:57:0"},"src":"338:72:0"},{"anonymous":false,"eventSelector":"8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925","id":38,"name":"Approval","nameLocation":"421:8:0","nodeType":"EventDefinition","parameters":{"id":37,"nodeType":"ParameterList","parameters":[{"constant":false,"id":32,"indexed":true,"mutability":"mutable","name":"owner","nameLocation":"446:5:0","nodeType":"VariableDeclaration","scope":38,"src":"430:21:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":31,"name":"address","nodeType":"ElementaryTypeName","src":"430:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":34,"indexed":true,"mutability":"mutable","name":"spender","nameLocation":"469:7:0","nodeType":"VariableDeclaration","scope":38,"src":"453:23:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":33,"name":"address","nodeType":"ElementaryTypeName","src":"453:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":36,"indexed":false,"mutability":"mutable","name":"value","nameLocation":"486:5:0","nodeType":"VariableDeclaration","scope":38,"src":"478:13:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":35,"name":"uint256","nodeType":"ElementaryTypeName","src":"478:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"429:63:0"},"src":"415:78:0"},{"body":{"id":59,"nodeType":"Block","src":"513:107:0","statements":[{"expression":{"id":50,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":41,"name":"totalSupply","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":12,"src":"523:11:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":49,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"31303030303030","id":42,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"537:7:0","typeDescriptions":{"typeIdentifier":"t_rational_1000000_by_1","typeString":"int_const 1000000"},"value":"1000000"},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":48,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":43,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"547:2:0","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"arguments":[{"id":46,"name":"decimals","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":10,"src":"559:8:0","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint8","typeString":"uint8"}],"id":45,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"551:7:0","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":44,"name":"uint256","nodeType":"ElementaryTypeName","src":"551:7:0","typeDescriptions":{}}},"id":47,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"551:17:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"547:21:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"537:31:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"523:45:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":51,"nodeType":"ExpressionStatement","src":"523:45:0"},{"expression":{"id":57,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":52,"name":"balanceOf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":16,"src":"578:9:0","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":55,"indexExpression":{"expression":{"id":53,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"588:3:0","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":54,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"592:6:0","memberName":"sender","nodeType":"MemberAccess","src":"588:10:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"578:21:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":56,"name":"totalSupply","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":12,"src":"602:11:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"578:35:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":58,"nodeType":"ExpressionStatement","src":"578:35:0"}]},"id":60,"implemented":true,"kind":"constructor","modifiers":[],"name":"","nameLocation":"-1:-1:-1","nodeType":"FunctionDefinition","parameters":{"id":39,"nodeType":"ParameterList","parameters":[],"src":"510:2:0"},"returnParameters":{"id":40,"nodeType":"ParameterList","parameters":[],"src":"513:0:0"},"scope":220,"src":"499:121:0","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"body":{"id":101,"nodeType":"Block","src":"701:219:0","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":75,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"baseExpression":{"id":70,"name":"balanceOf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":16,"src":"719:9:0","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":73,"indexExpression":{"expression":{"id":71,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"729:3:0","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":72,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"733:6:0","memberName":"sender","nodeType":"MemberAccess","src":"729:10:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"719:21:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"id":74,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":64,"src":"744:5:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"719:30:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"696e73756666696369656e742062616c616e6365","id":76,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"751:22:0","typeDescriptions":{"typeIdentifier":"t_stringliteral_a6d1ff1db3d0b9b8c60e12ccab5ce7431be9a2cd0518ac362f1c5c1e0b1cefee","typeString":"literal_string \"insufficient balance\""},"value":"insufficient balance"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_a6d1ff1db3d0b9b8c60e12ccab5ce7431be9a2cd0518ac362f1c5c1e0b1cefee","typeString":"literal_string \"insufficient balance\""}],"id":69,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"711:7:0","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":77,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"711:63:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":78,"nodeType":"ExpressionStatement","src":"711:63:0"},{"expression":{"id":84,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":79,"name":"balanceOf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":16,"src":"784:9:0","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":82,"indexExpression":{"expression":{"id":80,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"794:3:0","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":81,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"798:6:0","memberName":"sender","nodeType":"MemberAccess","src":"794:10:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"784:21:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"-=","rightHandSide":{"id":83,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":64,"src":"809:5:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"784:30:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":85,"nodeType":"ExpressionStatement","src":"784:30:0"},{"expression":{"id":90,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":86,"name":"balanceOf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":16,"src":"824:9:0","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":88,"indexExpression":{"id":87,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":62,"src":"834:2:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"824:13:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"id":89,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":64,"src":"841:5:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"824:22:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":91,"nodeType":"ExpressionStatement","src":"824:22:0"},{"eventCall":{"arguments":[{"expression":{"id":93,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"870:3:0","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":94,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"874:6:0","memberName":"sender","nodeType":"MemberAccess","src":"870:10:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":95,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":62,"src":"882:2:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":96,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":64,"src":"886:5:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":92,"name":"Transfer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":30,"src":"861:8:0","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256)"}},"id":97,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"861:31:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":98,"nodeType":"EmitStatement","src":"856:36:0"},{"expression":{"hexValue":"74727565","id":99,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"909:4:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"functionReturnParameters":68,"id":100,"nodeType":"Return","src":"902:11:0"}]},"functionSelector":"a9059cbb","id":102,"implemented":true,"kind":"function","modifiers":[],"name":"transfer","nameLocation":"635:8:0","nodeType":"FunctionDefinition","parameters":{"id":65,"nodeType":"ParameterList","parameters":[{"constant":false,"id":62,"mutability":"mutable","name":"to","nameLocation":"652:2:0","nodeType":"VariableDeclaration","scope":102,"src":"644:10:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":61,"name":"address","nodeType":"ElementaryTypeName","src":"644:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":64,"mutability":"mutable","name":"value","nameLocation":"664:5:0","nodeType":"VariableDeclaration","scope":102,"src":"656:13:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":63,"name":"uint256","nodeType":"ElementaryTypeName","src":"656:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"643:27:0"},"returnParameters":{"id":68,"nodeType":"ParameterList","parameters":[{"constant":false,"id":67,"mutability":"mutable","name":"success","nameLocation":"692:7:0","nodeType":"VariableDeclaration","scope":102,"src":"687:12:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":66,"name":"bool","nodeType":"ElementaryTypeName","src":"687:4:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"686:14:0"},"scope":220,"src":"626:294:0","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"body":{"id":129,"nodeType":"Block","src":"1005:127:0","statements":[{"expression":{"id":118,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"baseExpression":{"id":111,"name":"allowance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":22,"src":"1015:9:0","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_mapping$_t_address_$_t_uint256_$_$","typeString":"mapping(address => mapping(address => uint256))"}},"id":115,"indexExpression":{"expression":{"id":112,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"1025:3:0","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":113,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1029:6:0","memberName":"sender","nodeType":"MemberAccess","src":"1025:10:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"1015:21:0","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":116,"indexExpression":{"id":114,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":104,"src":"1037:7:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"1015:30:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":117,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":106,"src":"1048:5:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1015:38:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":119,"nodeType":"ExpressionStatement","src":"1015:38:0"},{"eventCall":{"arguments":[{"expression":{"id":121,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"1077:3:0","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":122,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1081:6:0","memberName":"sender","nodeType":"MemberAccess","src":"1077:10:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":123,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":104,"src":"1089:7:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":124,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":106,"src":"1098:5:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":120,"name":"Approval","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":38,"src":"1068:8:0","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256)"}},"id":125,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1068:36:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":126,"nodeType":"EmitStatement","src":"1063:41:0"},{"expression":{"hexValue":"74727565","id":127,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"1121:4:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"functionReturnParameters":110,"id":128,"nodeType":"Return","src":"1114:11:0"}]},"functionSelector":"095ea7b3","id":130,"implemented":true,"kind":"function","modifiers":[],"name":"approve","nameLocation":"935:7:0","nodeType":"FunctionDefinition","parameters":{"id":107,"nodeType":"ParameterList","parameters":[{"constant":false,"id":104,"mutability":"mutable","name":"spender","nameLocation":"951:7:0","nodeType":"VariableDeclaration","scope":130,"src":"943:15:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":103,"name":"address","nodeType":"ElementaryTypeName","src":"943:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":106,"mutability":"mutable","name":"value","nameLocation":"968:5:0","nodeType":"VariableDeclaration","scope":130,"src":"960:13:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":105,"name":"uint256","nodeType":"ElementaryTypeName","src":"960:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"942:32:0"},"returnParameters":{"id":110,"nodeType":"ParameterList","parameters":[{"constant":false,"id":109,"mutability":"mutable","name":"success","nameLocation":"996:7:0","nodeType":"VariableDeclaration","scope":130,"src":"991:12:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":108,"name":"bool","nodeType":"ElementaryTypeName","src":"991:4:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"990:14:0"},"scope":220,"src":"926:206:0","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"body":{"id":191,"nodeType":"Block","src":"1231:323:0","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":146,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"baseExpression":{"id":142,"name":"balanceOf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":16,"src":"1249:9:0","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":144,"indexExpression":{"id":143,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":132,"src":"1259:4:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"1249:15:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"id":145,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":136,"src":"1268:5:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1249:24:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"696e73756666696369656e742062616c616e6365","id":147,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1275:22:0","typeDescriptions":{"typeIdentifier":"t_stringliteral_a6d1ff1db3d0b9b8c60e12ccab5ce7431be9a2cd0518ac362f1c5c1e0b1cefee","typeString":"literal_string \"insufficient balance\""},"value":"insufficient balance"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_a6d1ff1db3d0b9b8c60e12ccab5ce7431be9a2cd0518ac362f1c5c1e0b1cefee","typeString":"literal_string \"insufficient balance\""}],"id":141,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"1241:7:0","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":148,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1241:57:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":149,"nodeType":"ExpressionStatement","src":"1241:57:0"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":158,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"baseExpression":{"baseExpression":{"id":151,"name":"allowance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":22,"src":"1316:9:0","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_mapping$_t_address_$_t_uint256_$_$","typeString":"mapping(address => mapping(address => uint256))"}},"id":153,"indexExpression":{"id":152,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":132,"src":"1326:4:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"1316:15:0","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":156,"indexExpression":{"expression":{"id":154,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"1332:3:0","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":155,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1336:6:0","memberName":"sender","nodeType":"MemberAccess","src":"1332:10:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"1316:27:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"id":157,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":136,"src":"1347:5:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1316:36:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"6578636565647320616c6c6f77616e6365","id":159,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1354:19:0","typeDescriptions":{"typeIdentifier":"t_stringliteral_a2db9b2d459fa87320b1b84f2f349507cfdbf260f36c3b404dc6ea1ada9b5618","typeString":"literal_string \"exceeds allowance\""},"value":"exceeds allowance"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_a2db9b2d459fa87320b1b84f2f349507cfdbf260f36c3b404dc6ea1ada9b5618","typeString":"literal_string \"exceeds allowance\""}],"id":150,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"1308:7:0","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":160,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1308:66:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":161,"nodeType":"ExpressionStatement","src":"1308:66:0"},{"expression":{"id":166,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":162,"name":"balanceOf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":16,"src":"1384:9:0","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":164,"indexExpression":{"id":163,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":132,"src":"1394:4:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"1384:15:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"-=","rightHandSide":{"id":165,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":136,"src":"1403:5:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1384:24:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":167,"nodeType":"ExpressionStatement","src":"1384:24:0"},{"expression":{"id":172,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":168,"name":"balanceOf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":16,"src":"1418:9:0","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":170,"indexExpression":{"id":169,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":134,"src":"1428:2:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"1418:13:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"id":171,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":136,"src":"1435:5:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1418:22:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":173,"nodeType":"ExpressionStatement","src":"1418:22:0"},{"expression":{"id":181,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"baseExpression":{"id":174,"name":"allowance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":22,"src":"1450:9:0","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_mapping$_t_address_$_t_uint256_$_$","typeString":"mapping(address => mapping(address => uint256))"}},"id":178,"indexExpression":{"id":175,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":132,"src":"1460:4:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"1450:15:0","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":179,"indexExpression":{"expression":{"id":176,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"1466:3:0","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":177,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1470:6:0","memberName":"sender","nodeType":"MemberAccess","src":"1466:10:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"1450:27:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"-=","rightHandSide":{"id":180,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":136,"src":"1481:5:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1450:36:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":182,"nodeType":"ExpressionStatement","src":"1450:36:0"},{"eventCall":{"arguments":[{"id":184,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":132,"src":"1510:4:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":185,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":134,"src":"1516:2:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":186,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":136,"src":"1520:5:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":183,"name":"Transfer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":30,"src":"1501:8:0","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256)"}},"id":187,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1501:25:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":188,"nodeType":"EmitStatement","src":"1496:30:0"},{"expression":{"hexValue":"74727565","id":189,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"1543:4:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"functionReturnParameters":140,"id":190,"nodeType":"Return","src":"1536:11:0"}]},"functionSelector":"23b872dd","id":192,"implemented":true,"kind":"function","modifiers":[],"name":"transferFrom","nameLocation":"1147:12:0","nodeType":"FunctionDefinition","parameters":{"id":137,"nodeType":"ParameterList","parameters":[{"constant":false,"id":132,"mutability":"mutable","name":"from","nameLocation":"1168:4:0","nodeType":"VariableDeclaration","scope":192,"src":"1160:12:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":131,"name":"address","nodeType":"ElementaryTypeName","src":"1160:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":134,"mutability":"mutable","name":"to","nameLocation":"1182:2:0","nodeType":"VariableDeclaration","scope":192,"src":"1174:10:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":133,"name":"address","nodeType":"ElementaryTypeName","src":"1174:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":136,"mutability":"mutable","name":"value","nameLocation":"1194:5:0","nodeType":"VariableDeclaration","scope":192,"src":"1186:13:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":135,"name":"uint256","nodeType":"ElementaryTypeName","src":"1186:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1159:41:0"},"returnParameters":{"id":140,"nodeType":"ParameterList","parameters":[{"constant":false,"id":139,"mutability":"mutable","name":"success","nameLocation":"1222:7:0","nodeType":"VariableDeclaration","scope":192,"src":"1217:12:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":138,"name":"bool","nodeType":"ElementaryTypeName","src":"1217:4:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"1216:14:0"},"scope":220,"src":"1138:416:0","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"body":{"id":218,"nodeType":"Block","src":"1608:115:0","statements":[{"expression":{"id":203,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":199,"name":"balanceOf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":16,"src":"1618:9:0","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":201,"indexExpression":{"id":200,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":194,"src":"1628:2:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"1618:13:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"id":202,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":196,"src":"1635:5:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1618:22:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":204,"nodeType":"ExpressionStatement","src":"1618:22:0"},{"expression":{"id":207,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":205,"name":"totalSupply","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":12,"src":"1650:11:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"id":206,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":196,"src":"1665:5:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1650:20:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":208,"nodeType":"ExpressionStatement","src":"1650:20:0"},{"eventCall":{"arguments":[{"arguments":[{"hexValue":"30","id":212,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1702:1:0","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":211,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1694:7:0","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":210,"name":"address","nodeType":"ElementaryTypeName","src":"1694:7:0","typeDescriptions":{}}},"id":213,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1694:10:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":214,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":194,"src":"1706:2:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":215,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":196,"src":"1710:5:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":209,"name":"Transfer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":30,"src":"1685:8:0","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256)"}},"id":216,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1685:31:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":217,"nodeType":"EmitStatement","src":"1680:36:0"}]},"functionSelector":"40c10f19","id":219,"implemented":true,"kind":"function","modifiers":[],"name":"mint","nameLocation":"1569:4:0","nodeType":"FunctionDefinition","parameters":{"id":197,"nodeType":"ParameterList","parameters":[{"constant":false,"id":194,"mutability":"mutable","name":"to","nameLocation":"1582:2:0","nodeType":"VariableDeclaration","scope":219,"src":"1574:10:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":193,"name":"address","nodeType":"ElementaryTypeName","src":"1574:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":196,"mutability":"mutable","name":"value","nameLocation":"1594:5:0","nodeType":"VariableDeclaration","scope":219,"src":"1586:13:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":195,"name":"uint256","nodeType":"ElementaryTypeName","src":"1586:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1573:27:0"},"returnParameters":{"id":198,"nodeType":"ParameterList","parameters":[],"src":"1608:0:0"},"scope":220,"src":"1560:163:0","stateMutability":"nonpayable","virtual":false,"visibility":"public"}],"scope":221,"src":"58:1667:0","usedErrors":[],"usedEvents":[30,38]}],"src":"32:1694:0"},"id":0}},"contracts":{"contracts/TestToken.sol":{"TestToken":{"abi":[{"inputs":[],"stateMutability":"nonpayable","type":"constructor"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"spender","type":"address"},{"indexed":false,"internalType":"uint256","name":"value","type":"uint256"}],"name":"Approval","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":false,"internalType":"uint256","name":"value","type":"uint256"}],"name":"Transfer","type":"event"},{"inputs":[{"internalType":"address","name":"","type":"address"},{"internalType":"address","name":"","type":"address"}],"name":"allowance","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"value","type":"uint256"}],"name":"approve","outputs":[{"internalType":"bool","name":"success","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"","type":"address"}],"name":"balanceOf","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"decimals","outputs":[{"internalType":"uint8","name":"","type":"uint8"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"value","type":"uint256"}],"name":"mint","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"name","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"symbol","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"totalSupply","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"value","type":"uint256"}],"name":"transfer","outputs":[{"internalType":"bool","name":"success","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"value","type":"uint256"}],"name":"transferFrom","outputs":[{"internalType":"bool","name":"success","type":"bool"}],"stateMutability":"nonpayable","type":"function"}],"evm":{"bytecode":{"functionDebugData":{"@_60":{"entryPoint":null,"id":60,"parameterSlots":0,"returnSlots":0},"array_dataslot_t_string_storage":{"entryPoint":477,"id":null,"parameterSlots":1,"returnSlots":1},"array_length_t_string_memory_ptr":{"entryPoint":319,"id":null,"parameterSlots":1,"returnSlots":1},"checked_exp_helper":{"entryPoint":1244,"id":null,"parameterSlots":4,"returnSlots":2},"checked_exp_t_uint256_t_uint256":{"entryPoint":1571,"id":null,"parameterSlots":2,"returnSlots":1},"checked_exp_unsigned":{"entryPoint":1335,"id":null,"parameterSlots":3,"returnSlots":1},"checked_mul_t_uint256":{"entryPoint":1652,"id":null,"parameterSlots":2,"returnSlots":1},"clean_up_bytearray_end_slots_t_string_storage":{"entryPoint":798,"id":null,"parameterSlots":3,"returnSlots":0},"cleanup_t_uint256":{"entryPoint":613,"id":null,"parameterSlots":1,"returnSlots":1},"clear_storage_range_t_bytes1":{"entryPoint":759,"id":null,"parameterSlots":2,"returnSlots":0},"convert_t_uint256_to_t_uint256":{"entryPoint":633,"id":null,"parameterSlots":1,"returnSlots":1},"copy_byte_array_to_storage_from_t_string_memory_ptr_to_t_string_storage":{"entryPoint":953,"id":null,"parameterSlots":2,"returnSlots":0},"divide_by_32_ceil":{"entryPoint":498,"id":null,"parameterSlots":1,"returnSlots":1},"extract_byte_array_length":{"entryPoint":424,"id":null,"parameterSlots":1,"returnSlots":1},"extract_used_part_and_set_length_of_short_byte_array":{"entryPoint":923,"id":null,"parameterSlots":2,"returnSlots":1},"identity":{"entryPoint":623,"id":null,"parameterSlots":1,"returnSlots":1},"mask_bytes_dynamic":{"entryPoint":891,"id":null,"parameterSlots":2,"returnSlots":1},"panic_error_0x11":{"entryPoint":1184,"id":null,"parameterSlots":0,"returnSlots":0},"panic_error_0x22":{"entryPoint":377,"id":null,"parameterSlots":0,"returnSlots":0},"panic_error_0x41":{"entryPoint":330,"id":null,"parameterSlots":0,"returnSlots":0},"prepare_store_t_uint256":{"entryPoint":673,"id":null,"parameterSlots":1,"returnSlots":1},"shift_left_dynamic":{"entryPoint":514,"id":null,"parameterSlots":2,"returnSlots":1},"shift_right_1_unsigned":{"entryPoint":1231,"id":null,"parameterSlots":1,"returnSlots":1},"shift_right_unsigned_dynamic":{"entryPoint":878,"id":null,"parameterSlots":2,"returnSlots":1},"storage_set_to_zero_t_uint256":{"entryPoint":731,"id":null,"parameterSlots":2,"returnSlots":0},"update_byte_slice_dynamic32":{"entryPoint":527,"id":null,"parameterSlots":3,"returnSlots":1},"update_storage_value_t_uint256_to_t_uint256":{"entryPoint":683,"id":null,"parameterSlots":3,"returnSlots":0},"zero_value_for_split_t_uint256":{"entryPoint":726,"id":null,"parameterSlots":0,"returnSlots":1}},"generatedSources":[{"ast":{"nativeSrc":"0:8165:1","nodeType":"YulBlock","src":"0:8165:1","statements":[{"body":{"nativeSrc":"66:40:1","nodeType":"YulBlock","src":"66:40:1","statements":[{"nativeSrc":"77:22:1","nodeType":"YulAssignment","src":"77:22:1","value":{"arguments":[{"name":"value","nativeSrc":"93:5:1","nodeType":"YulIdentifier","src":"93:5:1"}],"functionName":{"name":"mload","nativeSrc":"87:5:1","nodeType":"YulIdentifier","src":"87:5:1"},"nativeSrc":"87:12:1","nodeType":"YulFunctionCall","src":"87:12:1"},"variableNames":[{"name":"length","nativeSrc":"77:6:1","nodeType":"YulIdentifier","src":"77:6:1"}]}]},"name":"array_length_t_string_memory_ptr","nativeSrc":"7:99:1","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nativeSrc":"49:5:1","nodeType":"YulTypedName","src":"49:5:1","type":""}],"returnVariables":[{"name":"length","nativeSrc":"59:6:1","nodeType":"YulTypedName","src":"59:6:1","type":""}],"src":"7:99:1"},{"body":{"nativeSrc":"140:152:1","nodeType":"YulBlock","src":"140:152:1","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"157:1:1","nodeType":"YulLiteral","src":"157:1:1","type":"","value":"0"},{"kind":"number","nativeSrc":"160:77:1","nodeType":"YulLiteral","src":"160:77:1","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nativeSrc":"150:6:1","nodeType":"YulIdentifier","src":"150:6:1"},"nativeSrc":"150:88:1","nodeType":"YulFunctionCall","src":"150:88:1"},"nativeSrc":"150:88:1","nodeType":"YulExpressionStatement","src":"150:88:1"},{"expression":{"arguments":[{"kind":"number","nativeSrc":"254:1:1","nodeType":"YulLiteral","src":"254:1:1","type":"","value":"4"},{"kind":"number","nativeSrc":"257:4:1","nodeType":"YulLiteral","src":"257:4:1","type":"","value":"0x41"}],"functionName":{"name":"mstore","nativeSrc":"247:6:1","nodeType":"YulIdentifier","src":"247:6:1"},"nativeSrc":"247:15:1","nodeType":"YulFunctionCall","src":"247:15:1"},"nativeSrc":"247:15:1","nodeType":"YulExpressionStatement","src":"247:15:1"},{"expression":{"arguments":[{"kind":"number","nativeSrc":"278:1:1","nodeType":"YulLiteral","src":"278:1:1","type":"","value":"0"},{"kind":"number","nativeSrc":"281:4:1","nodeType":"YulLiteral","src":"281:4:1","type":"","value":"0x24"}],"functionName":{"name":"revert","nativeSrc":"271:6:1","nodeType":"YulIdentifier","src":"271:6:1"},"nativeSrc":"271:15:1","nodeType":"YulFunctionCall","src":"271:15:1"},"nativeSrc":"271:15:1","nodeType":"YulExpressionStatement","src":"271:15:1"}]},"name":"panic_error_0x41","nativeSrc":"112:180:1","nodeType":"YulFunctionDefinition","src":"112:180:1"},{"body":{"nativeSrc":"326:152:1","nodeType":"YulBlock","src":"326:152:1","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"343:1:1","nodeType":"YulLiteral","src":"343:1:1","type":"","value":"0"},{"kind":"number","nativeSrc":"346:77:1","nodeType":"YulLiteral","src":"346:77:1","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nativeSrc":"336:6:1","nodeType":"YulIdentifier","src":"336:6:1"},"nativeSrc":"336:88:1","nodeType":"YulFunctionCall","src":"336:88:1"},"nativeSrc":"336:88:1","nodeType":"YulExpressionStatement","src":"336:88:1"},{"expression":{"arguments":[{"kind":"number","nativeSrc":"440:1:1","nodeType":"YulLiteral","src":"440:1:1","type":"","value":"4"},{"kind":"number","nativeSrc":"443:4:1","nodeType":"YulLiteral","src":"443:4:1","type":"","value":"0x22"}],"functionName":{"name":"mstore","nativeSrc":"433:6:1","nodeType":"YulIdentifier","src":"433:6:1"},"nativeSrc":"433:15:1","nodeType":"YulFunctionCall","src":"433:15:1"},"nativeSrc":"433:15:1","nodeType":"YulExpressionStatement","src":"433:15:1"},{"expression":{"arguments":[{"kind":"number","nativeSrc":"464:1:1","nodeType":"YulLiteral","src":"464:1:1","type":"","value":"0"},{"kind":"number","nativeSrc":"467:4:1","nodeType":"YulLiteral","src":"467:4:1","type":"","value":"0x24"}],"functionName":{"name":"revert","nativeSrc":"457:6:1","nodeType":"YulIdentifier","src":"457:6:1"},"nativeSrc":"457:15:1","nodeType":"YulFunctionCall","src":"457:15:1"},"nativeSrc":"457:15:1","nodeType":"YulExpressionStatement","src":"457:15:1"}]},"name":"panic_error_0x22","nativeSrc":"298:180:1","nodeType":"YulFunctionDefinition","src":"298:180:1"},{"body":{"nativeSrc":"535:269:1","nodeType":"YulBlock","src":"535:269:1","statements":[{"nativeSrc":"545:22:1","nodeType":"YulAssignment","src":"545:22:1","value":{"arguments":[{"name":"data","nativeSrc":"559:4:1","nodeType":"YulIdentifier","src":"559:4:1"},{"kind":"number","nativeSrc":"565:1:1","nodeType":"YulLiteral","src":"565:1:1","type":"","value":"2"}],"functionName":{"name":"div","nativeSrc":"555:3:1","nodeType":"YulIdentifier","src":"555:3:1"},"nativeSrc":"555:12:1","nodeType":"YulFunctionCall","src":"555:12:1"},"variableNames":[{"name":"length","nativeSrc":"545:6:1","nodeType":"YulIdentifier","src":"545:6:1"}]},{"nativeSrc":"576:38:1","nodeType":"YulVariableDeclaration","src":"576:38:1","value":{"arguments":[{"name":"data","nativeSrc":"606:4:1","nodeType":"YulIdentifier","src":"606:4:1"},{"kind":"number","nativeSrc":"612:1:1","nodeType":"YulLiteral","src":"612:1:1","type":"","value":"1"}],"functionName":{"name":"and","nativeSrc":"602:3:1","nodeType":"YulIdentifier","src":"602:3:1"},"nativeSrc":"602:12:1","nodeType":"YulFunctionCall","src":"602:12:1"},"variables":[{"name":"outOfPlaceEncoding","nativeSrc":"580:18:1","nodeType":"YulTypedName","src":"580:18:1","type":""}]},{"body":{"nativeSrc":"653:51:1","nodeType":"YulBlock","src":"653:51:1","statements":[{"nativeSrc":"667:27:1","nodeType":"YulAssignment","src":"667:27:1","value":{"arguments":[{"name":"length","nativeSrc":"681:6:1","nodeType":"YulIdentifier","src":"681:6:1"},{"kind":"number","nativeSrc":"689:4:1","nodeType":"YulLiteral","src":"689:4:1","type":"","value":"0x7f"}],"functionName":{"name":"and","nativeSrc":"677:3:1","nodeType":"YulIdentifier","src":"677:3:1"},"nativeSrc":"677:17:1","nodeType":"YulFunctionCall","src":"677:17:1"},"variableNames":[{"name":"length","nativeSrc":"667:6:1","nodeType":"YulIdentifier","src":"667:6:1"}]}]},"condition":{"arguments":[{"name":"outOfPlaceEncoding","nativeSrc":"633:18:1","nodeType":"YulIdentifier","src":"633:18:1"}],"functionName":{"name":"iszero","nativeSrc":"626:6:1","nodeType":"YulIdentifier","src":"626:6:1"},"nativeSrc":"626:26:1","nodeType":"YulFunctionCall","src":"626:26:1"},"nativeSrc":"623:81:1","nodeType":"YulIf","src":"623:81:1"},{"body":{"nativeSrc":"756:42:1","nodeType":"YulBlock","src":"756:42:1","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x22","nativeSrc":"770:16:1","nodeType":"YulIdentifier","src":"770:16:1"},"nativeSrc":"770:18:1","nodeType":"YulFunctionCall","src":"770:18:1"},"nativeSrc":"770:18:1","nodeType":"YulExpressionStatement","src":"770:18:1"}]},"condition":{"arguments":[{"name":"outOfPlaceEncoding","nativeSrc":"720:18:1","nodeType":"YulIdentifier","src":"720:18:1"},{"arguments":[{"name":"length","nativeSrc":"743:6:1","nodeType":"YulIdentifier","src":"743:6:1"},{"kind":"number","nativeSrc":"751:2:1","nodeType":"YulLiteral","src":"751:2:1","type":"","value":"32"}],"functionName":{"name":"lt","nativeSrc":"740:2:1","nodeType":"YulIdentifier","src":"740:2:1"},"nativeSrc":"740:14:1","nodeType":"YulFunctionCall","src":"740:14:1"}],"functionName":{"name":"eq","nativeSrc":"717:2:1","nodeType":"YulIdentifier","src":"717:2:1"},"nativeSrc":"717:38:1","nodeType":"YulFunctionCall","src":"717:38:1"},"nativeSrc":"714:84:1","nodeType":"YulIf","src":"714:84:1"}]},"name":"extract_byte_array_length","nativeSrc":"484:320:1","nodeType":"YulFunctionDefinition","parameters":[{"name":"data","nativeSrc":"519:4:1","nodeType":"YulTypedName","src":"519:4:1","type":""}],"returnVariables":[{"name":"length","nativeSrc":"528:6:1","nodeType":"YulTypedName","src":"528:6:1","type":""}],"src":"484:320:1"},{"body":{"nativeSrc":"864:87:1","nodeType":"YulBlock","src":"864:87:1","statements":[{"nativeSrc":"874:11:1","nodeType":"YulAssignment","src":"874:11:1","value":{"name":"ptr","nativeSrc":"882:3:1","nodeType":"YulIdentifier","src":"882:3:1"},"variableNames":[{"name":"data","nativeSrc":"874:4:1","nodeType":"YulIdentifier","src":"874:4:1"}]},{"expression":{"arguments":[{"kind":"number","nativeSrc":"902:1:1","nodeType":"YulLiteral","src":"902:1:1","type":"","value":"0"},{"name":"ptr","nativeSrc":"905:3:1","nodeType":"YulIdentifier","src":"905:3:1"}],"functionName":{"name":"mstore","nativeSrc":"895:6:1","nodeType":"YulIdentifier","src":"895:6:1"},"nativeSrc":"895:14:1","nodeType":"YulFunctionCall","src":"895:14:1"},"nativeSrc":"895:14:1","nodeType":"YulExpressionStatement","src":"895:14:1"},{"nativeSrc":"918:26:1","nodeType":"YulAssignment","src":"918:26:1","value":{"arguments":[{"kind":"number","nativeSrc":"936:1:1","nodeType":"YulLiteral","src":"936:1:1","type":"","value":"0"},{"kind":"number","nativeSrc":"939:4:1","nodeType":"YulLiteral","src":"939:4:1","type":"","value":"0x20"}],"functionName":{"name":"keccak256","nativeSrc":"926:9:1","nodeType":"YulIdentifier","src":"926:9:1"},"nativeSrc":"926:18:1","nodeType":"YulFunctionCall","src":"926:18:1"},"variableNames":[{"name":"data","nativeSrc":"918:4:1","nodeType":"YulIdentifier","src":"918:4:1"}]}]},"name":"array_dataslot_t_string_storage","nativeSrc":"810:141:1","nodeType":"YulFunctionDefinition","parameters":[{"name":"ptr","nativeSrc":"851:3:1","nodeType":"YulTypedName","src":"851:3:1","type":""}],"returnVariables":[{"name":"data","nativeSrc":"859:4:1","nodeType":"YulTypedName","src":"859:4:1","type":""}],"src":"810:141:1"},{"body":{"nativeSrc":"1001:49:1","nodeType":"YulBlock","src":"1001:49:1","statements":[{"nativeSrc":"1011:33:1","nodeType":"YulAssignment","src":"1011:33:1","value":{"arguments":[{"arguments":[{"name":"value","nativeSrc":"1029:5:1","nodeType":"YulIdentifier","src":"1029:5:1"},{"kind":"number","nativeSrc":"1036:2:1","nodeType":"YulLiteral","src":"1036:2:1","type":"","value":"31"}],"functionName":{"name":"add","nativeSrc":"1025:3:1","nodeType":"YulIdentifier","src":"1025:3:1"},"nativeSrc":"1025:14:1","nodeType":"YulFunctionCall","src":"1025:14:1"},{"kind":"number","nativeSrc":"1041:2:1","nodeType":"YulLiteral","src":"1041:2:1","type":"","value":"32"}],"functionName":{"name":"div","nativeSrc":"1021:3:1","nodeType":"YulIdentifier","src":"1021:3:1"},"nativeSrc":"1021:23:1","nodeType":"YulFunctionCall","src":"1021:23:1"},"variableNames":[{"name":"result","nativeSrc":"1011:6:1","nodeType":"YulIdentifier","src":"1011:6:1"}]}]},"name":"divide_by_32_ceil","nativeSrc":"957:93:1","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nativeSrc":"984:5:1","nodeType":"YulTypedName","src":"984:5:1","type":""}],"returnVariables":[{"name":"result","nativeSrc":"994:6:1","nodeType":"YulTypedName","src":"994:6:1","type":""}],"src":"957:93:1"},{"body":{"nativeSrc":"1109:54:1","nodeType":"YulBlock","src":"1109:54:1","statements":[{"nativeSrc":"1119:37:1","nodeType":"YulAssignment","src":"1119:37:1","value":{"arguments":[{"name":"bits","nativeSrc":"1144:4:1","nodeType":"YulIdentifier","src":"1144:4:1"},{"name":"value","nativeSrc":"1150:5:1","nodeType":"YulIdentifier","src":"1150:5:1"}],"functionName":{"name":"shl","nativeSrc":"1140:3:1","nodeType":"YulIdentifier","src":"1140:3:1"},"nativeSrc":"1140:16:1","nodeType":"YulFunctionCall","src":"1140:16:1"},"variableNames":[{"name":"newValue","nativeSrc":"1119:8:1","nodeType":"YulIdentifier","src":"1119:8:1"}]}]},"name":"shift_left_dynamic","nativeSrc":"1056:107:1","nodeType":"YulFunctionDefinition","parameters":[{"name":"bits","nativeSrc":"1084:4:1","nodeType":"YulTypedName","src":"1084:4:1","type":""},{"name":"value","nativeSrc":"1090:5:1","nodeType":"YulTypedName","src":"1090:5:1","type":""}],"returnVariables":[{"name":"newValue","nativeSrc":"1100:8:1","nodeType":"YulTypedName","src":"1100:8:1","type":""}],"src":"1056:107:1"},{"body":{"nativeSrc":"1245:317:1","nodeType":"YulBlock","src":"1245:317:1","statements":[{"nativeSrc":"1255:35:1","nodeType":"YulVariableDeclaration","src":"1255:35:1","value":{"arguments":[{"name":"shiftBytes","nativeSrc":"1276:10:1","nodeType":"YulIdentifier","src":"1276:10:1"},{"kind":"number","nativeSrc":"1288:1:1","nodeType":"YulLiteral","src":"1288:1:1","type":"","value":"8"}],"functionName":{"name":"mul","nativeSrc":"1272:3:1","nodeType":"YulIdentifier","src":"1272:3:1"},"nativeSrc":"1272:18:1","nodeType":"YulFunctionCall","src":"1272:18:1"},"variables":[{"name":"shiftBits","nativeSrc":"1259:9:1","nodeType":"YulTypedName","src":"1259:9:1","type":""}]},{"nativeSrc":"1299:109:1","nodeType":"YulVariableDeclaration","src":"1299:109:1","value":{"arguments":[{"name":"shiftBits","nativeSrc":"1330:9:1","nodeType":"YulIdentifier","src":"1330:9:1"},{"kind":"number","nativeSrc":"1341:66:1","nodeType":"YulLiteral","src":"1341:66:1","type":"","value":"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"shift_left_dynamic","nativeSrc":"1311:18:1","nodeType":"YulIdentifier","src":"1311:18:1"},"nativeSrc":"1311:97:1","nodeType":"YulFunctionCall","src":"1311:97:1"},"variables":[{"name":"mask","nativeSrc":"1303:4:1","nodeType":"YulTypedName","src":"1303:4:1","type":""}]},{"nativeSrc":"1417:51:1","nodeType":"YulAssignment","src":"1417:51:1","value":{"arguments":[{"name":"shiftBits","nativeSrc":"1448:9:1","nodeType":"YulIdentifier","src":"1448:9:1"},{"name":"toInsert","nativeSrc":"1459:8:1","nodeType":"YulIdentifier","src":"1459:8:1"}],"functionName":{"name":"shift_left_dynamic","nativeSrc":"1429:18:1","nodeType":"YulIdentifier","src":"1429:18:1"},"nativeSrc":"1429:39:1","nodeType":"YulFunctionCall","src":"1429:39:1"},"variableNames":[{"name":"toInsert","nativeSrc":"1417:8:1","nodeType":"YulIdentifier","src":"1417:8:1"}]},{"nativeSrc":"1477:30:1","nodeType":"YulAssignment","src":"1477:30:1","value":{"arguments":[{"name":"value","nativeSrc":"1490:5:1","nodeType":"YulIdentifier","src":"1490:5:1"},{"arguments":[{"name":"mask","nativeSrc":"1501:4:1","nodeType":"YulIdentifier","src":"1501:4:1"}],"functionName":{"name":"not","nativeSrc":"1497:3:1","nodeType":"YulIdentifier","src":"1497:3:1"},"nativeSrc":"1497:9:1","nodeType":"YulFunctionCall","src":"1497:9:1"}],"functionName":{"name":"and","nativeSrc":"1486:3:1","nodeType":"YulIdentifier","src":"1486:3:1"},"nativeSrc":"1486:21:1","nodeType":"YulFunctionCall","src":"1486:21:1"},"variableNames":[{"name":"value","nativeSrc":"1477:5:1","nodeType":"YulIdentifier","src":"1477:5:1"}]},{"nativeSrc":"1516:40:1","nodeType":"YulAssignment","src":"1516:40:1","value":{"arguments":[{"name":"value","nativeSrc":"1529:5:1","nodeType":"YulIdentifier","src":"1529:5:1"},{"arguments":[{"name":"toInsert","nativeSrc":"1540:8:1","nodeType":"YulIdentifier","src":"1540:8:1"},{"name":"mask","nativeSrc":"1550:4:1","nodeType":"YulIdentifier","src":"1550:4:1"}],"functionName":{"name":"and","nativeSrc":"1536:3:1","nodeType":"YulIdentifier","src":"1536:3:1"},"nativeSrc":"1536:19:1","nodeType":"YulFunctionCall","src":"1536:19:1"}],"functionName":{"name":"or","nativeSrc":"1526:2:1","nodeType":"YulIdentifier","src":"1526:2:1"},"nativeSrc":"1526:30:1","nodeType":"YulFunctionCall","src":"1526:30:1"},"variableNames":[{"name":"result","nativeSrc":"1516:6:1","nodeType":"YulIdentifier","src":"1516:6:1"}]}]},"name":"update_byte_slice_dynamic32","nativeSrc":"1169:393:1","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nativeSrc":"1206:5:1","nodeType":"YulTypedName","src":"1206:5:1","type":""},{"name":"shiftBytes","nativeSrc":"1213:10:1","nodeType":"YulTypedName","src":"1213:10:1","type":""},{"name":"toInsert","nativeSrc":"1225:8:1","nodeType":"YulTypedName","src":"1225:8:1","type":""}],"returnVariables":[{"name":"result","nativeSrc":"1238:6:1","nodeType":"YulTypedName","src":"1238:6:1","type":""}],"src":"1169:393:1"},{"body":{"nativeSrc":"1613:32:1","nodeType":"YulBlock","src":"1613:32:1","statements":[{"nativeSrc":"1623:16:1","nodeType":"YulAssignment","src":"1623:16:1","value":{"name":"value","nativeSrc":"1634:5:1","nodeType":"YulIdentifier","src":"1634:5:1"},"variableNames":[{"name":"cleaned","nativeSrc":"1623:7:1","nodeType":"YulIdentifier","src":"1623:7:1"}]}]},"name":"cleanup_t_uint256","nativeSrc":"1568:77:1","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nativeSrc":"1595:5:1","nodeType":"YulTypedName","src":"1595:5:1","type":""}],"returnVariables":[{"name":"cleaned","nativeSrc":"1605:7:1","nodeType":"YulTypedName","src":"1605:7:1","type":""}],"src":"1568:77:1"},{"body":{"nativeSrc":"1683:28:1","nodeType":"YulBlock","src":"1683:28:1","statements":[{"nativeSrc":"1693:12:1","nodeType":"YulAssignment","src":"1693:12:1","value":{"name":"value","nativeSrc":"1700:5:1","nodeType":"YulIdentifier","src":"1700:5:1"},"variableNames":[{"name":"ret","nativeSrc":"1693:3:1","nodeType":"YulIdentifier","src":"1693:3:1"}]}]},"name":"identity","nativeSrc":"1651:60:1","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nativeSrc":"1669:5:1","nodeType":"YulTypedName","src":"1669:5:1","type":""}],"returnVariables":[{"name":"ret","nativeSrc":"1679:3:1","nodeType":"YulTypedName","src":"1679:3:1","type":""}],"src":"1651:60:1"},{"body":{"nativeSrc":"1777:82:1","nodeType":"YulBlock","src":"1777:82:1","statements":[{"nativeSrc":"1787:66:1","nodeType":"YulAssignment","src":"1787:66:1","value":{"arguments":[{"arguments":[{"arguments":[{"name":"value","nativeSrc":"1845:5:1","nodeType":"YulIdentifier","src":"1845:5:1"}],"functionName":{"name":"cleanup_t_uint256","nativeSrc":"1827:17:1","nodeType":"YulIdentifier","src":"1827:17:1"},"nativeSrc":"1827:24:1","nodeType":"YulFunctionCall","src":"1827:24:1"}],"functionName":{"name":"identity","nativeSrc":"1818:8:1","nodeType":"YulIdentifier","src":"1818:8:1"},"nativeSrc":"1818:34:1","nodeType":"YulFunctionCall","src":"1818:34:1"}],"functionName":{"name":"cleanup_t_uint256","nativeSrc":"1800:17:1","nodeType":"YulIdentifier","src":"1800:17:1"},"nativeSrc":"1800:53:1","nodeType":"YulFunctionCall","src":"1800:53:1"},"variableNames":[{"name":"converted","nativeSrc":"1787:9:1","nodeType":"YulIdentifier","src":"1787:9:1"}]}]},"name":"convert_t_uint256_to_t_uint256","nativeSrc":"1717:142:1","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nativeSrc":"1757:5:1","nodeType":"YulTypedName","src":"1757:5:1","type":""}],"returnVariables":[{"name":"converted","nativeSrc":"1767:9:1","nodeType":"YulTypedName","src":"1767:9:1","type":""}],"src":"1717:142:1"},{"body":{"nativeSrc":"1912:28:1","nodeType":"YulBlock","src":"1912:28:1","statements":[{"nativeSrc":"1922:12:1","nodeType":"YulAssignment","src":"1922:12:1","value":{"name":"value","nativeSrc":"1929:5:1","nodeType":"YulIdentifier","src":"1929:5:1"},"variableNames":[{"name":"ret","nativeSrc":"1922:3:1","nodeType":"YulIdentifier","src":"1922:3:1"}]}]},"name":"prepare_store_t_uint256","nativeSrc":"1865:75:1","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nativeSrc":"1898:5:1","nodeType":"YulTypedName","src":"1898:5:1","type":""}],"returnVariables":[{"name":"ret","nativeSrc":"1908:3:1","nodeType":"YulTypedName","src":"1908:3:1","type":""}],"src":"1865:75:1"},{"body":{"nativeSrc":"2022:193:1","nodeType":"YulBlock","src":"2022:193:1","statements":[{"nativeSrc":"2032:63:1","nodeType":"YulVariableDeclaration","src":"2032:63:1","value":{"arguments":[{"name":"value_0","nativeSrc":"2087:7:1","nodeType":"YulIdentifier","src":"2087:7:1"}],"functionName":{"name":"convert_t_uint256_to_t_uint256","nativeSrc":"2056:30:1","nodeType":"YulIdentifier","src":"2056:30:1"},"nativeSrc":"2056:39:1","nodeType":"YulFunctionCall","src":"2056:39:1"},"variables":[{"name":"convertedValue_0","nativeSrc":"2036:16:1","nodeType":"YulTypedName","src":"2036:16:1","type":""}]},{"expression":{"arguments":[{"name":"slot","nativeSrc":"2111:4:1","nodeType":"YulIdentifier","src":"2111:4:1"},{"arguments":[{"arguments":[{"name":"slot","nativeSrc":"2151:4:1","nodeType":"YulIdentifier","src":"2151:4:1"}],"functionName":{"name":"sload","nativeSrc":"2145:5:1","nodeType":"YulIdentifier","src":"2145:5:1"},"nativeSrc":"2145:11:1","nodeType":"YulFunctionCall","src":"2145:11:1"},{"name":"offset","nativeSrc":"2158:6:1","nodeType":"YulIdentifier","src":"2158:6:1"},{"arguments":[{"name":"convertedValue_0","nativeSrc":"2190:16:1","nodeType":"YulIdentifier","src":"2190:16:1"}],"functionName":{"name":"prepare_store_t_uint256","nativeSrc":"2166:23:1","nodeType":"YulIdentifier","src":"2166:23:1"},"nativeSrc":"2166:41:1","nodeType":"YulFunctionCall","src":"2166:41:1"}],"functionName":{"name":"update_byte_slice_dynamic32","nativeSrc":"2117:27:1","nodeType":"YulIdentifier","src":"2117:27:1"},"nativeSrc":"2117:91:1","nodeType":"YulFunctionCall","src":"2117:91:1"}],"functionName":{"name":"sstore","nativeSrc":"2104:6:1","nodeType":"YulIdentifier","src":"2104:6:1"},"nativeSrc":"2104:105:1","nodeType":"YulFunctionCall","src":"2104:105:1"},"nativeSrc":"2104:105:1","nodeType":"YulExpressionStatement","src":"2104:105:1"}]},"name":"update_storage_value_t_uint256_to_t_uint256","nativeSrc":"1946:269:1","nodeType":"YulFunctionDefinition","parameters":[{"name":"slot","nativeSrc":"1999:4:1","nodeType":"YulTypedName","src":"1999:4:1","type":""},{"name":"offset","nativeSrc":"2005:6:1","nodeType":"YulTypedName","src":"2005:6:1","type":""},{"name":"value_0","nativeSrc":"2013:7:1","nodeType":"YulTypedName","src":"2013:7:1","type":""}],"src":"1946:269:1"},{"body":{"nativeSrc":"2270:24:1","nodeType":"YulBlock","src":"2270:24:1","statements":[{"nativeSrc":"2280:8:1","nodeType":"YulAssignment","src":"2280:8:1","value":{"kind":"number","nativeSrc":"2287:1:1","nodeType":"YulLiteral","src":"2287:1:1","type":"","value":"0"},"variableNames":[{"name":"ret","nativeSrc":"2280:3:1","nodeType":"YulIdentifier","src":"2280:3:1"}]}]},"name":"zero_value_for_split_t_uint256","nativeSrc":"2221:73:1","nodeType":"YulFunctionDefinition","returnVariables":[{"name":"ret","nativeSrc":"2266:3:1","nodeType":"YulTypedName","src":"2266:3:1","type":""}],"src":"2221:73:1"},{"body":{"nativeSrc":"2353:136:1","nodeType":"YulBlock","src":"2353:136:1","statements":[{"nativeSrc":"2363:46:1","nodeType":"YulVariableDeclaration","src":"2363:46:1","value":{"arguments":[],"functionName":{"name":"zero_value_for_split_t_uint256","nativeSrc":"2377:30:1","nodeType":"YulIdentifier","src":"2377:30:1"},"nativeSrc":"2377:32:1","nodeType":"YulFunctionCall","src":"2377:32:1"},"variables":[{"name":"zero_0","nativeSrc":"2367:6:1","nodeType":"YulTypedName","src":"2367:6:1","type":""}]},{"expression":{"arguments":[{"name":"slot","nativeSrc":"2462:4:1","nodeType":"YulIdentifier","src":"2462:4:1"},{"name":"offset","nativeSrc":"2468:6:1","nodeType":"YulIdentifier","src":"2468:6:1"},{"name":"zero_0","nativeSrc":"2476:6:1","nodeType":"YulIdentifier","src":"2476:6:1"}],"functionName":{"name":"update_storage_value_t_uint256_to_t_uint256","nativeSrc":"2418:43:1","nodeType":"YulIdentifier","src":"2418:43:1"},"nativeSrc":"2418:65:1","nodeType":"YulFunctionCall","src":"2418:65:1"},"nativeSrc":"2418:65:1","nodeType":"YulExpressionStatement","src":"2418:65:1"}]},"name":"storage_set_to_zero_t_uint256","nativeSrc":"2300:189:1","nodeType":"YulFunctionDefinition","parameters":[{"name":"slot","nativeSrc":"2339:4:1","nodeType":"YulTypedName","src":"2339:4:1","type":""},{"name":"offset","nativeSrc":"2345:6:1","nodeType":"YulTypedName","src":"2345:6:1","type":""}],"src":"2300:189:1"},{"body":{"nativeSrc":"2545:136:1","nodeType":"YulBlock","src":"2545:136:1","statements":[{"body":{"nativeSrc":"2612:63:1","nodeType":"YulBlock","src":"2612:63:1","statements":[{"expression":{"arguments":[{"name":"start","nativeSrc":"2656:5:1","nodeType":"YulIdentifier","src":"2656:5:1"},{"kind":"number","nativeSrc":"2663:1:1","nodeType":"YulLiteral","src":"2663:1:1","type":"","value":"0"}],"functionName":{"name":"storage_set_to_zero_t_uint256","nativeSrc":"2626:29:1","nodeType":"YulIdentifier","src":"2626:29:1"},"nativeSrc":"2626:39:1","nodeType":"YulFunctionCall","src":"2626:39:1"},"nativeSrc":"2626:39:1","nodeType":"YulExpressionStatement","src":"2626:39:1"}]},"condition":{"arguments":[{"name":"start","nativeSrc":"2565:5:1","nodeType":"YulIdentifier","src":"2565:5:1"},{"name":"end","nativeSrc":"2572:3:1","nodeType":"YulIdentifier","src":"2572:3:1"}],"functionName":{"name":"lt","nativeSrc":"2562:2:1","nodeType":"YulIdentifier","src":"2562:2:1"},"nativeSrc":"2562:14:1","nodeType":"YulFunctionCall","src":"2562:14:1"},"nativeSrc":"2555:120:1","nodeType":"YulForLoop","post":{"nativeSrc":"2577:26:1","nodeType":"YulBlock","src":"2577:26:1","statements":[{"nativeSrc":"2579:22:1","nodeType":"YulAssignment","src":"2579:22:1","value":{"arguments":[{"name":"start","nativeSrc":"2592:5:1","nodeType":"YulIdentifier","src":"2592:5:1"},{"kind":"number","nativeSrc":"2599:1:1","nodeType":"YulLiteral","src":"2599:1:1","type":"","value":"1"}],"functionName":{"name":"add","nativeSrc":"2588:3:1","nodeType":"YulIdentifier","src":"2588:3:1"},"nativeSrc":"2588:13:1","nodeType":"YulFunctionCall","src":"2588:13:1"},"variableNames":[{"name":"start","nativeSrc":"2579:5:1","nodeType":"YulIdentifier","src":"2579:5:1"}]}]},"pre":{"nativeSrc":"2559:2:1","nodeType":"YulBlock","src":"2559:2:1","statements":[]},"src":"2555:120:1"}]},"name":"clear_storage_range_t_bytes1","nativeSrc":"2495:186:1","nodeType":"YulFunctionDefinition","parameters":[{"name":"start","nativeSrc":"2533:5:1","nodeType":"YulTypedName","src":"2533:5:1","type":""},{"name":"end","nativeSrc":"2540:3:1","nodeType":"YulTypedName","src":"2540:3:1","type":""}],"src":"2495:186:1"},{"body":{"nativeSrc":"2766:464:1","nodeType":"YulBlock","src":"2766:464:1","statements":[{"body":{"nativeSrc":"2792:431:1","nodeType":"YulBlock","src":"2792:431:1","statements":[{"nativeSrc":"2806:54:1","nodeType":"YulVariableDeclaration","src":"2806:54:1","value":{"arguments":[{"name":"array","nativeSrc":"2854:5:1","nodeType":"YulIdentifier","src":"2854:5:1"}],"functionName":{"name":"array_dataslot_t_string_storage","nativeSrc":"2822:31:1","nodeType":"YulIdentifier","src":"2822:31:1"},"nativeSrc":"2822:38:1","nodeType":"YulFunctionCall","src":"2822:38:1"},"variables":[{"name":"dataArea","nativeSrc":"2810:8:1","nodeType":"YulTypedName","src":"2810:8:1","type":""}]},{"nativeSrc":"2873:63:1","nodeType":"YulVariableDeclaration","src":"2873:63:1","value":{"arguments":[{"name":"dataArea","nativeSrc":"2896:8:1","nodeType":"YulIdentifier","src":"2896:8:1"},{"arguments":[{"name":"startIndex","nativeSrc":"2924:10:1","nodeType":"YulIdentifier","src":"2924:10:1"}],"functionName":{"name":"divide_by_32_ceil","nativeSrc":"2906:17:1","nodeType":"YulIdentifier","src":"2906:17:1"},"nativeSrc":"2906:29:1","nodeType":"YulFunctionCall","src":"2906:29:1"}],"functionName":{"name":"add","nativeSrc":"2892:3:1","nodeType":"YulIdentifier","src":"2892:3:1"},"nativeSrc":"2892:44:1","nodeType":"YulFunctionCall","src":"2892:44:1"},"variables":[{"name":"deleteStart","nativeSrc":"2877:11:1","nodeType":"YulTypedName","src":"2877:11:1","type":""}]},{"body":{"nativeSrc":"3093:27:1","nodeType":"YulBlock","src":"3093:27:1","statements":[{"nativeSrc":"3095:23:1","nodeType":"YulAssignment","src":"3095:23:1","value":{"name":"dataArea","nativeSrc":"3110:8:1","nodeType":"YulIdentifier","src":"3110:8:1"},"variableNames":[{"name":"deleteStart","nativeSrc":"3095:11:1","nodeType":"YulIdentifier","src":"3095:11:1"}]}]},"condition":{"arguments":[{"name":"startIndex","nativeSrc":"3077:10:1","nodeType":"YulIdentifier","src":"3077:10:1"},{"kind":"number","nativeSrc":"3089:2:1","nodeType":"YulLiteral","src":"3089:2:1","type":"","value":"32"}],"functionName":{"name":"lt","nativeSrc":"3074:2:1","nodeType":"YulIdentifier","src":"3074:2:1"},"nativeSrc":"3074:18:1","nodeType":"YulFunctionCall","src":"3074:18:1"},"nativeSrc":"3071:49:1","nodeType":"YulIf","src":"3071:49:1"},{"expression":{"arguments":[{"name":"deleteStart","nativeSrc":"3162:11:1","nodeType":"YulIdentifier","src":"3162:11:1"},{"arguments":[{"name":"dataArea","nativeSrc":"3179:8:1","nodeType":"YulIdentifier","src":"3179:8:1"},{"arguments":[{"name":"len","nativeSrc":"3207:3:1","nodeType":"YulIdentifier","src":"3207:3:1"}],"functionName":{"name":"divide_by_32_ceil","nativeSrc":"3189:17:1","nodeType":"YulIdentifier","src":"3189:17:1"},"nativeSrc":"3189:22:1","nodeType":"YulFunctionCall","src":"3189:22:1"}],"functionName":{"name":"add","nativeSrc":"3175:3:1","nodeType":"YulIdentifier","src":"3175:3:1"},"nativeSrc":"3175:37:1","nodeType":"YulFunctionCall","src":"3175:37:1"}],"functionName":{"name":"clear_storage_range_t_bytes1","nativeSrc":"3133:28:1","nodeType":"YulIdentifier","src":"3133:28:1"},"nativeSrc":"3133:80:1","nodeType":"YulFunctionCall","src":"3133:80:1"},"nativeSrc":"3133:80:1","nodeType":"YulExpressionStatement","src":"3133:80:1"}]},"condition":{"arguments":[{"name":"len","nativeSrc":"2783:3:1","nodeType":"YulIdentifier","src":"2783:3:1"},{"kind":"number","nativeSrc":"2788:2:1","nodeType":"YulLiteral","src":"2788:2:1","type":"","value":"31"}],"functionName":{"name":"gt","nativeSrc":"2780:2:1","nodeType":"YulIdentifier","src":"2780:2:1"},"nativeSrc":"2780:11:1","nodeType":"YulFunctionCall","src":"2780:11:1"},"nativeSrc":"2777:446:1","nodeType":"YulIf","src":"2777:446:1"}]},"name":"clean_up_bytearray_end_slots_t_string_storage","nativeSrc":"2687:543:1","nodeType":"YulFunctionDefinition","parameters":[{"name":"array","nativeSrc":"2742:5:1","nodeType":"YulTypedName","src":"2742:5:1","type":""},{"name":"len","nativeSrc":"2749:3:1","nodeType":"YulTypedName","src":"2749:3:1","type":""},{"name":"startIndex","nativeSrc":"2754:10:1","nodeType":"YulTypedName","src":"2754:10:1","type":""}],"src":"2687:543:1"},{"body":{"nativeSrc":"3299:54:1","nodeType":"YulBlock","src":"3299:54:1","statements":[{"nativeSrc":"3309:37:1","nodeType":"YulAssignment","src":"3309:37:1","value":{"arguments":[{"name":"bits","nativeSrc":"3334:4:1","nodeType":"YulIdentifier","src":"3334:4:1"},{"name":"value","nativeSrc":"3340:5:1","nodeType":"YulIdentifier","src":"3340:5:1"}],"functionName":{"name":"shr","nativeSrc":"3330:3:1","nodeType":"YulIdentifier","src":"3330:3:1"},"nativeSrc":"3330:16:1","nodeType":"YulFunctionCall","src":"3330:16:1"},"variableNames":[{"name":"newValue","nativeSrc":"3309:8:1","nodeType":"YulIdentifier","src":"3309:8:1"}]}]},"name":"shift_right_unsigned_dynamic","nativeSrc":"3236:117:1","nodeType":"YulFunctionDefinition","parameters":[{"name":"bits","nativeSrc":"3274:4:1","nodeType":"YulTypedName","src":"3274:4:1","type":""},{"name":"value","nativeSrc":"3280:5:1","nodeType":"YulTypedName","src":"3280:5:1","type":""}],"returnVariables":[{"name":"newValue","nativeSrc":"3290:8:1","nodeType":"YulTypedName","src":"3290:8:1","type":""}],"src":"3236:117:1"},{"body":{"nativeSrc":"3410:118:1","nodeType":"YulBlock","src":"3410:118:1","statements":[{"nativeSrc":"3420:68:1","nodeType":"YulVariableDeclaration","src":"3420:68:1","value":{"arguments":[{"arguments":[{"arguments":[{"kind":"number","nativeSrc":"3469:1:1","nodeType":"YulLiteral","src":"3469:1:1","type":"","value":"8"},{"name":"bytes","nativeSrc":"3472:5:1","nodeType":"YulIdentifier","src":"3472:5:1"}],"functionName":{"name":"mul","nativeSrc":"3465:3:1","nodeType":"YulIdentifier","src":"3465:3:1"},"nativeSrc":"3465:13:1","nodeType":"YulFunctionCall","src":"3465:13:1"},{"arguments":[{"kind":"number","nativeSrc":"3484:1:1","nodeType":"YulLiteral","src":"3484:1:1","type":"","value":"0"}],"functionName":{"name":"not","nativeSrc":"3480:3:1","nodeType":"YulIdentifier","src":"3480:3:1"},"nativeSrc":"3480:6:1","nodeType":"YulFunctionCall","src":"3480:6:1"}],"functionName":{"name":"shift_right_unsigned_dynamic","nativeSrc":"3436:28:1","nodeType":"YulIdentifier","src":"3436:28:1"},"nativeSrc":"3436:51:1","nodeType":"YulFunctionCall","src":"3436:51:1"}],"functionName":{"name":"not","nativeSrc":"3432:3:1","nodeType":"YulIdentifier","src":"3432:3:1"},"nativeSrc":"3432:56:1","nodeType":"YulFunctionCall","src":"3432:56:1"},"variables":[{"name":"mask","nativeSrc":"3424:4:1","nodeType":"YulTypedName","src":"3424:4:1","type":""}]},{"nativeSrc":"3497:25:1","nodeType":"YulAssignment","src":"3497:25:1","value":{"arguments":[{"name":"data","nativeSrc":"3511:4:1","nodeType":"YulIdentifier","src":"3511:4:1"},{"name":"mask","nativeSrc":"3517:4:1","nodeType":"YulIdentifier","src":"3517:4:1"}],"functionName":{"name":"and","nativeSrc":"3507:3:1","nodeType":"YulIdentifier","src":"3507:3:1"},"nativeSrc":"3507:15:1","nodeType":"YulFunctionCall","src":"3507:15:1"},"variableNames":[{"name":"result","nativeSrc":"3497:6:1","nodeType":"YulIdentifier","src":"3497:6:1"}]}]},"name":"mask_bytes_dynamic","nativeSrc":"3359:169:1","nodeType":"YulFunctionDefinition","parameters":[{"name":"data","nativeSrc":"3387:4:1","nodeType":"YulTypedName","src":"3387:4:1","type":""},{"name":"bytes","nativeSrc":"3393:5:1","nodeType":"YulTypedName","src":"3393:5:1","type":""}],"returnVariables":[{"name":"result","nativeSrc":"3403:6:1","nodeType":"YulTypedName","src":"3403:6:1","type":""}],"src":"3359:169:1"},{"body":{"nativeSrc":"3614:214:1","nodeType":"YulBlock","src":"3614:214:1","statements":[{"nativeSrc":"3747:37:1","nodeType":"YulAssignment","src":"3747:37:1","value":{"arguments":[{"name":"data","nativeSrc":"3774:4:1","nodeType":"YulIdentifier","src":"3774:4:1"},{"name":"len","nativeSrc":"3780:3:1","nodeType":"YulIdentifier","src":"3780:3:1"}],"functionName":{"name":"mask_bytes_dynamic","nativeSrc":"3755:18:1","nodeType":"YulIdentifier","src":"3755:18:1"},"nativeSrc":"3755:29:1","nodeType":"YulFunctionCall","src":"3755:29:1"},"variableNames":[{"name":"data","nativeSrc":"3747:4:1","nodeType":"YulIdentifier","src":"3747:4:1"}]},{"nativeSrc":"3793:29:1","nodeType":"YulAssignment","src":"3793:29:1","value":{"arguments":[{"name":"data","nativeSrc":"3804:4:1","nodeType":"YulIdentifier","src":"3804:4:1"},{"arguments":[{"kind":"number","nativeSrc":"3814:1:1","nodeType":"YulLiteral","src":"3814:1:1","type":"","value":"2"},{"name":"len","nativeSrc":"3817:3:1","nodeType":"YulIdentifier","src":"3817:3:1"}],"functionName":{"name":"mul","nativeSrc":"3810:3:1","nodeType":"YulIdentifier","src":"3810:3:1"},"nativeSrc":"3810:11:1","nodeType":"YulFunctionCall","src":"3810:11:1"}],"functionName":{"name":"or","nativeSrc":"3801:2:1","nodeType":"YulIdentifier","src":"3801:2:1"},"nativeSrc":"3801:21:1","nodeType":"YulFunctionCall","src":"3801:21:1"},"variableNames":[{"name":"used","nativeSrc":"3793:4:1","nodeType":"YulIdentifier","src":"3793:4:1"}]}]},"name":"extract_used_part_and_set_length_of_short_byte_array","nativeSrc":"3533:295:1","nodeType":"YulFunctionDefinition","parameters":[{"name":"data","nativeSrc":"3595:4:1","nodeType":"YulTypedName","src":"3595:4:1","type":""},{"name":"len","nativeSrc":"3601:3:1","nodeType":"YulTypedName","src":"3601:3:1","type":""}],"returnVariables":[{"name":"used","nativeSrc":"3609:4:1","nodeType":"YulTypedName","src":"3609:4:1","type":""}],"src":"3533:295:1"},{"body":{"nativeSrc":"3925:1303:1","nodeType":"YulBlock","src":"3925:1303:1","statements":[{"nativeSrc":"3936:51:1","nodeType":"YulVariableDeclaration","src":"3936:51:1","value":{"arguments":[{"name":"src","nativeSrc":"3983:3:1","nodeType":"YulIdentifier","src":"3983:3:1"}],"functionName":{"name":"array_length_t_string_memory_ptr","nativeSrc":"3950:32:1","nodeType":"YulIdentifier","src":"3950:32:1"},"nativeSrc":"3950:37:1","nodeType":"YulFunctionCall","src":"3950:37:1"},"variables":[{"name":"newLen","nativeSrc":"3940:6:1","nodeType":"YulTypedName","src":"3940:6:1","type":""}]},{"body":{"nativeSrc":"4072:22:1","nodeType":"YulBlock","src":"4072:22:1","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nativeSrc":"4074:16:1","nodeType":"YulIdentifier","src":"4074:16:1"},"nativeSrc":"4074:18:1","nodeType":"YulFunctionCall","src":"4074:18:1"},"nativeSrc":"4074:18:1","nodeType":"YulExpressionStatement","src":"4074:18:1"}]},"condition":{"arguments":[{"name":"newLen","nativeSrc":"4044:6:1","nodeType":"YulIdentifier","src":"4044:6:1"},{"kind":"number","nativeSrc":"4052:18:1","nodeType":"YulLiteral","src":"4052:18:1","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nativeSrc":"4041:2:1","nodeType":"YulIdentifier","src":"4041:2:1"},"nativeSrc":"4041:30:1","nodeType":"YulFunctionCall","src":"4041:30:1"},"nativeSrc":"4038:56:1","nodeType":"YulIf","src":"4038:56:1"},{"nativeSrc":"4104:52:1","nodeType":"YulVariableDeclaration","src":"4104:52:1","value":{"arguments":[{"arguments":[{"name":"slot","nativeSrc":"4150:4:1","nodeType":"YulIdentifier","src":"4150:4:1"}],"functionName":{"name":"sload","nativeSrc":"4144:5:1","nodeType":"YulIdentifier","src":"4144:5:1"},"nativeSrc":"4144:11:1","nodeType":"YulFunctionCall","src":"4144:11:1"}],"functionName":{"name":"extract_byte_array_length","nativeSrc":"4118:25:1","nodeType":"YulIdentifier","src":"4118:25:1"},"nativeSrc":"4118:38:1","nodeType":"YulFunctionCall","src":"4118:38:1"},"variables":[{"name":"oldLen","nativeSrc":"4108:6:1","nodeType":"YulTypedName","src":"4108:6:1","type":""}]},{"expression":{"arguments":[{"name":"slot","nativeSrc":"4249:4:1","nodeType":"YulIdentifier","src":"4249:4:1"},{"name":"oldLen","nativeSrc":"4255:6:1","nodeType":"YulIdentifier","src":"4255:6:1"},{"name":"newLen","nativeSrc":"4263:6:1","nodeType":"YulIdentifier","src":"4263:6:1"}],"functionName":{"name":"clean_up_bytearray_end_slots_t_string_storage","nativeSrc":"4203:45:1","nodeType":"YulIdentifier","src":"4203:45:1"},"nativeSrc":"4203:67:1","nodeType":"YulFunctionCall","src":"4203:67:1"},"nativeSrc":"4203:67:1","nodeType":"YulExpressionStatement","src":"4203:67:1"},{"nativeSrc":"4280:18:1","nodeType":"YulVariableDeclaration","src":"4280:18:1","value":{"kind":"number","nativeSrc":"4297:1:1","nodeType":"YulLiteral","src":"4297:1:1","type":"","value":"0"},"variables":[{"name":"srcOffset","nativeSrc":"4284:9:1","nodeType":"YulTypedName","src":"4284:9:1","type":""}]},{"nativeSrc":"4308:17:1","nodeType":"YulAssignment","src":"4308:17:1","value":{"kind":"number","nativeSrc":"4321:4:1","nodeType":"YulLiteral","src":"4321:4:1","type":"","value":"0x20"},"variableNames":[{"name":"srcOffset","nativeSrc":"4308:9:1","nodeType":"YulIdentifier","src":"4308:9:1"}]},{"cases":[{"body":{"nativeSrc":"4372:611:1","nodeType":"YulBlock","src":"4372:611:1","statements":[{"nativeSrc":"4386:37:1","nodeType":"YulVariableDeclaration","src":"4386:37:1","value":{"arguments":[{"name":"newLen","nativeSrc":"4405:6:1","nodeType":"YulIdentifier","src":"4405:6:1"},{"arguments":[{"kind":"number","nativeSrc":"4417:4:1","nodeType":"YulLiteral","src":"4417:4:1","type":"","value":"0x1f"}],"functionName":{"name":"not","nativeSrc":"4413:3:1","nodeType":"YulIdentifier","src":"4413:3:1"},"nativeSrc":"4413:9:1","nodeType":"YulFunctionCall","src":"4413:9:1"}],"functionName":{"name":"and","nativeSrc":"4401:3:1","nodeType":"YulIdentifier","src":"4401:3:1"},"nativeSrc":"4401:22:1","nodeType":"YulFunctionCall","src":"4401:22:1"},"variables":[{"name":"loopEnd","nativeSrc":"4390:7:1","nodeType":"YulTypedName","src":"4390:7:1","type":""}]},{"nativeSrc":"4437:51:1","nodeType":"YulVariableDeclaration","src":"4437:51:1","value":{"arguments":[{"name":"slot","nativeSrc":"4483:4:1","nodeType":"YulIdentifier","src":"4483:4:1"}],"functionName":{"name":"array_dataslot_t_string_storage","nativeSrc":"4451:31:1","nodeType":"YulIdentifier","src":"4451:31:1"},"nativeSrc":"4451:37:1","nodeType":"YulFunctionCall","src":"4451:37:1"},"variables":[{"name":"dstPtr","nativeSrc":"4441:6:1","nodeType":"YulTypedName","src":"4441:6:1","type":""}]},{"nativeSrc":"4501:10:1","nodeType":"YulVariableDeclaration","src":"4501:10:1","value":{"kind":"number","nativeSrc":"4510:1:1","nodeType":"YulLiteral","src":"4510:1:1","type":"","value":"0"},"variables":[{"name":"i","nativeSrc":"4505:1:1","nodeType":"YulTypedName","src":"4505:1:1","type":""}]},{"body":{"nativeSrc":"4569:163:1","nodeType":"YulBlock","src":"4569:163:1","statements":[{"expression":{"arguments":[{"name":"dstPtr","nativeSrc":"4594:6:1","nodeType":"YulIdentifier","src":"4594:6:1"},{"arguments":[{"arguments":[{"name":"src","nativeSrc":"4612:3:1","nodeType":"YulIdentifier","src":"4612:3:1"},{"name":"srcOffset","nativeSrc":"4617:9:1","nodeType":"YulIdentifier","src":"4617:9:1"}],"functionName":{"name":"add","nativeSrc":"4608:3:1","nodeType":"YulIdentifier","src":"4608:3:1"},"nativeSrc":"4608:19:1","nodeType":"YulFunctionCall","src":"4608:19:1"}],"functionName":{"name":"mload","nativeSrc":"4602:5:1","nodeType":"YulIdentifier","src":"4602:5:1"},"nativeSrc":"4602:26:1","nodeType":"YulFunctionCall","src":"4602:26:1"}],"functionName":{"name":"sstore","nativeSrc":"4587:6:1","nodeType":"YulIdentifier","src":"4587:6:1"},"nativeSrc":"4587:42:1","nodeType":"YulFunctionCall","src":"4587:42:1"},"nativeSrc":"4587:42:1","nodeType":"YulExpressionStatement","src":"4587:42:1"},{"nativeSrc":"4646:24:1","nodeType":"YulAssignment","src":"4646:24:1","value":{"arguments":[{"name":"dstPtr","nativeSrc":"4660:6:1","nodeType":"YulIdentifier","src":"4660:6:1"},{"kind":"number","nativeSrc":"4668:1:1","nodeType":"YulLiteral","src":"4668:1:1","type":"","value":"1"}],"functionName":{"name":"add","nativeSrc":"4656:3:1","nodeType":"YulIdentifier","src":"4656:3:1"},"nativeSrc":"4656:14:1","nodeType":"YulFunctionCall","src":"4656:14:1"},"variableNames":[{"name":"dstPtr","nativeSrc":"4646:6:1","nodeType":"YulIdentifier","src":"4646:6:1"}]},{"nativeSrc":"4687:31:1","nodeType":"YulAssignment","src":"4687:31:1","value":{"arguments":[{"name":"srcOffset","nativeSrc":"4704:9:1","nodeType":"YulIdentifier","src":"4704:9:1"},{"kind":"number","nativeSrc":"4715:2:1","nodeType":"YulLiteral","src":"4715:2:1","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"4700:3:1","nodeType":"YulIdentifier","src":"4700:3:1"},"nativeSrc":"4700:18:1","nodeType":"YulFunctionCall","src":"4700:18:1"},"variableNames":[{"name":"srcOffset","nativeSrc":"4687:9:1","nodeType":"YulIdentifier","src":"4687:9:1"}]}]},"condition":{"arguments":[{"name":"i","nativeSrc":"4535:1:1","nodeType":"YulIdentifier","src":"4535:1:1"},{"name":"loopEnd","nativeSrc":"4538:7:1","nodeType":"YulIdentifier","src":"4538:7:1"}],"functionName":{"name":"lt","nativeSrc":"4532:2:1","nodeType":"YulIdentifier","src":"4532:2:1"},"nativeSrc":"4532:14:1","nodeType":"YulFunctionCall","src":"4532:14:1"},"nativeSrc":"4524:208:1","nodeType":"YulForLoop","post":{"nativeSrc":"4547:21:1","nodeType":"YulBlock","src":"4547:21:1","statements":[{"nativeSrc":"4549:17:1","nodeType":"YulAssignment","src":"4549:17:1","value":{"arguments":[{"name":"i","nativeSrc":"4558:1:1","nodeType":"YulIdentifier","src":"4558:1:1"},{"kind":"number","nativeSrc":"4561:4:1","nodeType":"YulLiteral","src":"4561:4:1","type":"","value":"0x20"}],"functionName":{"name":"add","nativeSrc":"4554:3:1","nodeType":"YulIdentifier","src":"4554:3:1"},"nativeSrc":"4554:12:1","nodeType":"YulFunctionCall","src":"4554:12:1"},"variableNames":[{"name":"i","nativeSrc":"4549:1:1","nodeType":"YulIdentifier","src":"4549:1:1"}]}]},"pre":{"nativeSrc":"4528:3:1","nodeType":"YulBlock","src":"4528:3:1","statements":[]},"src":"4524:208:1"},{"body":{"nativeSrc":"4768:156:1","nodeType":"YulBlock","src":"4768:156:1","statements":[{"nativeSrc":"4786:43:1","nodeType":"YulVariableDeclaration","src":"4786:43:1","value":{"arguments":[{"arguments":[{"name":"src","nativeSrc":"4813:3:1","nodeType":"YulIdentifier","src":"4813:3:1"},{"name":"srcOffset","nativeSrc":"4818:9:1","nodeType":"YulIdentifier","src":"4818:9:1"}],"functionName":{"name":"add","nativeSrc":"4809:3:1","nodeType":"YulIdentifier","src":"4809:3:1"},"nativeSrc":"4809:19:1","nodeType":"YulFunctionCall","src":"4809:19:1"}],"functionName":{"name":"mload","nativeSrc":"4803:5:1","nodeType":"YulIdentifier","src":"4803:5:1"},"nativeSrc":"4803:26:1","nodeType":"YulFunctionCall","src":"4803:26:1"},"variables":[{"name":"lastValue","nativeSrc":"4790:9:1","nodeType":"YulTypedName","src":"4790:9:1","type":""}]},{"expression":{"arguments":[{"name":"dstPtr","nativeSrc":"4853:6:1","nodeType":"YulIdentifier","src":"4853:6:1"},{"arguments":[{"name":"lastValue","nativeSrc":"4880:9:1","nodeType":"YulIdentifier","src":"4880:9:1"},{"arguments":[{"name":"newLen","nativeSrc":"4895:6:1","nodeType":"YulIdentifier","src":"4895:6:1"},{"kind":"number","nativeSrc":"4903:4:1","nodeType":"YulLiteral","src":"4903:4:1","type":"","value":"0x1f"}],"functionName":{"name":"and","nativeSrc":"4891:3:1","nodeType":"YulIdentifier","src":"4891:3:1"},"nativeSrc":"4891:17:1","nodeType":"YulFunctionCall","src":"4891:17:1"}],"functionName":{"name":"mask_bytes_dynamic","nativeSrc":"4861:18:1","nodeType":"YulIdentifier","src":"4861:18:1"},"nativeSrc":"4861:48:1","nodeType":"YulFunctionCall","src":"4861:48:1"}],"functionName":{"name":"sstore","nativeSrc":"4846:6:1","nodeType":"YulIdentifier","src":"4846:6:1"},"nativeSrc":"4846:64:1","nodeType":"YulFunctionCall","src":"4846:64:1"},"nativeSrc":"4846:64:1","nodeType":"YulExpressionStatement","src":"4846:64:1"}]},"condition":{"arguments":[{"name":"loopEnd","nativeSrc":"4751:7:1","nodeType":"YulIdentifier","src":"4751:7:1"},{"name":"newLen","nativeSrc":"4760:6:1","nodeType":"YulIdentifier","src":"4760:6:1"}],"functionName":{"name":"lt","nativeSrc":"4748:2:1","nodeType":"YulIdentifier","src":"4748:2:1"},"nativeSrc":"4748:19:1","nodeType":"YulFunctionCall","src":"4748:19:1"},"nativeSrc":"4745:179:1","nodeType":"YulIf","src":"4745:179:1"},{"expression":{"arguments":[{"name":"slot","nativeSrc":"4944:4:1","nodeType":"YulIdentifier","src":"4944:4:1"},{"arguments":[{"arguments":[{"name":"newLen","nativeSrc":"4958:6:1","nodeType":"YulIdentifier","src":"4958:6:1"},{"kind":"number","nativeSrc":"4966:1:1","nodeType":"YulLiteral","src":"4966:1:1","type":"","value":"2"}],"functionName":{"name":"mul","nativeSrc":"4954:3:1","nodeType":"YulIdentifier","src":"4954:3:1"},"nativeSrc":"4954:14:1","nodeType":"YulFunctionCall","src":"4954:14:1"},{"kind":"number","nativeSrc":"4970:1:1","nodeType":"YulLiteral","src":"4970:1:1","type":"","value":"1"}],"functionName":{"name":"add","nativeSrc":"4950:3:1","nodeType":"YulIdentifier","src":"4950:3:1"},"nativeSrc":"4950:22:1","nodeType":"YulFunctionCall","src":"4950:22:1"}],"functionName":{"name":"sstore","nativeSrc":"4937:6:1","nodeType":"YulIdentifier","src":"4937:6:1"},"nativeSrc":"4937:36:1","nodeType":"YulFunctionCall","src":"4937:36:1"},"nativeSrc":"4937:36:1","nodeType":"YulExpressionStatement","src":"4937:36:1"}]},"nativeSrc":"4365:618:1","nodeType":"YulCase","src":"4365:618:1","value":{"kind":"number","nativeSrc":"4370:1:1","nodeType":"YulLiteral","src":"4370:1:1","type":"","value":"1"}},{"body":{"nativeSrc":"5000:222:1","nodeType":"YulBlock","src":"5000:222:1","statements":[{"nativeSrc":"5014:14:1","nodeType":"YulVariableDeclaration","src":"5014:14:1","value":{"kind":"number","nativeSrc":"5027:1:1","nodeType":"YulLiteral","src":"5027:1:1","type":"","value":"0"},"variables":[{"name":"value","nativeSrc":"5018:5:1","nodeType":"YulTypedName","src":"5018:5:1","type":""}]},{"body":{"nativeSrc":"5051:67:1","nodeType":"YulBlock","src":"5051:67:1","statements":[{"nativeSrc":"5069:35:1","nodeType":"YulAssignment","src":"5069:35:1","value":{"arguments":[{"arguments":[{"name":"src","nativeSrc":"5088:3:1","nodeType":"YulIdentifier","src":"5088:3:1"},{"name":"srcOffset","nativeSrc":"5093:9:1","nodeType":"YulIdentifier","src":"5093:9:1"}],"functionName":{"name":"add","nativeSrc":"5084:3:1","nodeType":"YulIdentifier","src":"5084:3:1"},"nativeSrc":"5084:19:1","nodeType":"YulFunctionCall","src":"5084:19:1"}],"functionName":{"name":"mload","nativeSrc":"5078:5:1","nodeType":"YulIdentifier","src":"5078:5:1"},"nativeSrc":"5078:26:1","nodeType":"YulFunctionCall","src":"5078:26:1"},"variableNames":[{"name":"value","nativeSrc":"5069:5:1","nodeType":"YulIdentifier","src":"5069:5:1"}]}]},"condition":{"name":"newLen","nativeSrc":"5044:6:1","nodeType":"YulIdentifier","src":"5044:6:1"},"nativeSrc":"5041:77:1","nodeType":"YulIf","src":"5041:77:1"},{"expression":{"arguments":[{"name":"slot","nativeSrc":"5138:4:1","nodeType":"YulIdentifier","src":"5138:4:1"},{"arguments":[{"name":"value","nativeSrc":"5197:5:1","nodeType":"YulIdentifier","src":"5197:5:1"},{"name":"newLen","nativeSrc":"5204:6:1","nodeType":"YulIdentifier","src":"5204:6:1"}],"functionName":{"name":"extract_used_part_and_set_length_of_short_byte_array","nativeSrc":"5144:52:1","nodeType":"YulIdentifier","src":"5144:52:1"},"nativeSrc":"5144:67:1","nodeType":"YulFunctionCall","src":"5144:67:1"}],"functionName":{"name":"sstore","nativeSrc":"5131:6:1","nodeType":"YulIdentifier","src":"5131:6:1"},"nativeSrc":"5131:81:1","nodeType":"YulFunctionCall","src":"5131:81:1"},"nativeSrc":"5131:81:1","nodeType":"YulExpressionStatement","src":"5131:81:1"}]},"nativeSrc":"4992:230:1","nodeType":"YulCase","src":"4992:230:1","value":"default"}],"expression":{"arguments":[{"name":"newLen","nativeSrc":"4345:6:1","nodeType":"YulIdentifier","src":"4345:6:1"},{"kind":"number","nativeSrc":"4353:2:1","nodeType":"YulLiteral","src":"4353:2:1","type":"","value":"31"}],"functionName":{"name":"gt","nativeSrc":"4342:2:1","nodeType":"YulIdentifier","src":"4342:2:1"},"nativeSrc":"4342:14:1","nodeType":"YulFunctionCall","src":"4342:14:1"},"nativeSrc":"4335:887:1","nodeType":"YulSwitch","src":"4335:887:1"}]},"name":"copy_byte_array_to_storage_from_t_string_memory_ptr_to_t_string_storage","nativeSrc":"3833:1395:1","nodeType":"YulFunctionDefinition","parameters":[{"name":"slot","nativeSrc":"3914:4:1","nodeType":"YulTypedName","src":"3914:4:1","type":""},{"name":"src","nativeSrc":"3920:3:1","nodeType":"YulTypedName","src":"3920:3:1","type":""}],"src":"3833:1395:1"},{"body":{"nativeSrc":"5262:152:1","nodeType":"YulBlock","src":"5262:152:1","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"5279:1:1","nodeType":"YulLiteral","src":"5279:1:1","type":"","value":"0"},{"kind":"number","nativeSrc":"5282:77:1","nodeType":"YulLiteral","src":"5282:77:1","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nativeSrc":"5272:6:1","nodeType":"YulIdentifier","src":"5272:6:1"},"nativeSrc":"5272:88:1","nodeType":"YulFunctionCall","src":"5272:88:1"},"nativeSrc":"5272:88:1","nodeType":"YulExpressionStatement","src":"5272:88:1"},{"expression":{"arguments":[{"kind":"number","nativeSrc":"5376:1:1","nodeType":"YulLiteral","src":"5376:1:1","type":"","value":"4"},{"kind":"number","nativeSrc":"5379:4:1","nodeType":"YulLiteral","src":"5379:4:1","type":"","value":"0x11"}],"functionName":{"name":"mstore","nativeSrc":"5369:6:1","nodeType":"YulIdentifier","src":"5369:6:1"},"nativeSrc":"5369:15:1","nodeType":"YulFunctionCall","src":"5369:15:1"},"nativeSrc":"5369:15:1","nodeType":"YulExpressionStatement","src":"5369:15:1"},{"expression":{"arguments":[{"kind":"number","nativeSrc":"5400:1:1","nodeType":"YulLiteral","src":"5400:1:1","type":"","value":"0"},{"kind":"number","nativeSrc":"5403:4:1","nodeType":"YulLiteral","src":"5403:4:1","type":"","value":"0x24"}],"functionName":{"name":"revert","nativeSrc":"5393:6:1","nodeType":"YulIdentifier","src":"5393:6:1"},"nativeSrc":"5393:15:1","nodeType":"YulFunctionCall","src":"5393:15:1"},"nativeSrc":"5393:15:1","nodeType":"YulExpressionStatement","src":"5393:15:1"}]},"name":"panic_error_0x11","nativeSrc":"5234:180:1","nodeType":"YulFunctionDefinition","src":"5234:180:1"},{"body":{"nativeSrc":"5471:51:1","nodeType":"YulBlock","src":"5471:51:1","statements":[{"nativeSrc":"5481:34:1","nodeType":"YulAssignment","src":"5481:34:1","value":{"arguments":[{"kind":"number","nativeSrc":"5506:1:1","nodeType":"YulLiteral","src":"5506:1:1","type":"","value":"1"},{"name":"value","nativeSrc":"5509:5:1","nodeType":"YulIdentifier","src":"5509:5:1"}],"functionName":{"name":"shr","nativeSrc":"5502:3:1","nodeType":"YulIdentifier","src":"5502:3:1"},"nativeSrc":"5502:13:1","nodeType":"YulFunctionCall","src":"5502:13:1"},"variableNames":[{"name":"newValue","nativeSrc":"5481:8:1","nodeType":"YulIdentifier","src":"5481:8:1"}]}]},"name":"shift_right_1_unsigned","nativeSrc":"5420:102:1","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nativeSrc":"5452:5:1","nodeType":"YulTypedName","src":"5452:5:1","type":""}],"returnVariables":[{"name":"newValue","nativeSrc":"5462:8:1","nodeType":"YulTypedName","src":"5462:8:1","type":""}],"src":"5420:102:1"},{"body":{"nativeSrc":"5601:775:1","nodeType":"YulBlock","src":"5601:775:1","statements":[{"nativeSrc":"5611:15:1","nodeType":"YulAssignment","src":"5611:15:1","value":{"name":"_power","nativeSrc":"5620:6:1","nodeType":"YulIdentifier","src":"5620:6:1"},"variableNames":[{"name":"power","nativeSrc":"5611:5:1","nodeType":"YulIdentifier","src":"5611:5:1"}]},{"nativeSrc":"5635:14:1","nodeType":"YulAssignment","src":"5635:14:1","value":{"name":"_base","nativeSrc":"5644:5:1","nodeType":"YulIdentifier","src":"5644:5:1"},"variableNames":[{"name":"base","nativeSrc":"5635:4:1","nodeType":"YulIdentifier","src":"5635:4:1"}]},{"body":{"nativeSrc":"5693:677:1","nodeType":"YulBlock","src":"5693:677:1","statements":[{"body":{"nativeSrc":"5781:22:1","nodeType":"YulBlock","src":"5781:22:1","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x11","nativeSrc":"5783:16:1","nodeType":"YulIdentifier","src":"5783:16:1"},"nativeSrc":"5783:18:1","nodeType":"YulFunctionCall","src":"5783:18:1"},"nativeSrc":"5783:18:1","nodeType":"YulExpressionStatement","src":"5783:18:1"}]},"condition":{"arguments":[{"name":"base","nativeSrc":"5759:4:1","nodeType":"YulIdentifier","src":"5759:4:1"},{"arguments":[{"name":"max","nativeSrc":"5769:3:1","nodeType":"YulIdentifier","src":"5769:3:1"},{"name":"base","nativeSrc":"5774:4:1","nodeType":"YulIdentifier","src":"5774:4:1"}],"functionName":{"name":"div","nativeSrc":"5765:3:1","nodeType":"YulIdentifier","src":"5765:3:1"},"nativeSrc":"5765:14:1","nodeType":"YulFunctionCall","src":"5765:14:1"}],"functionName":{"name":"gt","nativeSrc":"5756:2:1","nodeType":"YulIdentifier","src":"5756:2:1"},"nativeSrc":"5756:24:1","nodeType":"YulFunctionCall","src":"5756:24:1"},"nativeSrc":"5753:50:1","nodeType":"YulIf","src":"5753:50:1"},{"body":{"nativeSrc":"5848:419:1","nodeType":"YulBlock","src":"5848:419:1","statements":[{"nativeSrc":"6228:25:1","nodeType":"YulAssignment","src":"6228:25:1","value":{"arguments":[{"name":"power","nativeSrc":"6241:5:1","nodeType":"YulIdentifier","src":"6241:5:1"},{"name":"base","nativeSrc":"6248:4:1","nodeType":"YulIdentifier","src":"6248:4:1"}],"functionName":{"name":"mul","nativeSrc":"6237:3:1","nodeType":"YulIdentifier","src":"6237:3:1"},"nativeSrc":"6237:16:1","nodeType":"YulFunctionCall","src":"6237:16:1"},"variableNames":[{"name":"power","nativeSrc":"6228:5:1","nodeType":"YulIdentifier","src":"6228:5:1"}]}]},"condition":{"arguments":[{"name":"exponent","nativeSrc":"5823:8:1","nodeType":"YulIdentifier","src":"5823:8:1"},{"kind":"number","nativeSrc":"5833:1:1","nodeType":"YulLiteral","src":"5833:1:1","type":"","value":"1"}],"functionName":{"name":"and","nativeSrc":"5819:3:1","nodeType":"YulIdentifier","src":"5819:3:1"},"nativeSrc":"5819:16:1","nodeType":"YulFunctionCall","src":"5819:16:1"},"nativeSrc":"5816:451:1","nodeType":"YulIf","src":"5816:451:1"},{"nativeSrc":"6280:23:1","nodeType":"YulAssignment","src":"6280:23:1","value":{"arguments":[{"name":"base","nativeSrc":"6292:4:1","nodeType":"YulIdentifier","src":"6292:4:1"},{"name":"base","nativeSrc":"6298:4:1","nodeType":"YulIdentifier","src":"6298:4:1"}],"functionName":{"name":"mul","nativeSrc":"6288:3:1","nodeType":"YulIdentifier","src":"6288:3:1"},"nativeSrc":"6288:15:1","nodeType":"YulFunctionCall","src":"6288:15:1"},"variableNames":[{"name":"base","nativeSrc":"6280:4:1","nodeType":"YulIdentifier","src":"6280:4:1"}]},{"nativeSrc":"6316:44:1","nodeType":"YulAssignment","src":"6316:44:1","value":{"arguments":[{"name":"exponent","nativeSrc":"6351:8:1","nodeType":"YulIdentifier","src":"6351:8:1"}],"functionName":{"name":"shift_right_1_unsigned","nativeSrc":"6328:22:1","nodeType":"YulIdentifier","src":"6328:22:1"},"nativeSrc":"6328:32:1","nodeType":"YulFunctionCall","src":"6328:32:1"},"variableNames":[{"name":"exponent","nativeSrc":"6316:8:1","nodeType":"YulIdentifier","src":"6316:8:1"}]}]},"condition":{"arguments":[{"name":"exponent","nativeSrc":"5669:8:1","nodeType":"YulIdentifier","src":"5669:8:1"},{"kind":"number","nativeSrc":"5679:1:1","nodeType":"YulLiteral","src":"5679:1:1","type":"","value":"1"}],"functionName":{"name":"gt","nativeSrc":"5666:2:1","nodeType":"YulIdentifier","src":"5666:2:1"},"nativeSrc":"5666:15:1","nodeType":"YulFunctionCall","src":"5666:15:1"},"nativeSrc":"5658:712:1","nodeType":"YulForLoop","post":{"nativeSrc":"5682:2:1","nodeType":"YulBlock","src":"5682:2:1","statements":[]},"pre":{"nativeSrc":"5662:3:1","nodeType":"YulBlock","src":"5662:3:1","statements":[]},"src":"5658:712:1"}]},"name":"checked_exp_helper","nativeSrc":"5528:848:1","nodeType":"YulFunctionDefinition","parameters":[{"name":"_power","nativeSrc":"5556:6:1","nodeType":"YulTypedName","src":"5556:6:1","type":""},{"name":"_base","nativeSrc":"5564:5:1","nodeType":"YulTypedName","src":"5564:5:1","type":""},{"name":"exponent","nativeSrc":"5571:8:1","nodeType":"YulTypedName","src":"5571:8:1","type":""},{"name":"max","nativeSrc":"5581:3:1","nodeType":"YulTypedName","src":"5581:3:1","type":""}],"returnVariables":[{"name":"power","nativeSrc":"5589:5:1","nodeType":"YulTypedName","src":"5589:5:1","type":""},{"name":"base","nativeSrc":"5596:4:1","nodeType":"YulTypedName","src":"5596:4:1","type":""}],"src":"5528:848:1"},{"body":{"nativeSrc":"6442:1013:1","nodeType":"YulBlock","src":"6442:1013:1","statements":[{"body":{"nativeSrc":"6637:20:1","nodeType":"YulBlock","src":"6637:20:1","statements":[{"nativeSrc":"6639:10:1","nodeType":"YulAssignment","src":"6639:10:1","value":{"kind":"number","nativeSrc":"6648:1:1","nodeType":"YulLiteral","src":"6648:1:1","type":"","value":"1"},"variableNames":[{"name":"power","nativeSrc":"6639:5:1","nodeType":"YulIdentifier","src":"6639:5:1"}]},{"nativeSrc":"6650:5:1","nodeType":"YulLeave","src":"6650:5:1"}]},"condition":{"arguments":[{"name":"exponent","nativeSrc":"6627:8:1","nodeType":"YulIdentifier","src":"6627:8:1"}],"functionName":{"name":"iszero","nativeSrc":"6620:6:1","nodeType":"YulIdentifier","src":"6620:6:1"},"nativeSrc":"6620:16:1","nodeType":"YulFunctionCall","src":"6620:16:1"},"nativeSrc":"6617:40:1","nodeType":"YulIf","src":"6617:40:1"},{"body":{"nativeSrc":"6682:20:1","nodeType":"YulBlock","src":"6682:20:1","statements":[{"nativeSrc":"6684:10:1","nodeType":"YulAssignment","src":"6684:10:1","value":{"kind":"number","nativeSrc":"6693:1:1","nodeType":"YulLiteral","src":"6693:1:1","type":"","value":"0"},"variableNames":[{"name":"power","nativeSrc":"6684:5:1","nodeType":"YulIdentifier","src":"6684:5:1"}]},{"nativeSrc":"6695:5:1","nodeType":"YulLeave","src":"6695:5:1"}]},"condition":{"arguments":[{"name":"base","nativeSrc":"6676:4:1","nodeType":"YulIdentifier","src":"6676:4:1"}],"functionName":{"name":"iszero","nativeSrc":"6669:6:1","nodeType":"YulIdentifier","src":"6669:6:1"},"nativeSrc":"6669:12:1","nodeType":"YulFunctionCall","src":"6669:12:1"},"nativeSrc":"6666:36:1","nodeType":"YulIf","src":"6666:36:1"},{"cases":[{"body":{"nativeSrc":"6812:20:1","nodeType":"YulBlock","src":"6812:20:1","statements":[{"nativeSrc":"6814:10:1","nodeType":"YulAssignment","src":"6814:10:1","value":{"kind":"number","nativeSrc":"6823:1:1","nodeType":"YulLiteral","src":"6823:1:1","type":"","value":"1"},"variableNames":[{"name":"power","nativeSrc":"6814:5:1","nodeType":"YulIdentifier","src":"6814:5:1"}]},{"nativeSrc":"6825:5:1","nodeType":"YulLeave","src":"6825:5:1"}]},"nativeSrc":"6805:27:1","nodeType":"YulCase","src":"6805:27:1","value":{"kind":"number","nativeSrc":"6810:1:1","nodeType":"YulLiteral","src":"6810:1:1","type":"","value":"1"}},{"body":{"nativeSrc":"6856:176:1","nodeType":"YulBlock","src":"6856:176:1","statements":[{"body":{"nativeSrc":"6891:22:1","nodeType":"YulBlock","src":"6891:22:1","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x11","nativeSrc":"6893:16:1","nodeType":"YulIdentifier","src":"6893:16:1"},"nativeSrc":"6893:18:1","nodeType":"YulFunctionCall","src":"6893:18:1"},"nativeSrc":"6893:18:1","nodeType":"YulExpressionStatement","src":"6893:18:1"}]},"condition":{"arguments":[{"name":"exponent","nativeSrc":"6876:8:1","nodeType":"YulIdentifier","src":"6876:8:1"},{"kind":"number","nativeSrc":"6886:3:1","nodeType":"YulLiteral","src":"6886:3:1","type":"","value":"255"}],"functionName":{"name":"gt","nativeSrc":"6873:2:1","nodeType":"YulIdentifier","src":"6873:2:1"},"nativeSrc":"6873:17:1","nodeType":"YulFunctionCall","src":"6873:17:1"},"nativeSrc":"6870:43:1","nodeType":"YulIf","src":"6870:43:1"},{"nativeSrc":"6926:25:1","nodeType":"YulAssignment","src":"6926:25:1","value":{"arguments":[{"kind":"number","nativeSrc":"6939:1:1","nodeType":"YulLiteral","src":"6939:1:1","type":"","value":"2"},{"name":"exponent","nativeSrc":"6942:8:1","nodeType":"YulIdentifier","src":"6942:8:1"}],"functionName":{"name":"exp","nativeSrc":"6935:3:1","nodeType":"YulIdentifier","src":"6935:3:1"},"nativeSrc":"6935:16:1","nodeType":"YulFunctionCall","src":"6935:16:1"},"variableNames":[{"name":"power","nativeSrc":"6926:5:1","nodeType":"YulIdentifier","src":"6926:5:1"}]},{"body":{"nativeSrc":"6982:22:1","nodeType":"YulBlock","src":"6982:22:1","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x11","nativeSrc":"6984:16:1","nodeType":"YulIdentifier","src":"6984:16:1"},"nativeSrc":"6984:18:1","nodeType":"YulFunctionCall","src":"6984:18:1"},"nativeSrc":"6984:18:1","nodeType":"YulExpressionStatement","src":"6984:18:1"}]},"condition":{"arguments":[{"name":"power","nativeSrc":"6970:5:1","nodeType":"YulIdentifier","src":"6970:5:1"},{"name":"max","nativeSrc":"6977:3:1","nodeType":"YulIdentifier","src":"6977:3:1"}],"functionName":{"name":"gt","nativeSrc":"6967:2:1","nodeType":"YulIdentifier","src":"6967:2:1"},"nativeSrc":"6967:14:1","nodeType":"YulFunctionCall","src":"6967:14:1"},"nativeSrc":"6964:40:1","nodeType":"YulIf","src":"6964:40:1"},{"nativeSrc":"7017:5:1","nodeType":"YulLeave","src":"7017:5:1"}]},"nativeSrc":"6841:191:1","nodeType":"YulCase","src":"6841:191:1","value":{"kind":"number","nativeSrc":"6846:1:1","nodeType":"YulLiteral","src":"6846:1:1","type":"","value":"2"}}],"expression":{"name":"base","nativeSrc":"6762:4:1","nodeType":"YulIdentifier","src":"6762:4:1"},"nativeSrc":"6755:277:1","nodeType":"YulSwitch","src":"6755:277:1"},{"body":{"nativeSrc":"7164:123:1","nodeType":"YulBlock","src":"7164:123:1","statements":[{"nativeSrc":"7178:28:1","nodeType":"YulAssignment","src":"7178:28:1","value":{"arguments":[{"name":"base","nativeSrc":"7191:4:1","nodeType":"YulIdentifier","src":"7191:4:1"},{"name":"exponent","nativeSrc":"7197:8:1","nodeType":"YulIdentifier","src":"7197:8:1"}],"functionName":{"name":"exp","nativeSrc":"7187:3:1","nodeType":"YulIdentifier","src":"7187:3:1"},"nativeSrc":"7187:19:1","nodeType":"YulFunctionCall","src":"7187:19:1"},"variableNames":[{"name":"power","nativeSrc":"7178:5:1","nodeType":"YulIdentifier","src":"7178:5:1"}]},{"body":{"nativeSrc":"7237:22:1","nodeType":"YulBlock","src":"7237:22:1","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x11","nativeSrc":"7239:16:1","nodeType":"YulIdentifier","src":"7239:16:1"},"nativeSrc":"7239:18:1","nodeType":"YulFunctionCall","src":"7239:18:1"},"nativeSrc":"7239:18:1","nodeType":"YulExpressionStatement","src":"7239:18:1"}]},"condition":{"arguments":[{"name":"power","nativeSrc":"7225:5:1","nodeType":"YulIdentifier","src":"7225:5:1"},{"name":"max","nativeSrc":"7232:3:1","nodeType":"YulIdentifier","src":"7232:3:1"}],"functionName":{"name":"gt","nativeSrc":"7222:2:1","nodeType":"YulIdentifier","src":"7222:2:1"},"nativeSrc":"7222:14:1","nodeType":"YulFunctionCall","src":"7222:14:1"},"nativeSrc":"7219:40:1","nodeType":"YulIf","src":"7219:40:1"},{"nativeSrc":"7272:5:1","nodeType":"YulLeave","src":"7272:5:1"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"base","nativeSrc":"7067:4:1","nodeType":"YulIdentifier","src":"7067:4:1"},{"kind":"number","nativeSrc":"7073:2:1","nodeType":"YulLiteral","src":"7073:2:1","type":"","value":"11"}],"functionName":{"name":"lt","nativeSrc":"7064:2:1","nodeType":"YulIdentifier","src":"7064:2:1"},"nativeSrc":"7064:12:1","nodeType":"YulFunctionCall","src":"7064:12:1"},{"arguments":[{"name":"exponent","nativeSrc":"7081:8:1","nodeType":"YulIdentifier","src":"7081:8:1"},{"kind":"number","nativeSrc":"7091:2:1","nodeType":"YulLiteral","src":"7091:2:1","type":"","value":"78"}],"functionName":{"name":"lt","nativeSrc":"7078:2:1","nodeType":"YulIdentifier","src":"7078:2:1"},"nativeSrc":"7078:16:1","nodeType":"YulFunctionCall","src":"7078:16:1"}],"functionName":{"name":"and","nativeSrc":"7060:3:1","nodeType":"YulIdentifier","src":"7060:3:1"},"nativeSrc":"7060:35:1","nodeType":"YulFunctionCall","src":"7060:35:1"},{"arguments":[{"arguments":[{"name":"base","nativeSrc":"7116:4:1","nodeType":"YulIdentifier","src":"7116:4:1"},{"kind":"number","nativeSrc":"7122:3:1","nodeType":"YulLiteral","src":"7122:3:1","type":"","value":"307"}],"functionName":{"name":"lt","nativeSrc":"7113:2:1","nodeType":"YulIdentifier","src":"7113:2:1"},"nativeSrc":"7113:13:1","nodeType":"YulFunctionCall","src":"7113:13:1"},{"arguments":[{"name":"exponent","nativeSrc":"7131:8:1","nodeType":"YulIdentifier","src":"7131:8:1"},{"kind":"number","nativeSrc":"7141:2:1","nodeType":"YulLiteral","src":"7141:2:1","type":"","value":"32"}],"functionName":{"name":"lt","nativeSrc":"7128:2:1","nodeType":"YulIdentifier","src":"7128:2:1"},"nativeSrc":"7128:16:1","nodeType":"YulFunctionCall","src":"7128:16:1"}],"functionName":{"name":"and","nativeSrc":"7109:3:1","nodeType":"YulIdentifier","src":"7109:3:1"},"nativeSrc":"7109:36:1","nodeType":"YulFunctionCall","src":"7109:36:1"}],"functionName":{"name":"or","nativeSrc":"7044:2:1","nodeType":"YulIdentifier","src":"7044:2:1"},"nativeSrc":"7044:111:1","nodeType":"YulFunctionCall","src":"7044:111:1"},"nativeSrc":"7041:246:1","nodeType":"YulIf","src":"7041:246:1"},{"nativeSrc":"7297:57:1","nodeType":"YulAssignment","src":"7297:57:1","value":{"arguments":[{"kind":"number","nativeSrc":"7331:1:1","nodeType":"YulLiteral","src":"7331:1:1","type":"","value":"1"},{"name":"base","nativeSrc":"7334:4:1","nodeType":"YulIdentifier","src":"7334:4:1"},{"name":"exponent","nativeSrc":"7340:8:1","nodeType":"YulIdentifier","src":"7340:8:1"},{"name":"max","nativeSrc":"7350:3:1","nodeType":"YulIdentifier","src":"7350:3:1"}],"functionName":{"name":"checked_exp_helper","nativeSrc":"7312:18:1","nodeType":"YulIdentifier","src":"7312:18:1"},"nativeSrc":"7312:42:1","nodeType":"YulFunctionCall","src":"7312:42:1"},"variableNames":[{"name":"power","nativeSrc":"7297:5:1","nodeType":"YulIdentifier","src":"7297:5:1"},{"name":"base","nativeSrc":"7304:4:1","nodeType":"YulIdentifier","src":"7304:4:1"}]},{"body":{"nativeSrc":"7393:22:1","nodeType":"YulBlock","src":"7393:22:1","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x11","nativeSrc":"7395:16:1","nodeType":"YulIdentifier","src":"7395:16:1"},"nativeSrc":"7395:18:1","nodeType":"YulFunctionCall","src":"7395:18:1"},"nativeSrc":"7395:18:1","nodeType":"YulExpressionStatement","src":"7395:18:1"}]},"condition":{"arguments":[{"name":"power","nativeSrc":"7370:5:1","nodeType":"YulIdentifier","src":"7370:5:1"},{"arguments":[{"name":"max","nativeSrc":"7381:3:1","nodeType":"YulIdentifier","src":"7381:3:1"},{"name":"base","nativeSrc":"7386:4:1","nodeType":"YulIdentifier","src":"7386:4:1"}],"functionName":{"name":"div","nativeSrc":"7377:3:1","nodeType":"YulIdentifier","src":"7377:3:1"},"nativeSrc":"7377:14:1","nodeType":"YulFunctionCall","src":"7377:14:1"}],"functionName":{"name":"gt","nativeSrc":"7367:2:1","nodeType":"YulIdentifier","src":"7367:2:1"},"nativeSrc":"7367:25:1","nodeType":"YulFunctionCall","src":"7367:25:1"},"nativeSrc":"7364:51:1","nodeType":"YulIf","src":"7364:51:1"},{"nativeSrc":"7424:25:1","nodeType":"YulAssignment","src":"7424:25:1","value":{"arguments":[{"name":"power","nativeSrc":"7437:5:1","nodeType":"YulIdentifier","src":"7437:5:1"},{"name":"base","nativeSrc":"7444:4:1","nodeType":"YulIdentifier","src":"7444:4:1"}],"functionName":{"name":"mul","nativeSrc":"7433:3:1","nodeType":"YulIdentifier","src":"7433:3:1"},"nativeSrc":"7433:16:1","nodeType":"YulFunctionCall","src":"7433:16:1"},"variableNames":[{"name":"power","nativeSrc":"7424:5:1","nodeType":"YulIdentifier","src":"7424:5:1"}]}]},"name":"checked_exp_unsigned","nativeSrc":"6382:1073:1","nodeType":"YulFunctionDefinition","parameters":[{"name":"base","nativeSrc":"6412:4:1","nodeType":"YulTypedName","src":"6412:4:1","type":""},{"name":"exponent","nativeSrc":"6418:8:1","nodeType":"YulTypedName","src":"6418:8:1","type":""},{"name":"max","nativeSrc":"6428:3:1","nodeType":"YulTypedName","src":"6428:3:1","type":""}],"returnVariables":[{"name":"power","nativeSrc":"6436:5:1","nodeType":"YulTypedName","src":"6436:5:1","type":""}],"src":"6382:1073:1"},{"body":{"nativeSrc":"7527:219:1","nodeType":"YulBlock","src":"7527:219:1","statements":[{"nativeSrc":"7537:31:1","nodeType":"YulAssignment","src":"7537:31:1","value":{"arguments":[{"name":"base","nativeSrc":"7563:4:1","nodeType":"YulIdentifier","src":"7563:4:1"}],"functionName":{"name":"cleanup_t_uint256","nativeSrc":"7545:17:1","nodeType":"YulIdentifier","src":"7545:17:1"},"nativeSrc":"7545:23:1","nodeType":"YulFunctionCall","src":"7545:23:1"},"variableNames":[{"name":"base","nativeSrc":"7537:4:1","nodeType":"YulIdentifier","src":"7537:4:1"}]},{"nativeSrc":"7577:39:1","nodeType":"YulAssignment","src":"7577:39:1","value":{"arguments":[{"name":"exponent","nativeSrc":"7607:8:1","nodeType":"YulIdentifier","src":"7607:8:1"}],"functionName":{"name":"cleanup_t_uint256","nativeSrc":"7589:17:1","nodeType":"YulIdentifier","src":"7589:17:1"},"nativeSrc":"7589:27:1","nodeType":"YulFunctionCall","src":"7589:27:1"},"variableNames":[{"name":"exponent","nativeSrc":"7577:8:1","nodeType":"YulIdentifier","src":"7577:8:1"}]},{"nativeSrc":"7626:113:1","nodeType":"YulAssignment","src":"7626:113:1","value":{"arguments":[{"name":"base","nativeSrc":"7656:4:1","nodeType":"YulIdentifier","src":"7656:4:1"},{"name":"exponent","nativeSrc":"7662:8:1","nodeType":"YulIdentifier","src":"7662:8:1"},{"kind":"number","nativeSrc":"7672:66:1","nodeType":"YulLiteral","src":"7672:66:1","type":"","value":"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"checked_exp_unsigned","nativeSrc":"7635:20:1","nodeType":"YulIdentifier","src":"7635:20:1"},"nativeSrc":"7635:104:1","nodeType":"YulFunctionCall","src":"7635:104:1"},"variableNames":[{"name":"power","nativeSrc":"7626:5:1","nodeType":"YulIdentifier","src":"7626:5:1"}]}]},"name":"checked_exp_t_uint256_t_uint256","nativeSrc":"7461:285:1","nodeType":"YulFunctionDefinition","parameters":[{"name":"base","nativeSrc":"7502:4:1","nodeType":"YulTypedName","src":"7502:4:1","type":""},{"name":"exponent","nativeSrc":"7508:8:1","nodeType":"YulTypedName","src":"7508:8:1","type":""}],"returnVariables":[{"name":"power","nativeSrc":"7521:5:1","nodeType":"YulTypedName","src":"7521:5:1","type":""}],"src":"7461:285:1"},{"body":{"nativeSrc":"7800:362:1","nodeType":"YulBlock","src":"7800:362:1","statements":[{"nativeSrc":"7810:25:1","nodeType":"YulAssignment","src":"7810:25:1","value":{"arguments":[{"name":"x","nativeSrc":"7833:1:1","nodeType":"YulIdentifier","src":"7833:1:1"}],"functionName":{"name":"cleanup_t_uint256","nativeSrc":"7815:17:1","nodeType":"YulIdentifier","src":"7815:17:1"},"nativeSrc":"7815:20:1","nodeType":"YulFunctionCall","src":"7815:20:1"},"variableNames":[{"name":"x","nativeSrc":"7810:1:1","nodeType":"YulIdentifier","src":"7810:1:1"}]},{"nativeSrc":"7844:25:1","nodeType":"YulAssignment","src":"7844:25:1","value":{"arguments":[{"name":"y","nativeSrc":"7867:1:1","nodeType":"YulIdentifier","src":"7867:1:1"}],"functionName":{"name":"cleanup_t_uint256","nativeSrc":"7849:17:1","nodeType":"YulIdentifier","src":"7849:17:1"},"nativeSrc":"7849:20:1","nodeType":"YulFunctionCall","src":"7849:20:1"},"variableNames":[{"name":"y","nativeSrc":"7844:1:1","nodeType":"YulIdentifier","src":"7844:1:1"}]},{"nativeSrc":"7878:28:1","nodeType":"YulVariableDeclaration","src":"7878:28:1","value":{"arguments":[{"name":"x","nativeSrc":"7901:1:1","nodeType":"YulIdentifier","src":"7901:1:1"},{"name":"y","nativeSrc":"7904:1:1","nodeType":"YulIdentifier","src":"7904:1:1"}],"functionName":{"name":"mul","nativeSrc":"7897:3:1","nodeType":"YulIdentifier","src":"7897:3:1"},"nativeSrc":"7897:9:1","nodeType":"YulFunctionCall","src":"7897:9:1"},"variables":[{"name":"product_raw","nativeSrc":"7882:11:1","nodeType":"YulTypedName","src":"7882:11:1","type":""}]},{"nativeSrc":"7915:41:1","nodeType":"YulAssignment","src":"7915:41:1","value":{"arguments":[{"name":"product_raw","nativeSrc":"7944:11:1","nodeType":"YulIdentifier","src":"7944:11:1"}],"functionName":{"name":"cleanup_t_uint256","nativeSrc":"7926:17:1","nodeType":"YulIdentifier","src":"7926:17:1"},"nativeSrc":"7926:30:1","nodeType":"YulFunctionCall","src":"7926:30:1"},"variableNames":[{"name":"product","nativeSrc":"7915:7:1","nodeType":"YulIdentifier","src":"7915:7:1"}]},{"body":{"nativeSrc":"8133:22:1","nodeType":"YulBlock","src":"8133:22:1","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x11","nativeSrc":"8135:16:1","nodeType":"YulIdentifier","src":"8135:16:1"},"nativeSrc":"8135:18:1","nodeType":"YulFunctionCall","src":"8135:18:1"},"nativeSrc":"8135:18:1","nodeType":"YulExpressionStatement","src":"8135:18:1"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"x","nativeSrc":"8066:1:1","nodeType":"YulIdentifier","src":"8066:1:1"}],"functionName":{"name":"iszero","nativeSrc":"8059:6:1","nodeType":"YulIdentifier","src":"8059:6:1"},"nativeSrc":"8059:9:1","nodeType":"YulFunctionCall","src":"8059:9:1"},{"arguments":[{"name":"y","nativeSrc":"8089:1:1","nodeType":"YulIdentifier","src":"8089:1:1"},{"arguments":[{"name":"product","nativeSrc":"8096:7:1","nodeType":"YulIdentifier","src":"8096:7:1"},{"name":"x","nativeSrc":"8105:1:1","nodeType":"YulIdentifier","src":"8105:1:1"}],"functionName":{"name":"div","nativeSrc":"8092:3:1","nodeType":"YulIdentifier","src":"8092:3:1"},"nativeSrc":"8092:15:1","nodeType":"YulFunctionCall","src":"8092:15:1"}],"functionName":{"name":"eq","nativeSrc":"8086:2:1","nodeType":"YulIdentifier","src":"8086:2:1"},"nativeSrc":"8086:22:1","nodeType":"YulFunctionCall","src":"8086:22:1"}],"functionName":{"name":"or","nativeSrc":"8039:2:1","nodeType":"YulIdentifier","src":"8039:2:1"},"nativeSrc":"8039:83:1","nodeType":"YulFunctionCall","src":"8039:83:1"}],"functionName":{"name":"iszero","nativeSrc":"8019:6:1","nodeType":"YulIdentifier","src":"8019:6:1"},"nativeSrc":"8019:113:1","nodeType":"YulFunctionCall","src":"8019:113:1"},"nativeSrc":"8016:139:1","nodeType":"YulIf","src":"8016:139:1"}]},"name":"checked_mul_t_uint256","nativeSrc":"7752:410:1","nodeType":"YulFunctionDefinition","parameters":[{"name":"x","nativeSrc":"7783:1:1","nodeType":"YulTypedName","src":"7783:1:1","type":""},{"name":"y","nativeSrc":"7786:1:1","nodeType":"YulTypedName","src":"7786:1:1","type":""}],"returnVariables":[{"name":"product","nativeSrc":"7792:7:1","nodeType":"YulTypedName","src":"7792:7:1","type":""}],"src":"7752:410:1"}]},"contents":"{\n\n    function array_length_t_string_memory_ptr(value) -> length {\n\n        length := mload(value)\n\n    }\n\n    function panic_error_0x41() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x41)\n        revert(0, 0x24)\n    }\n\n    function panic_error_0x22() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x22)\n        revert(0, 0x24)\n    }\n\n    function extract_byte_array_length(data) -> length {\n        length := div(data, 2)\n        let outOfPlaceEncoding := and(data, 1)\n        if iszero(outOfPlaceEncoding) {\n            length := and(length, 0x7f)\n        }\n\n        if eq(outOfPlaceEncoding, lt(length, 32)) {\n            panic_error_0x22()\n        }\n    }\n\n    function array_dataslot_t_string_storage(ptr) -> data {\n        data := ptr\n\n        mstore(0, ptr)\n        data := keccak256(0, 0x20)\n\n    }\n\n    function divide_by_32_ceil(value) -> result {\n        result := div(add(value, 31), 32)\n    }\n\n    function shift_left_dynamic(bits, value) -> newValue {\n        newValue :=\n\n        shl(bits, value)\n\n    }\n\n    function update_byte_slice_dynamic32(value, shiftBytes, toInsert) -> result {\n        let shiftBits := mul(shiftBytes, 8)\n        let mask := shift_left_dynamic(shiftBits, 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff)\n        toInsert := shift_left_dynamic(shiftBits, toInsert)\n        value := and(value, not(mask))\n        result := or(value, and(toInsert, mask))\n    }\n\n    function cleanup_t_uint256(value) -> cleaned {\n        cleaned := value\n    }\n\n    function identity(value) -> ret {\n        ret := value\n    }\n\n    function convert_t_uint256_to_t_uint256(value) -> converted {\n        converted := cleanup_t_uint256(identity(cleanup_t_uint256(value)))\n    }\n\n    function prepare_store_t_uint256(value) -> ret {\n        ret := value\n    }\n\n    function update_storage_value_t_uint256_to_t_uint256(slot, offset, value_0) {\n        let convertedValue_0 := convert_t_uint256_to_t_uint256(value_0)\n        sstore(slot, update_byte_slice_dynamic32(sload(slot), offset, prepare_store_t_uint256(convertedValue_0)))\n    }\n\n    function zero_value_for_split_t_uint256() -> ret {\n        ret := 0\n    }\n\n    function storage_set_to_zero_t_uint256(slot, offset) {\n        let zero_0 := zero_value_for_split_t_uint256()\n        update_storage_value_t_uint256_to_t_uint256(slot, offset, zero_0)\n    }\n\n    function clear_storage_range_t_bytes1(start, end) {\n        for {} lt(start, end) { start := add(start, 1) }\n        {\n            storage_set_to_zero_t_uint256(start, 0)\n        }\n    }\n\n    function clean_up_bytearray_end_slots_t_string_storage(array, len, startIndex) {\n\n        if gt(len, 31) {\n            let dataArea := array_dataslot_t_string_storage(array)\n            let deleteStart := add(dataArea, divide_by_32_ceil(startIndex))\n            // If we are clearing array to be short byte array, we want to clear only data starting from array data area.\n            if lt(startIndex, 32) { deleteStart := dataArea }\n            clear_storage_range_t_bytes1(deleteStart, add(dataArea, divide_by_32_ceil(len)))\n        }\n\n    }\n\n    function shift_right_unsigned_dynamic(bits, value) -> newValue {\n        newValue :=\n\n        shr(bits, value)\n\n    }\n\n    function mask_bytes_dynamic(data, bytes) -> result {\n        let mask := not(shift_right_unsigned_dynamic(mul(8, bytes), not(0)))\n        result := and(data, mask)\n    }\n    function extract_used_part_and_set_length_of_short_byte_array(data, len) -> used {\n        // we want to save only elements that are part of the array after resizing\n        // others should be set to zero\n        data := mask_bytes_dynamic(data, len)\n        used := or(data, mul(2, len))\n    }\n    function copy_byte_array_to_storage_from_t_string_memory_ptr_to_t_string_storage(slot, src) {\n\n        let newLen := array_length_t_string_memory_ptr(src)\n        // Make sure array length is sane\n        if gt(newLen, 0xffffffffffffffff) { panic_error_0x41() }\n\n        let oldLen := extract_byte_array_length(sload(slot))\n\n        // potentially truncate data\n        clean_up_bytearray_end_slots_t_string_storage(slot, oldLen, newLen)\n\n        let srcOffset := 0\n\n        srcOffset := 0x20\n\n        switch gt(newLen, 31)\n        case 1 {\n            let loopEnd := and(newLen, not(0x1f))\n\n            let dstPtr := array_dataslot_t_string_storage(slot)\n            let i := 0\n            for { } lt(i, loopEnd) { i := add(i, 0x20) } {\n                sstore(dstPtr, mload(add(src, srcOffset)))\n                dstPtr := add(dstPtr, 1)\n                srcOffset := add(srcOffset, 32)\n            }\n            if lt(loopEnd, newLen) {\n                let lastValue := mload(add(src, srcOffset))\n                sstore(dstPtr, mask_bytes_dynamic(lastValue, and(newLen, 0x1f)))\n            }\n            sstore(slot, add(mul(newLen, 2), 1))\n        }\n        default {\n            let value := 0\n            if newLen {\n                value := mload(add(src, srcOffset))\n            }\n            sstore(slot, extract_used_part_and_set_length_of_short_byte_array(value, newLen))\n        }\n    }\n\n    function panic_error_0x11() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x11)\n        revert(0, 0x24)\n    }\n\n    function shift_right_1_unsigned(value) -> newValue {\n        newValue :=\n\n        shr(1, value)\n\n    }\n\n    function checked_exp_helper(_power, _base, exponent, max) -> power, base {\n        power := _power\n        base  := _base\n        for { } gt(exponent, 1) {}\n        {\n            // overflow check for base * base\n            if gt(base, div(max, base)) { panic_error_0x11() }\n            if and(exponent, 1)\n            {\n                // No checks for power := mul(power, base) needed, because the check\n                // for base * base above is sufficient, since:\n                // |power| <= base (proof by induction) and thus:\n                // |power * base| <= base * base <= max <= |min| (for signed)\n                // (this is equally true for signed and unsigned exp)\n                power := mul(power, base)\n            }\n            base := mul(base, base)\n            exponent := shift_right_1_unsigned(exponent)\n        }\n    }\n\n    function checked_exp_unsigned(base, exponent, max) -> power {\n        // This function currently cannot be inlined because of the\n        // \"leave\" statements. We have to improve the optimizer.\n\n        // Note that 0**0 == 1\n        if iszero(exponent) { power := 1 leave }\n        if iszero(base) { power := 0 leave }\n\n        // Specializations for small bases\n        switch base\n        // 0 is handled above\n        case 1 { power := 1 leave }\n        case 2\n        {\n            if gt(exponent, 255) { panic_error_0x11() }\n            power := exp(2, exponent)\n            if gt(power, max) { panic_error_0x11() }\n            leave\n        }\n        if or(\n            and(lt(base, 11), lt(exponent, 78)),\n            and(lt(base, 307), lt(exponent, 32))\n        )\n        {\n            power := exp(base, exponent)\n            if gt(power, max) { panic_error_0x11() }\n            leave\n        }\n\n        power, base := checked_exp_helper(1, base, exponent, max)\n\n        if gt(power, div(max, base)) { panic_error_0x11() }\n        power := mul(power, base)\n    }\n\n    function checked_exp_t_uint256_t_uint256(base, exponent) -> power {\n        base := cleanup_t_uint256(base)\n        exponent := cleanup_t_uint256(exponent)\n\n        power := checked_exp_unsigned(base, exponent, 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff)\n\n    }\n\n    function checked_mul_t_uint256(x, y) -> product {\n        x := cleanup_t_uint256(x)\n        y := cleanup_t_uint256(y)\n        let product_raw := mul(x, y)\n        product := cleanup_t_uint256(product_raw)\n\n        // overflow, if x != 0 and y != product/x\n        if iszero(\n            or(\n                iszero(x),\n                eq(y, div(product, x))\n            )\n        ) { panic_error_0x11() }\n\n    }\n\n}\n","id":1,"language":"Yul","name":"#utility.yul"}],"linkReferences":{},"object":"60806040526040518060400160405280600781526020017f4d79546f6b656e00000000000000000000000000000000000000000000000000815250600090816200004a9190620003b9565b506040518060400160405280600381526020017f4d4350000000000000000000000000000000000000000000000000000000000081525060019081620000919190620003b9565b506012600260006101000a81548160ff021916908360ff160217905550348015620000bb57600080fd5b50600260009054906101000a900460ff1660ff16600a620000dd919062000623565b620f4240620000ed919062000674565b600381905550600354600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550620006bf565b600081519050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b60006002820490506001821680620001c157607f821691505b602082108103620001d757620001d662000179565b5b50919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b600060088302620002417fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8262000202565b6200024d868362000202565b95508019841693508086168417925050509392505050565b6000819050919050565b6000819050919050565b60006200029a620002946200028e8462000265565b6200026f565b62000265565b9050919050565b6000819050919050565b620002b68362000279565b620002ce620002c582620002a1565b8484546200020f565b825550505050565b600090565b620002e5620002d6565b620002f2818484620002ab565b505050565b5b818110156200031a576200030e600082620002db565b600181019050620002f8565b5050565b601f82111562000369576200033381620001dd565b6200033e84620001f2565b810160208510156200034e578190505b620003666200035d85620001f2565b830182620002f7565b50505b505050565b600082821c905092915050565b60006200038e600019846008026200036e565b1980831691505092915050565b6000620003a983836200037b565b9150826002028217905092915050565b620003c4826200013f565b67ffffffffffffffff811115620003e057620003df6200014a565b5b620003ec8254620001a8565b620003f98282856200031e565b600060209050601f8311600181146200043157600084156200041c578287015190505b6200042885826200039b565b86555062000498565b601f1984166200044186620001dd565b60005b828110156200046b5784890151825560018201915060208501945060208101905062000444565b868310156200048b578489015162000487601f8916826200037b565b8355505b6001600288020188555050505b505050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60008160011c9050919050565b6000808291508390505b60018511156200052e57808604811115620005065762000505620004a0565b5b6001851615620005165780820291505b80810290506200052685620004cf565b9450620004e6565b94509492505050565b6000826200054957600190506200061c565b816200055957600090506200061c565b81600181146200057257600281146200057d57620005b3565b60019150506200061c565b60ff841115620005925762000591620004a0565b5b8360020a915084821115620005ac57620005ab620004a0565b5b506200061c565b5060208310610133831016604e8410600b8410161715620005ed5782820a905083811115620005e757620005e6620004a0565b5b6200061c565b620005fc8484846001620004dc565b92509050818404811115620006165762000615620004a0565b5b81810290505b9392505050565b6000620006308262000265565b91506200063d8362000265565b92506200066c7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff848462000537565b905092915050565b6000620006818262000265565b91506200068e8362000265565b92508282026200069e8162000265565b91508282048414831517620006b857620006b7620004a0565b5b5092915050565b610edc80620006cf6000396000f3fe608060405234801561001057600080fd5b506004361061009e5760003560e01c806340c10f191161006657806340c10f191461015d57806370a082311461017957806395d89b41146101a9578063a9059cbb146101c7578063dd62ed3e146101f75761009e565b806306fdde03146100a3578063095ea7b3146100c157806318160ddd146100f157806323b872dd1461010f578063313ce5671461013f575b600080fd5b6100ab610227565b6040516100b89190610a85565b60405180910390f35b6100db60048036038101906100d69190610b40565b6102b5565b6040516100e89190610b9b565b60405180910390f35b6100f96103a7565b6040516101069190610bc5565b60405180910390f35b61012960048036038101906101249190610be0565b6103ad565b6040516101369190610b9b565b60405180910390f35b61014761069f565b6040516101549190610c4f565b60405180910390f35b61017760048036038101906101729190610b40565b6106b2565b005b610193600480360381019061018e9190610c6a565b61078b565b6040516101a09190610bc5565b60405180910390f35b6101b16107a3565b6040516101be9190610a85565b60405180910390f35b6101e160048036038101906101dc9190610b40565b610831565b6040516101ee9190610b9b565b60405180910390f35b610211600480360381019061020c9190610c97565b6109d0565b60405161021e9190610bc5565b60405180910390f35b6000805461023490610d06565b80601f016020809104026020016040519081016040528092919081815260200182805461026090610d06565b80156102ad5780601f10610282576101008083540402835291602001916102ad565b820191906000526020600020905b81548152906001019060200180831161029057829003601f168201915b505050505081565b600081600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925846040516103959190610bc5565b60405180910390a36001905092915050565b60035481565b600081600460008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020541015610431576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161042890610d83565b60405180910390fd5b81600560008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205410156104f0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104e790610def565b60405180910390fd5b81600460008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461053f9190610e3e565b9250508190555081600460008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546105959190610e72565b9250508190555081600560008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546106289190610e3e565b925050819055508273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8460405161068c9190610bc5565b60405180910390a3600190509392505050565b600260009054906101000a900460ff1681565b80600460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546107019190610e72565b92505081905550806003600082825461071a9190610e72565b925050819055508173ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8360405161077f9190610bc5565b60405180910390a35050565b60046020528060005260406000206000915090505481565b600180546107b090610d06565b80601f01602080910402602001604051908101604052809291908181526020018280546107dc90610d06565b80156108295780601f106107fe57610100808354040283529160200191610829565b820191906000526020600020905b81548152906001019060200180831161080c57829003601f168201915b505050505081565b600081600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205410156108b5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108ac90610d83565b60405180910390fd5b81600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546109049190610e3e565b9250508190555081600460008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461095a9190610e72565b925050819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040516109be9190610bc5565b60405180910390a36001905092915050565b6005602052816000526040600020602052806000526040600020600091509150505481565b600081519050919050565b600082825260208201905092915050565b60005b83811015610a2f578082015181840152602081019050610a14565b60008484015250505050565b6000601f19601f8301169050919050565b6000610a57826109f5565b610a618185610a00565b9350610a71818560208601610a11565b610a7a81610a3b565b840191505092915050565b60006020820190508181036000830152610a9f8184610a4c565b905092915050565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610ad782610aac565b9050919050565b610ae781610acc565b8114610af257600080fd5b50565b600081359050610b0481610ade565b92915050565b6000819050919050565b610b1d81610b0a565b8114610b2857600080fd5b50565b600081359050610b3a81610b14565b92915050565b60008060408385031215610b5757610b56610aa7565b5b6000610b6585828601610af5565b9250506020610b7685828601610b2b565b9150509250929050565b60008115159050919050565b610b9581610b80565b82525050565b6000602082019050610bb06000830184610b8c565b92915050565b610bbf81610b0a565b82525050565b6000602082019050610bda6000830184610bb6565b92915050565b600080600060608486031215610bf957610bf8610aa7565b5b6000610c0786828701610af5565b9350506020610c1886828701610af5565b9250506040610c2986828701610b2b565b9150509250925092565b600060ff82169050919050565b610c4981610c33565b82525050565b6000602082019050610c646000830184610c40565b92915050565b600060208284031215610c8057610c7f610aa7565b5b6000610c8e84828501610af5565b91505092915050565b60008060408385031215610cae57610cad610aa7565b5b6000610cbc85828601610af5565b9250506020610ccd85828601610af5565b9150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b60006002820490506001821680610d1e57607f821691505b602082108103610d3157610d30610cd7565b5b50919050565b7f696e73756666696369656e742062616c616e6365000000000000000000000000600082015250565b6000610d6d601483610a00565b9150610d7882610d37565b602082019050919050565b60006020820190508181036000830152610d9c81610d60565b9050919050565b7f6578636565647320616c6c6f77616e6365000000000000000000000000000000600082015250565b6000610dd9601183610a00565b9150610de482610da3565b602082019050919050565b60006020820190508181036000830152610e0881610dcc565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610e4982610b0a565b9150610e5483610b0a565b9250828203905081811115610e6c57610e6b610e0f565b5b92915050565b6000610e7d82610b0a565b9150610e8883610b0a565b9250828201905080821115610ea057610e9f610e0f565b5b9291505056fea264697066735822122041fa693da1c1decf8c3e4932e0c8ae158fb01e9b5107935494ee90fbcdd5f6dc64736f6c63430008180033","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x7 DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x4D79546F6B656E00000000000000000000000000000000000000000000000000 DUP2 MSTORE POP PUSH1 0x0 SWAP1 DUP2 PUSH3 0x4A SWAP2 SWAP1 PUSH3 0x3B9 JUMP JUMPDEST POP PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x3 DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x4D43500000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE POP PUSH1 0x1 SWAP1 DUP2 PUSH3 0x91 SWAP2 SWAP1 PUSH3 0x3B9 JUMP JUMPDEST POP PUSH1 0x12 PUSH1 0x2 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 PUSH1 0xFF AND MUL OR SWAP1 SSTORE POP CALLVALUE DUP1 ISZERO PUSH3 0xBB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x2 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND PUSH1 0xFF AND PUSH1 0xA PUSH3 0xDD SWAP2 SWAP1 PUSH3 0x623 JUMP JUMPDEST PUSH3 0xF4240 PUSH3 0xED SWAP2 SWAP1 PUSH3 0x674 JUMP JUMPDEST PUSH1 0x3 DUP2 SWAP1 SSTORE POP PUSH1 0x3 SLOAD PUSH1 0x4 PUSH1 0x0 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP2 SWAP1 SSTORE POP PUSH3 0x6BF JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x2 DUP3 DIV SWAP1 POP PUSH1 0x1 DUP3 AND DUP1 PUSH3 0x1C1 JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 SUB PUSH3 0x1D7 JUMPI PUSH3 0x1D6 PUSH3 0x179 JUMP JUMPDEST JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP DUP2 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 PUSH1 0x1F DUP4 ADD DIV SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 SHL SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x8 DUP4 MUL PUSH3 0x241 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 PUSH3 0x202 JUMP JUMPDEST PUSH3 0x24D DUP7 DUP4 PUSH3 0x202 JUMP JUMPDEST SWAP6 POP DUP1 NOT DUP5 AND SWAP4 POP DUP1 DUP7 AND DUP5 OR SWAP3 POP POP POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH3 0x29A PUSH3 0x294 PUSH3 0x28E DUP5 PUSH3 0x265 JUMP JUMPDEST PUSH3 0x26F JUMP JUMPDEST PUSH3 0x265 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH3 0x2B6 DUP4 PUSH3 0x279 JUMP JUMPDEST PUSH3 0x2CE PUSH3 0x2C5 DUP3 PUSH3 0x2A1 JUMP JUMPDEST DUP5 DUP5 SLOAD PUSH3 0x20F JUMP JUMPDEST DUP3 SSTORE POP POP POP POP JUMP JUMPDEST PUSH1 0x0 SWAP1 JUMP JUMPDEST PUSH3 0x2E5 PUSH3 0x2D6 JUMP JUMPDEST PUSH3 0x2F2 DUP2 DUP5 DUP5 PUSH3 0x2AB JUMP JUMPDEST POP POP POP JUMP JUMPDEST JUMPDEST DUP2 DUP2 LT ISZERO PUSH3 0x31A JUMPI PUSH3 0x30E PUSH1 0x0 DUP3 PUSH3 0x2DB JUMP JUMPDEST PUSH1 0x1 DUP2 ADD SWAP1 POP PUSH3 0x2F8 JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x1F DUP3 GT ISZERO PUSH3 0x369 JUMPI PUSH3 0x333 DUP2 PUSH3 0x1DD JUMP JUMPDEST PUSH3 0x33E DUP5 PUSH3 0x1F2 JUMP JUMPDEST DUP2 ADD PUSH1 0x20 DUP6 LT ISZERO PUSH3 0x34E JUMPI DUP2 SWAP1 POP JUMPDEST PUSH3 0x366 PUSH3 0x35D DUP6 PUSH3 0x1F2 JUMP JUMPDEST DUP4 ADD DUP3 PUSH3 0x2F7 JUMP JUMPDEST POP POP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 SHR SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH3 0x38E PUSH1 0x0 NOT DUP5 PUSH1 0x8 MUL PUSH3 0x36E JUMP JUMPDEST NOT DUP1 DUP4 AND SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH3 0x3A9 DUP4 DUP4 PUSH3 0x37B JUMP JUMPDEST SWAP2 POP DUP3 PUSH1 0x2 MUL DUP3 OR SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH3 0x3C4 DUP3 PUSH3 0x13F JUMP JUMPDEST PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH3 0x3E0 JUMPI PUSH3 0x3DF PUSH3 0x14A JUMP JUMPDEST JUMPDEST PUSH3 0x3EC DUP3 SLOAD PUSH3 0x1A8 JUMP JUMPDEST PUSH3 0x3F9 DUP3 DUP3 DUP6 PUSH3 0x31E JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 SWAP1 POP PUSH1 0x1F DUP4 GT PUSH1 0x1 DUP2 EQ PUSH3 0x431 JUMPI PUSH1 0x0 DUP5 ISZERO PUSH3 0x41C JUMPI DUP3 DUP8 ADD MLOAD SWAP1 POP JUMPDEST PUSH3 0x428 DUP6 DUP3 PUSH3 0x39B JUMP JUMPDEST DUP7 SSTORE POP PUSH3 0x498 JUMP JUMPDEST PUSH1 0x1F NOT DUP5 AND PUSH3 0x441 DUP7 PUSH3 0x1DD JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP3 DUP2 LT ISZERO PUSH3 0x46B JUMPI DUP5 DUP10 ADD MLOAD DUP3 SSTORE PUSH1 0x1 DUP3 ADD SWAP2 POP PUSH1 0x20 DUP6 ADD SWAP5 POP PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH3 0x444 JUMP JUMPDEST DUP7 DUP4 LT ISZERO PUSH3 0x48B JUMPI DUP5 DUP10 ADD MLOAD PUSH3 0x487 PUSH1 0x1F DUP10 AND DUP3 PUSH3 0x37B JUMP JUMPDEST DUP4 SSTORE POP JUMPDEST PUSH1 0x1 PUSH1 0x2 DUP9 MUL ADD DUP9 SSTORE POP POP POP JUMPDEST POP POP POP POP POP POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x1 SHR SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP3 SWAP2 POP DUP4 SWAP1 POP JUMPDEST PUSH1 0x1 DUP6 GT ISZERO PUSH3 0x52E JUMPI DUP1 DUP7 DIV DUP2 GT ISZERO PUSH3 0x506 JUMPI PUSH3 0x505 PUSH3 0x4A0 JUMP JUMPDEST JUMPDEST PUSH1 0x1 DUP6 AND ISZERO PUSH3 0x516 JUMPI DUP1 DUP3 MUL SWAP2 POP JUMPDEST DUP1 DUP2 MUL SWAP1 POP PUSH3 0x526 DUP6 PUSH3 0x4CF JUMP JUMPDEST SWAP5 POP PUSH3 0x4E6 JUMP JUMPDEST SWAP5 POP SWAP5 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH3 0x549 JUMPI PUSH1 0x1 SWAP1 POP PUSH3 0x61C JUMP JUMPDEST DUP2 PUSH3 0x559 JUMPI PUSH1 0x0 SWAP1 POP PUSH3 0x61C JUMP JUMPDEST DUP2 PUSH1 0x1 DUP2 EQ PUSH3 0x572 JUMPI PUSH1 0x2 DUP2 EQ PUSH3 0x57D JUMPI PUSH3 0x5B3 JUMP JUMPDEST PUSH1 0x1 SWAP2 POP POP PUSH3 0x61C JUMP JUMPDEST PUSH1 0xFF DUP5 GT ISZERO PUSH3 0x592 JUMPI PUSH3 0x591 PUSH3 0x4A0 JUMP JUMPDEST JUMPDEST DUP4 PUSH1 0x2 EXP SWAP2 POP DUP5 DUP3 GT ISZERO PUSH3 0x5AC JUMPI PUSH3 0x5AB PUSH3 0x4A0 JUMP JUMPDEST JUMPDEST POP PUSH3 0x61C JUMP JUMPDEST POP PUSH1 0x20 DUP4 LT PUSH2 0x133 DUP4 LT AND PUSH1 0x4E DUP5 LT PUSH1 0xB DUP5 LT AND OR ISZERO PUSH3 0x5ED JUMPI DUP3 DUP3 EXP SWAP1 POP DUP4 DUP2 GT ISZERO PUSH3 0x5E7 JUMPI PUSH3 0x5E6 PUSH3 0x4A0 JUMP JUMPDEST JUMPDEST PUSH3 0x61C JUMP JUMPDEST PUSH3 0x5FC DUP5 DUP5 DUP5 PUSH1 0x1 PUSH3 0x4DC JUMP JUMPDEST SWAP3 POP SWAP1 POP DUP2 DUP5 DIV DUP2 GT ISZERO PUSH3 0x616 JUMPI PUSH3 0x615 PUSH3 0x4A0 JUMP JUMPDEST JUMPDEST DUP2 DUP2 MUL SWAP1 POP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH3 0x630 DUP3 PUSH3 0x265 JUMP JUMPDEST SWAP2 POP PUSH3 0x63D DUP4 PUSH3 0x265 JUMP JUMPDEST SWAP3 POP PUSH3 0x66C PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP5 DUP5 PUSH3 0x537 JUMP JUMPDEST SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH3 0x681 DUP3 PUSH3 0x265 JUMP JUMPDEST SWAP2 POP PUSH3 0x68E DUP4 PUSH3 0x265 JUMP JUMPDEST SWAP3 POP DUP3 DUP3 MUL PUSH3 0x69E DUP2 PUSH3 0x265 JUMP JUMPDEST SWAP2 POP DUP3 DUP3 DIV DUP5 EQ DUP4 ISZERO OR PUSH3 0x6B8 JUMPI PUSH3 0x6B7 PUSH3 0x4A0 JUMP JUMPDEST JUMPDEST POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0xEDC DUP1 PUSH3 0x6CF PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x9E JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x40C10F19 GT PUSH2 0x66 JUMPI DUP1 PUSH4 0x40C10F19 EQ PUSH2 0x15D JUMPI DUP1 PUSH4 0x70A08231 EQ PUSH2 0x179 JUMPI DUP1 PUSH4 0x95D89B41 EQ PUSH2 0x1A9 JUMPI DUP1 PUSH4 0xA9059CBB EQ PUSH2 0x1C7 JUMPI DUP1 PUSH4 0xDD62ED3E EQ PUSH2 0x1F7 JUMPI PUSH2 0x9E JUMP JUMPDEST DUP1 PUSH4 0x6FDDE03 EQ PUSH2 0xA3 JUMPI DUP1 PUSH4 0x95EA7B3 EQ PUSH2 0xC1 JUMPI DUP1 PUSH4 0x18160DDD EQ PUSH2 0xF1 JUMPI DUP1 PUSH4 0x23B872DD EQ PUSH2 0x10F JUMPI DUP1 PUSH4 0x313CE567 EQ PUSH2 0x13F JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xAB PUSH2 0x227 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xB8 SWAP2 SWAP1 PUSH2 0xA85 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0xDB PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0xD6 SWAP2 SWAP1 PUSH2 0xB40 JUMP JUMPDEST PUSH2 0x2B5 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xE8 SWAP2 SWAP1 PUSH2 0xB9B JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0xF9 PUSH2 0x3A7 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x106 SWAP2 SWAP1 PUSH2 0xBC5 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x129 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x124 SWAP2 SWAP1 PUSH2 0xBE0 JUMP JUMPDEST PUSH2 0x3AD JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x136 SWAP2 SWAP1 PUSH2 0xB9B JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x147 PUSH2 0x69F JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x154 SWAP2 SWAP1 PUSH2 0xC4F JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x177 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x172 SWAP2 SWAP1 PUSH2 0xB40 JUMP JUMPDEST PUSH2 0x6B2 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x193 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x18E SWAP2 SWAP1 PUSH2 0xC6A JUMP JUMPDEST PUSH2 0x78B JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1A0 SWAP2 SWAP1 PUSH2 0xBC5 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x1B1 PUSH2 0x7A3 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1BE SWAP2 SWAP1 PUSH2 0xA85 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x1E1 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x1DC SWAP2 SWAP1 PUSH2 0xB40 JUMP JUMPDEST PUSH2 0x831 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1EE SWAP2 SWAP1 PUSH2 0xB9B JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x211 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x20C SWAP2 SWAP1 PUSH2 0xC97 JUMP JUMPDEST PUSH2 0x9D0 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x21E SWAP2 SWAP1 PUSH2 0xBC5 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH2 0x234 SWAP1 PUSH2 0xD06 JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x260 SWAP1 PUSH2 0xD06 JUMP JUMPDEST DUP1 ISZERO PUSH2 0x2AD JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x282 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x2AD JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x290 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP DUP2 JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x5 PUSH1 0x0 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP2 SWAP1 SSTORE POP DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x8C5BE1E5EBEC7D5BD14F71427D1E84F3DD0314C0F7B2291E5B200AC8C7C3B925 DUP5 PUSH1 0x40 MLOAD PUSH2 0x395 SWAP2 SWAP1 PUSH2 0xBC5 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 PUSH1 0x1 SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x3 SLOAD DUP2 JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x4 PUSH1 0x0 DUP7 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD LT ISZERO PUSH2 0x431 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x428 SWAP1 PUSH2 0xD83 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP2 PUSH1 0x5 PUSH1 0x0 DUP7 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD LT ISZERO PUSH2 0x4F0 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x4E7 SWAP1 PUSH2 0xDEF JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP2 PUSH1 0x4 PUSH1 0x0 DUP7 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP3 DUP3 SLOAD PUSH2 0x53F SWAP2 SWAP1 PUSH2 0xE3E JUMP JUMPDEST SWAP3 POP POP DUP2 SWAP1 SSTORE POP DUP2 PUSH1 0x4 PUSH1 0x0 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP3 DUP3 SLOAD PUSH2 0x595 SWAP2 SWAP1 PUSH2 0xE72 JUMP JUMPDEST SWAP3 POP POP DUP2 SWAP1 SSTORE POP DUP2 PUSH1 0x5 PUSH1 0x0 DUP7 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP3 DUP3 SLOAD PUSH2 0x628 SWAP2 SWAP1 PUSH2 0xE3E JUMP JUMPDEST SWAP3 POP POP DUP2 SWAP1 SSTORE POP DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF DUP5 PUSH1 0x40 MLOAD PUSH2 0x68C SWAP2 SWAP1 PUSH2 0xBC5 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 PUSH1 0x1 SWAP1 POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x2 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND DUP2 JUMP JUMPDEST DUP1 PUSH1 0x4 PUSH1 0x0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP3 DUP3 SLOAD PUSH2 0x701 SWAP2 SWAP1 PUSH2 0xE72 JUMP JUMPDEST SWAP3 POP POP DUP2 SWAP1 SSTORE POP DUP1 PUSH1 0x3 PUSH1 0x0 DUP3 DUP3 SLOAD PUSH2 0x71A SWAP2 SWAP1 PUSH2 0xE72 JUMP JUMPDEST SWAP3 POP POP DUP2 SWAP1 SSTORE POP DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF DUP4 PUSH1 0x40 MLOAD PUSH2 0x77F SWAP2 SWAP1 PUSH2 0xBC5 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP JUMP JUMPDEST PUSH1 0x4 PUSH1 0x20 MSTORE DUP1 PUSH1 0x0 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP2 POP SWAP1 POP SLOAD DUP2 JUMP JUMPDEST PUSH1 0x1 DUP1 SLOAD PUSH2 0x7B0 SWAP1 PUSH2 0xD06 JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x7DC SWAP1 PUSH2 0xD06 JUMP JUMPDEST DUP1 ISZERO PUSH2 0x829 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x7FE JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x829 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x80C JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP DUP2 JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x4 PUSH1 0x0 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD LT ISZERO PUSH2 0x8B5 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x8AC SWAP1 PUSH2 0xD83 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP2 PUSH1 0x4 PUSH1 0x0 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP3 DUP3 SLOAD PUSH2 0x904 SWAP2 SWAP1 PUSH2 0xE3E JUMP JUMPDEST SWAP3 POP POP DUP2 SWAP1 SSTORE POP DUP2 PUSH1 0x4 PUSH1 0x0 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP3 DUP3 SLOAD PUSH2 0x95A SWAP2 SWAP1 PUSH2 0xE72 JUMP JUMPDEST SWAP3 POP POP DUP2 SWAP1 SSTORE POP DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF DUP5 PUSH1 0x40 MLOAD PUSH2 0x9BE SWAP2 SWAP1 PUSH2 0xBC5 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 PUSH1 0x1 SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x5 PUSH1 0x20 MSTORE DUP2 PUSH1 0x0 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 PUSH1 0x20 MSTORE DUP1 PUSH1 0x0 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP2 POP SWAP2 POP POP SLOAD DUP2 JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0xA2F JUMPI DUP1 DUP3 ADD MLOAD DUP2 DUP5 ADD MSTORE PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH2 0xA14 JUMP JUMPDEST PUSH1 0x0 DUP5 DUP5 ADD MSTORE POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1F NOT PUSH1 0x1F DUP4 ADD AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xA57 DUP3 PUSH2 0x9F5 JUMP JUMPDEST PUSH2 0xA61 DUP2 DUP6 PUSH2 0xA00 JUMP JUMPDEST SWAP4 POP PUSH2 0xA71 DUP2 DUP6 PUSH1 0x20 DUP7 ADD PUSH2 0xA11 JUMP JUMPDEST PUSH2 0xA7A DUP2 PUSH2 0xA3B JUMP JUMPDEST DUP5 ADD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0xA9F DUP2 DUP5 PUSH2 0xA4C JUMP JUMPDEST SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xAD7 DUP3 PUSH2 0xAAC JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0xAE7 DUP2 PUSH2 0xACC JUMP JUMPDEST DUP2 EQ PUSH2 0xAF2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0xB04 DUP2 PUSH2 0xADE JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0xB1D DUP2 PUSH2 0xB0A JUMP JUMPDEST DUP2 EQ PUSH2 0xB28 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0xB3A DUP2 PUSH2 0xB14 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0xB57 JUMPI PUSH2 0xB56 PUSH2 0xAA7 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0xB65 DUP6 DUP3 DUP7 ADD PUSH2 0xAF5 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0xB76 DUP6 DUP3 DUP7 ADD PUSH2 0xB2B JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 ISZERO ISZERO SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0xB95 DUP2 PUSH2 0xB80 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0xBB0 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0xB8C JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0xBBF DUP2 PUSH2 0xB0A JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0xBDA PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0xBB6 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0xBF9 JUMPI PUSH2 0xBF8 PUSH2 0xAA7 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0xC07 DUP7 DUP3 DUP8 ADD PUSH2 0xAF5 JUMP JUMPDEST SWAP4 POP POP PUSH1 0x20 PUSH2 0xC18 DUP7 DUP3 DUP8 ADD PUSH2 0xAF5 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x40 PUSH2 0xC29 DUP7 DUP3 DUP8 ADD PUSH2 0xB2B JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 PUSH1 0xFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0xC49 DUP2 PUSH2 0xC33 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0xC64 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0xC40 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xC80 JUMPI PUSH2 0xC7F PUSH2 0xAA7 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0xC8E DUP5 DUP3 DUP6 ADD PUSH2 0xAF5 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0xCAE JUMPI PUSH2 0xCAD PUSH2 0xAA7 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0xCBC DUP6 DUP3 DUP7 ADD PUSH2 0xAF5 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0xCCD DUP6 DUP3 DUP7 ADD PUSH2 0xAF5 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x2 DUP3 DIV SWAP1 POP PUSH1 0x1 DUP3 AND DUP1 PUSH2 0xD1E JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 SUB PUSH2 0xD31 JUMPI PUSH2 0xD30 PUSH2 0xCD7 JUMP JUMPDEST JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x696E73756666696369656E742062616C616E6365000000000000000000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xD6D PUSH1 0x14 DUP4 PUSH2 0xA00 JUMP JUMPDEST SWAP2 POP PUSH2 0xD78 DUP3 PUSH2 0xD37 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0xD9C DUP2 PUSH2 0xD60 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x6578636565647320616C6C6F77616E6365000000000000000000000000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xDD9 PUSH1 0x11 DUP4 PUSH2 0xA00 JUMP JUMPDEST SWAP2 POP PUSH2 0xDE4 DUP3 PUSH2 0xDA3 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0xE08 DUP2 PUSH2 0xDCC JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH2 0xE49 DUP3 PUSH2 0xB0A JUMP JUMPDEST SWAP2 POP PUSH2 0xE54 DUP4 PUSH2 0xB0A JUMP JUMPDEST SWAP3 POP DUP3 DUP3 SUB SWAP1 POP DUP2 DUP2 GT ISZERO PUSH2 0xE6C JUMPI PUSH2 0xE6B PUSH2 0xE0F JUMP JUMPDEST JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xE7D DUP3 PUSH2 0xB0A JUMP JUMPDEST SWAP2 POP PUSH2 0xE88 DUP4 PUSH2 0xB0A JUMP JUMPDEST SWAP3 POP DUP3 DUP3 ADD SWAP1 POP DUP1 DUP3 GT ISZERO PUSH2 0xEA0 JUMPI PUSH2 0xE9F PUSH2 0xE0F JUMP JUMPDEST JUMPDEST SWAP3 SWAP2 POP POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 COINBASE STATICCALL PUSH10 0x3DA1C1DECF8C3E4932E0 0xC8 0xAE ISZERO DUP16 0xB0 0x1E SWAP12 MLOAD SMOD SWAP4 SLOAD SWAP5 0xEE SWAP1 0xFB 0xCD 0xD5 0xF6 0xDC PUSH5 0x736F6C6343 STOP ADDMOD XOR STOP CALLER ","sourceMap":"58:1667:0:-:0;;;83:30;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;119:28;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;177:2;153:26;;;;;;;;;;;;;;;;;;;;499:121;;;;;;;;;;559:8;;;;;;;;;;;551:17;;547:2;:21;;;;:::i;:::-;537:7;:31;;;;:::i;:::-;523:11;:45;;;;602:11;;578:9;:21;588:10;578:21;;;;;;;;;;;;;;;:35;;;;58:1667;;7:99:1;59:6;93:5;87:12;77:22;;7:99;;;:::o;112:180::-;160:77;157:1;150:88;257:4;254:1;247:15;281:4;278:1;271:15;298:180;346:77;343:1;336:88;443:4;440:1;433:15;467:4;464:1;457:15;484:320;528:6;565:1;559:4;555:12;545:22;;612:1;606:4;602:12;633:18;623:81;;689:4;681:6;677:17;667:27;;623:81;751:2;743:6;740:14;720:18;717:38;714:84;;770:18;;:::i;:::-;714:84;535:269;484:320;;;:::o;810:141::-;859:4;882:3;874:11;;905:3;902:1;895:14;939:4;936:1;926:18;918:26;;810:141;;;:::o;957:93::-;994:6;1041:2;1036;1029:5;1025:14;1021:23;1011:33;;957:93;;;:::o;1056:107::-;1100:8;1150:5;1144:4;1140:16;1119:37;;1056:107;;;;:::o;1169:393::-;1238:6;1288:1;1276:10;1272:18;1311:97;1341:66;1330:9;1311:97;:::i;:::-;1429:39;1459:8;1448:9;1429:39;:::i;:::-;1417:51;;1501:4;1497:9;1490:5;1486:21;1477:30;;1550:4;1540:8;1536:19;1529:5;1526:30;1516:40;;1245:317;;1169:393;;;;;:::o;1568:77::-;1605:7;1634:5;1623:16;;1568:77;;;:::o;1651:60::-;1679:3;1700:5;1693:12;;1651:60;;;:::o;1717:142::-;1767:9;1800:53;1818:34;1827:24;1845:5;1827:24;:::i;:::-;1818:34;:::i;:::-;1800:53;:::i;:::-;1787:66;;1717:142;;;:::o;1865:75::-;1908:3;1929:5;1922:12;;1865:75;;;:::o;1946:269::-;2056:39;2087:7;2056:39;:::i;:::-;2117:91;2166:41;2190:16;2166:41;:::i;:::-;2158:6;2151:4;2145:11;2117:91;:::i;:::-;2111:4;2104:105;2022:193;1946:269;;;:::o;2221:73::-;2266:3;2221:73;:::o;2300:189::-;2377:32;;:::i;:::-;2418:65;2476:6;2468;2462:4;2418:65;:::i;:::-;2353:136;2300:189;;:::o;2495:186::-;2555:120;2572:3;2565:5;2562:14;2555:120;;;2626:39;2663:1;2656:5;2626:39;:::i;:::-;2599:1;2592:5;2588:13;2579:22;;2555:120;;;2495:186;;:::o;2687:543::-;2788:2;2783:3;2780:11;2777:446;;;2822:38;2854:5;2822:38;:::i;:::-;2906:29;2924:10;2906:29;:::i;:::-;2896:8;2892:44;3089:2;3077:10;3074:18;3071:49;;;3110:8;3095:23;;3071:49;3133:80;3189:22;3207:3;3189:22;:::i;:::-;3179:8;3175:37;3162:11;3133:80;:::i;:::-;2792:431;;2777:446;2687:543;;;:::o;3236:117::-;3290:8;3340:5;3334:4;3330:16;3309:37;;3236:117;;;;:::o;3359:169::-;3403:6;3436:51;3484:1;3480:6;3472:5;3469:1;3465:13;3436:51;:::i;:::-;3432:56;3517:4;3511;3507:15;3497:25;;3410:118;3359:169;;;;:::o;3533:295::-;3609:4;3755:29;3780:3;3774:4;3755:29;:::i;:::-;3747:37;;3817:3;3814:1;3810:11;3804:4;3801:21;3793:29;;3533:295;;;;:::o;3833:1395::-;3950:37;3983:3;3950:37;:::i;:::-;4052:18;4044:6;4041:30;4038:56;;;4074:18;;:::i;:::-;4038:56;4118:38;4150:4;4144:11;4118:38;:::i;:::-;4203:67;4263:6;4255;4249:4;4203:67;:::i;:::-;4297:1;4321:4;4308:17;;4353:2;4345:6;4342:14;4370:1;4365:618;;;;5027:1;5044:6;5041:77;;;5093:9;5088:3;5084:19;5078:26;5069:35;;5041:77;5144:67;5204:6;5197:5;5144:67;:::i;:::-;5138:4;5131:81;5000:222;4335:887;;4365:618;4417:4;4413:9;4405:6;4401:22;4451:37;4483:4;4451:37;:::i;:::-;4510:1;4524:208;4538:7;4535:1;4532:14;4524:208;;;4617:9;4612:3;4608:19;4602:26;4594:6;4587:42;4668:1;4660:6;4656:14;4646:24;;4715:2;4704:9;4700:18;4687:31;;4561:4;4558:1;4554:12;4549:17;;4524:208;;;4760:6;4751:7;4748:19;4745:179;;;4818:9;4813:3;4809:19;4803:26;4861:48;4903:4;4895:6;4891:17;4880:9;4861:48;:::i;:::-;4853:6;4846:64;4768:156;4745:179;4970:1;4966;4958:6;4954:14;4950:22;4944:4;4937:36;4372:611;;;4335:887;;3925:1303;;;3833:1395;;:::o;5234:180::-;5282:77;5279:1;5272:88;5379:4;5376:1;5369:15;5403:4;5400:1;5393:15;5420:102;5462:8;5509:5;5506:1;5502:13;5481:34;;5420:102;;;:::o;5528:848::-;5589:5;5596:4;5620:6;5611:15;;5644:5;5635:14;;5658:712;5679:1;5669:8;5666:15;5658:712;;;5774:4;5769:3;5765:14;5759:4;5756:24;5753:50;;;5783:18;;:::i;:::-;5753:50;5833:1;5823:8;5819:16;5816:451;;;6248:4;6241:5;6237:16;6228:25;;5816:451;6298:4;6292;6288:15;6280:23;;6328:32;6351:8;6328:32;:::i;:::-;6316:44;;5658:712;;;5528:848;;;;;;;:::o;6382:1073::-;6436:5;6627:8;6617:40;;6648:1;6639:10;;6650:5;;6617:40;6676:4;6666:36;;6693:1;6684:10;;6695:5;;6666:36;6762:4;6810:1;6805:27;;;;6846:1;6841:191;;;;6755:277;;6805:27;6823:1;6814:10;;6825:5;;;6841:191;6886:3;6876:8;6873:17;6870:43;;;6893:18;;:::i;:::-;6870:43;6942:8;6939:1;6935:16;6926:25;;6977:3;6970:5;6967:14;6964:40;;;6984:18;;:::i;:::-;6964:40;7017:5;;;6755:277;;7141:2;7131:8;7128:16;7122:3;7116:4;7113:13;7109:36;7091:2;7081:8;7078:16;7073:2;7067:4;7064:12;7060:35;7044:111;7041:246;;;7197:8;7191:4;7187:19;7178:28;;7232:3;7225:5;7222:14;7219:40;;;7239:18;;:::i;:::-;7219:40;7272:5;;7041:246;7312:42;7350:3;7340:8;7334:4;7331:1;7312:42;:::i;:::-;7297:57;;;;7386:4;7381:3;7377:14;7370:5;7367:25;7364:51;;;7395:18;;:::i;:::-;7364:51;7444:4;7437:5;7433:16;7424:25;;6382:1073;;;;;;:::o;7461:285::-;7521:5;7545:23;7563:4;7545:23;:::i;:::-;7537:31;;7589:27;7607:8;7589:27;:::i;:::-;7577:39;;7635:104;7672:66;7662:8;7656:4;7635:104;:::i;:::-;7626:113;;7461:285;;;;:::o;7752:410::-;7792:7;7815:20;7833:1;7815:20;:::i;:::-;7810:25;;7849:20;7867:1;7849:20;:::i;:::-;7844:25;;7904:1;7901;7897:9;7926:30;7944:11;7926:30;:::i;:::-;7915:41;;8105:1;8096:7;8092:15;8089:1;8086:22;8066:1;8059:9;8039:83;8016:139;;8135:18;;:::i;:::-;8016:139;7800:362;7752:410;;;;:::o;58:1667:0:-;;;;;;;"},"deployedBytecode":{"functionDebugData":{"@allowance_22":{"entryPoint":2512,"id":22,"parameterSlots":0,"returnSlots":0},"@approve_130":{"entryPoint":693,"id":130,"parameterSlots":2,"returnSlots":1},"@balanceOf_16":{"entryPoint":1931,"id":16,"parameterSlots":0,"returnSlots":0},"@decimals_10":{"entryPoint":1695,"id":10,"parameterSlots":0,"returnSlots":0},"@mint_219":{"entryPoint":1714,"id":219,"parameterSlots":2,"returnSlots":0},"@name_4":{"entryPoint":551,"id":4,"parameterSlots":0,"returnSlots":0},"@symbol_7":{"entryPoint":1955,"id":7,"parameterSlots":0,"returnSlots":0},"@totalSupply_12":{"entryPoint":935,"id":12,"parameterSlots":0,"returnSlots":0},"@transferFrom_192":{"entryPoint":941,"id":192,"parameterSlots":3,"returnSlots":1},"@transfer_102":{"entryPoint":2097,"id":102,"parameterSlots":2,"returnSlots":1},"abi_decode_t_address":{"entryPoint":2805,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_t_uint256":{"entryPoint":2859,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_address":{"entryPoint":3178,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_addresst_address":{"entryPoint":3223,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_tuple_t_addresst_addresst_uint256":{"entryPoint":3040,"id":null,"parameterSlots":2,"returnSlots":3},"abi_decode_tuple_t_addresst_uint256":{"entryPoint":2880,"id":null,"parameterSlots":2,"returnSlots":2},"abi_encode_t_bool_to_t_bool_fromStack":{"entryPoint":2956,"id":null,"parameterSlots":2,"returnSlots":0},"abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack":{"entryPoint":2636,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_t_stringliteral_a2db9b2d459fa87320b1b84f2f349507cfdbf260f36c3b404dc6ea1ada9b5618_to_t_string_memory_ptr_fromStack":{"entryPoint":3532,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_a6d1ff1db3d0b9b8c60e12ccab5ce7431be9a2cd0518ac362f1c5c1e0b1cefee_to_t_string_memory_ptr_fromStack":{"entryPoint":3424,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_uint256_to_t_uint256_fromStack":{"entryPoint":2998,"id":null,"parameterSlots":2,"returnSlots":0},"abi_encode_t_uint8_to_t_uint8_fromStack":{"entryPoint":3136,"id":null,"parameterSlots":2,"returnSlots":0},"abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed":{"entryPoint":2971,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":2693,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_stringliteral_a2db9b2d459fa87320b1b84f2f349507cfdbf260f36c3b404dc6ea1ada9b5618__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":3567,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_a6d1ff1db3d0b9b8c60e12ccab5ce7431be9a2cd0518ac362f1c5c1e0b1cefee__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":3459,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed":{"entryPoint":3013,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_uint8__to_t_uint8__fromStack_reversed":{"entryPoint":3151,"id":null,"parameterSlots":2,"returnSlots":1},"allocate_unbounded":{"entryPoint":null,"id":null,"parameterSlots":0,"returnSlots":1},"array_length_t_string_memory_ptr":{"entryPoint":2549,"id":null,"parameterSlots":1,"returnSlots":1},"array_storeLengthForEncoding_t_string_memory_ptr_fromStack":{"entryPoint":2560,"id":null,"parameterSlots":2,"returnSlots":1},"checked_add_t_uint256":{"entryPoint":3698,"id":null,"parameterSlots":2,"returnSlots":1},"checked_sub_t_uint256":{"entryPoint":3646,"id":null,"parameterSlots":2,"returnSlots":1},"cleanup_t_address":{"entryPoint":2764,"id":null,"parameterSlots":1,"returnSlots":1},"cleanup_t_bool":{"entryPoint":2944,"id":null,"parameterSlots":1,"returnSlots":1},"cleanup_t_uint160":{"entryPoint":2732,"id":null,"parameterSlots":1,"returnSlots":1},"cleanup_t_uint256":{"entryPoint":2826,"id":null,"parameterSlots":1,"returnSlots":1},"cleanup_t_uint8":{"entryPoint":3123,"id":null,"parameterSlots":1,"returnSlots":1},"copy_memory_to_memory_with_cleanup":{"entryPoint":2577,"id":null,"parameterSlots":3,"returnSlots":0},"extract_byte_array_length":{"entryPoint":3334,"id":null,"parameterSlots":1,"returnSlots":1},"panic_error_0x11":{"entryPoint":3599,"id":null,"parameterSlots":0,"returnSlots":0},"panic_error_0x22":{"entryPoint":3287,"id":null,"parameterSlots":0,"returnSlots":0},"revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db":{"entryPoint":null,"id":null,"parameterSlots":0,"returnSlots":0},"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b":{"entryPoint":2727,"id":null,"parameterSlots":0,"returnSlots":0},"round_up_to_mul_of_32":{"entryPoint":2619,"id":null,"parameterSlots":1,"returnSlots":1},"store_literal_in_memory_a2db9b2d459fa87320b1b84f2f349507cfdbf260f36c3b404dc6ea1ada9b5618":{"entryPoint":3491,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_a6d1ff1db3d0b9b8c60e12ccab5ce7431be9a2cd0518ac362f1c5c1e0b1cefee":{"entryPoint":3383,"id":null,"parameterSlots":1,"returnSlots":0},"validator_revert_t_address":{"entryPoint":2782,"id":null,"parameterSlots":1,"returnSlots":0},"validator_revert_t_uint256":{"entryPoint":2836,"id":null,"parameterSlots":1,"returnSlots":0}},"generatedSources":[{"ast":{"nativeSrc":"0:8703:1","nodeType":"YulBlock","src":"0:8703:1","statements":[{"body":{"nativeSrc":"66:40:1","nodeType":"YulBlock","src":"66:40:1","statements":[{"nativeSrc":"77:22:1","nodeType":"YulAssignment","src":"77:22:1","value":{"arguments":[{"name":"value","nativeSrc":"93:5:1","nodeType":"YulIdentifier","src":"93:5:1"}],"functionName":{"name":"mload","nativeSrc":"87:5:1","nodeType":"YulIdentifier","src":"87:5:1"},"nativeSrc":"87:12:1","nodeType":"YulFunctionCall","src":"87:12:1"},"variableNames":[{"name":"length","nativeSrc":"77:6:1","nodeType":"YulIdentifier","src":"77:6:1"}]}]},"name":"array_length_t_string_memory_ptr","nativeSrc":"7:99:1","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nativeSrc":"49:5:1","nodeType":"YulTypedName","src":"49:5:1","type":""}],"returnVariables":[{"name":"length","nativeSrc":"59:6:1","nodeType":"YulTypedName","src":"59:6:1","type":""}],"src":"7:99:1"},{"body":{"nativeSrc":"208:73:1","nodeType":"YulBlock","src":"208:73:1","statements":[{"expression":{"arguments":[{"name":"pos","nativeSrc":"225:3:1","nodeType":"YulIdentifier","src":"225:3:1"},{"name":"length","nativeSrc":"230:6:1","nodeType":"YulIdentifier","src":"230:6:1"}],"functionName":{"name":"mstore","nativeSrc":"218:6:1","nodeType":"YulIdentifier","src":"218:6:1"},"nativeSrc":"218:19:1","nodeType":"YulFunctionCall","src":"218:19:1"},"nativeSrc":"218:19:1","nodeType":"YulExpressionStatement","src":"218:19:1"},{"nativeSrc":"246:29:1","nodeType":"YulAssignment","src":"246:29:1","value":{"arguments":[{"name":"pos","nativeSrc":"265:3:1","nodeType":"YulIdentifier","src":"265:3:1"},{"kind":"number","nativeSrc":"270:4:1","nodeType":"YulLiteral","src":"270:4:1","type":"","value":"0x20"}],"functionName":{"name":"add","nativeSrc":"261:3:1","nodeType":"YulIdentifier","src":"261:3:1"},"nativeSrc":"261:14:1","nodeType":"YulFunctionCall","src":"261:14:1"},"variableNames":[{"name":"updated_pos","nativeSrc":"246:11:1","nodeType":"YulIdentifier","src":"246:11:1"}]}]},"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nativeSrc":"112:169:1","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nativeSrc":"180:3:1","nodeType":"YulTypedName","src":"180:3:1","type":""},{"name":"length","nativeSrc":"185:6:1","nodeType":"YulTypedName","src":"185:6:1","type":""}],"returnVariables":[{"name":"updated_pos","nativeSrc":"196:11:1","nodeType":"YulTypedName","src":"196:11:1","type":""}],"src":"112:169:1"},{"body":{"nativeSrc":"349:184:1","nodeType":"YulBlock","src":"349:184:1","statements":[{"nativeSrc":"359:10:1","nodeType":"YulVariableDeclaration","src":"359:10:1","value":{"kind":"number","nativeSrc":"368:1:1","nodeType":"YulLiteral","src":"368:1:1","type":"","value":"0"},"variables":[{"name":"i","nativeSrc":"363:1:1","nodeType":"YulTypedName","src":"363:1:1","type":""}]},{"body":{"nativeSrc":"428:63:1","nodeType":"YulBlock","src":"428:63:1","statements":[{"expression":{"arguments":[{"arguments":[{"name":"dst","nativeSrc":"453:3:1","nodeType":"YulIdentifier","src":"453:3:1"},{"name":"i","nativeSrc":"458:1:1","nodeType":"YulIdentifier","src":"458:1:1"}],"functionName":{"name":"add","nativeSrc":"449:3:1","nodeType":"YulIdentifier","src":"449:3:1"},"nativeSrc":"449:11:1","nodeType":"YulFunctionCall","src":"449:11:1"},{"arguments":[{"arguments":[{"name":"src","nativeSrc":"472:3:1","nodeType":"YulIdentifier","src":"472:3:1"},{"name":"i","nativeSrc":"477:1:1","nodeType":"YulIdentifier","src":"477:1:1"}],"functionName":{"name":"add","nativeSrc":"468:3:1","nodeType":"YulIdentifier","src":"468:3:1"},"nativeSrc":"468:11:1","nodeType":"YulFunctionCall","src":"468:11:1"}],"functionName":{"name":"mload","nativeSrc":"462:5:1","nodeType":"YulIdentifier","src":"462:5:1"},"nativeSrc":"462:18:1","nodeType":"YulFunctionCall","src":"462:18:1"}],"functionName":{"name":"mstore","nativeSrc":"442:6:1","nodeType":"YulIdentifier","src":"442:6:1"},"nativeSrc":"442:39:1","nodeType":"YulFunctionCall","src":"442:39:1"},"nativeSrc":"442:39:1","nodeType":"YulExpressionStatement","src":"442:39:1"}]},"condition":{"arguments":[{"name":"i","nativeSrc":"389:1:1","nodeType":"YulIdentifier","src":"389:1:1"},{"name":"length","nativeSrc":"392:6:1","nodeType":"YulIdentifier","src":"392:6:1"}],"functionName":{"name":"lt","nativeSrc":"386:2:1","nodeType":"YulIdentifier","src":"386:2:1"},"nativeSrc":"386:13:1","nodeType":"YulFunctionCall","src":"386:13:1"},"nativeSrc":"378:113:1","nodeType":"YulForLoop","post":{"nativeSrc":"400:19:1","nodeType":"YulBlock","src":"400:19:1","statements":[{"nativeSrc":"402:15:1","nodeType":"YulAssignment","src":"402:15:1","value":{"arguments":[{"name":"i","nativeSrc":"411:1:1","nodeType":"YulIdentifier","src":"411:1:1"},{"kind":"number","nativeSrc":"414:2:1","nodeType":"YulLiteral","src":"414:2:1","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"407:3:1","nodeType":"YulIdentifier","src":"407:3:1"},"nativeSrc":"407:10:1","nodeType":"YulFunctionCall","src":"407:10:1"},"variableNames":[{"name":"i","nativeSrc":"402:1:1","nodeType":"YulIdentifier","src":"402:1:1"}]}]},"pre":{"nativeSrc":"382:3:1","nodeType":"YulBlock","src":"382:3:1","statements":[]},"src":"378:113:1"},{"expression":{"arguments":[{"arguments":[{"name":"dst","nativeSrc":"511:3:1","nodeType":"YulIdentifier","src":"511:3:1"},{"name":"length","nativeSrc":"516:6:1","nodeType":"YulIdentifier","src":"516:6:1"}],"functionName":{"name":"add","nativeSrc":"507:3:1","nodeType":"YulIdentifier","src":"507:3:1"},"nativeSrc":"507:16:1","nodeType":"YulFunctionCall","src":"507:16:1"},{"kind":"number","nativeSrc":"525:1:1","nodeType":"YulLiteral","src":"525:1:1","type":"","value":"0"}],"functionName":{"name":"mstore","nativeSrc":"500:6:1","nodeType":"YulIdentifier","src":"500:6:1"},"nativeSrc":"500:27:1","nodeType":"YulFunctionCall","src":"500:27:1"},"nativeSrc":"500:27:1","nodeType":"YulExpressionStatement","src":"500:27:1"}]},"name":"copy_memory_to_memory_with_cleanup","nativeSrc":"287:246:1","nodeType":"YulFunctionDefinition","parameters":[{"name":"src","nativeSrc":"331:3:1","nodeType":"YulTypedName","src":"331:3:1","type":""},{"name":"dst","nativeSrc":"336:3:1","nodeType":"YulTypedName","src":"336:3:1","type":""},{"name":"length","nativeSrc":"341:6:1","nodeType":"YulTypedName","src":"341:6:1","type":""}],"src":"287:246:1"},{"body":{"nativeSrc":"587:54:1","nodeType":"YulBlock","src":"587:54:1","statements":[{"nativeSrc":"597:38:1","nodeType":"YulAssignment","src":"597:38:1","value":{"arguments":[{"arguments":[{"name":"value","nativeSrc":"615:5:1","nodeType":"YulIdentifier","src":"615:5:1"},{"kind":"number","nativeSrc":"622:2:1","nodeType":"YulLiteral","src":"622:2:1","type":"","value":"31"}],"functionName":{"name":"add","nativeSrc":"611:3:1","nodeType":"YulIdentifier","src":"611:3:1"},"nativeSrc":"611:14:1","nodeType":"YulFunctionCall","src":"611:14:1"},{"arguments":[{"kind":"number","nativeSrc":"631:2:1","nodeType":"YulLiteral","src":"631:2:1","type":"","value":"31"}],"functionName":{"name":"not","nativeSrc":"627:3:1","nodeType":"YulIdentifier","src":"627:3:1"},"nativeSrc":"627:7:1","nodeType":"YulFunctionCall","src":"627:7:1"}],"functionName":{"name":"and","nativeSrc":"607:3:1","nodeType":"YulIdentifier","src":"607:3:1"},"nativeSrc":"607:28:1","nodeType":"YulFunctionCall","src":"607:28:1"},"variableNames":[{"name":"result","nativeSrc":"597:6:1","nodeType":"YulIdentifier","src":"597:6:1"}]}]},"name":"round_up_to_mul_of_32","nativeSrc":"539:102:1","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nativeSrc":"570:5:1","nodeType":"YulTypedName","src":"570:5:1","type":""}],"returnVariables":[{"name":"result","nativeSrc":"580:6:1","nodeType":"YulTypedName","src":"580:6:1","type":""}],"src":"539:102:1"},{"body":{"nativeSrc":"739:285:1","nodeType":"YulBlock","src":"739:285:1","statements":[{"nativeSrc":"749:53:1","nodeType":"YulVariableDeclaration","src":"749:53:1","value":{"arguments":[{"name":"value","nativeSrc":"796:5:1","nodeType":"YulIdentifier","src":"796:5:1"}],"functionName":{"name":"array_length_t_string_memory_ptr","nativeSrc":"763:32:1","nodeType":"YulIdentifier","src":"763:32:1"},"nativeSrc":"763:39:1","nodeType":"YulFunctionCall","src":"763:39:1"},"variables":[{"name":"length","nativeSrc":"753:6:1","nodeType":"YulTypedName","src":"753:6:1","type":""}]},{"nativeSrc":"811:78:1","nodeType":"YulAssignment","src":"811:78:1","value":{"arguments":[{"name":"pos","nativeSrc":"877:3:1","nodeType":"YulIdentifier","src":"877:3:1"},{"name":"length","nativeSrc":"882:6:1","nodeType":"YulIdentifier","src":"882:6:1"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nativeSrc":"818:58:1","nodeType":"YulIdentifier","src":"818:58:1"},"nativeSrc":"818:71:1","nodeType":"YulFunctionCall","src":"818:71:1"},"variableNames":[{"name":"pos","nativeSrc":"811:3:1","nodeType":"YulIdentifier","src":"811:3:1"}]},{"expression":{"arguments":[{"arguments":[{"name":"value","nativeSrc":"937:5:1","nodeType":"YulIdentifier","src":"937:5:1"},{"kind":"number","nativeSrc":"944:4:1","nodeType":"YulLiteral","src":"944:4:1","type":"","value":"0x20"}],"functionName":{"name":"add","nativeSrc":"933:3:1","nodeType":"YulIdentifier","src":"933:3:1"},"nativeSrc":"933:16:1","nodeType":"YulFunctionCall","src":"933:16:1"},{"name":"pos","nativeSrc":"951:3:1","nodeType":"YulIdentifier","src":"951:3:1"},{"name":"length","nativeSrc":"956:6:1","nodeType":"YulIdentifier","src":"956:6:1"}],"functionName":{"name":"copy_memory_to_memory_with_cleanup","nativeSrc":"898:34:1","nodeType":"YulIdentifier","src":"898:34:1"},"nativeSrc":"898:65:1","nodeType":"YulFunctionCall","src":"898:65:1"},"nativeSrc":"898:65:1","nodeType":"YulExpressionStatement","src":"898:65:1"},{"nativeSrc":"972:46:1","nodeType":"YulAssignment","src":"972:46:1","value":{"arguments":[{"name":"pos","nativeSrc":"983:3:1","nodeType":"YulIdentifier","src":"983:3:1"},{"arguments":[{"name":"length","nativeSrc":"1010:6:1","nodeType":"YulIdentifier","src":"1010:6:1"}],"functionName":{"name":"round_up_to_mul_of_32","nativeSrc":"988:21:1","nodeType":"YulIdentifier","src":"988:21:1"},"nativeSrc":"988:29:1","nodeType":"YulFunctionCall","src":"988:29:1"}],"functionName":{"name":"add","nativeSrc":"979:3:1","nodeType":"YulIdentifier","src":"979:3:1"},"nativeSrc":"979:39:1","nodeType":"YulFunctionCall","src":"979:39:1"},"variableNames":[{"name":"end","nativeSrc":"972:3:1","nodeType":"YulIdentifier","src":"972:3:1"}]}]},"name":"abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack","nativeSrc":"647:377:1","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nativeSrc":"720:5:1","nodeType":"YulTypedName","src":"720:5:1","type":""},{"name":"pos","nativeSrc":"727:3:1","nodeType":"YulTypedName","src":"727:3:1","type":""}],"returnVariables":[{"name":"end","nativeSrc":"735:3:1","nodeType":"YulTypedName","src":"735:3:1","type":""}],"src":"647:377:1"},{"body":{"nativeSrc":"1148:195:1","nodeType":"YulBlock","src":"1148:195:1","statements":[{"nativeSrc":"1158:26:1","nodeType":"YulAssignment","src":"1158:26:1","value":{"arguments":[{"name":"headStart","nativeSrc":"1170:9:1","nodeType":"YulIdentifier","src":"1170:9:1"},{"kind":"number","nativeSrc":"1181:2:1","nodeType":"YulLiteral","src":"1181:2:1","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"1166:3:1","nodeType":"YulIdentifier","src":"1166:3:1"},"nativeSrc":"1166:18:1","nodeType":"YulFunctionCall","src":"1166:18:1"},"variableNames":[{"name":"tail","nativeSrc":"1158:4:1","nodeType":"YulIdentifier","src":"1158:4:1"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"1205:9:1","nodeType":"YulIdentifier","src":"1205:9:1"},{"kind":"number","nativeSrc":"1216:1:1","nodeType":"YulLiteral","src":"1216:1:1","type":"","value":"0"}],"functionName":{"name":"add","nativeSrc":"1201:3:1","nodeType":"YulIdentifier","src":"1201:3:1"},"nativeSrc":"1201:17:1","nodeType":"YulFunctionCall","src":"1201:17:1"},{"arguments":[{"name":"tail","nativeSrc":"1224:4:1","nodeType":"YulIdentifier","src":"1224:4:1"},{"name":"headStart","nativeSrc":"1230:9:1","nodeType":"YulIdentifier","src":"1230:9:1"}],"functionName":{"name":"sub","nativeSrc":"1220:3:1","nodeType":"YulIdentifier","src":"1220:3:1"},"nativeSrc":"1220:20:1","nodeType":"YulFunctionCall","src":"1220:20:1"}],"functionName":{"name":"mstore","nativeSrc":"1194:6:1","nodeType":"YulIdentifier","src":"1194:6:1"},"nativeSrc":"1194:47:1","nodeType":"YulFunctionCall","src":"1194:47:1"},"nativeSrc":"1194:47:1","nodeType":"YulExpressionStatement","src":"1194:47:1"},{"nativeSrc":"1250:86:1","nodeType":"YulAssignment","src":"1250:86:1","value":{"arguments":[{"name":"value0","nativeSrc":"1322:6:1","nodeType":"YulIdentifier","src":"1322:6:1"},{"name":"tail","nativeSrc":"1331:4:1","nodeType":"YulIdentifier","src":"1331:4:1"}],"functionName":{"name":"abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack","nativeSrc":"1258:63:1","nodeType":"YulIdentifier","src":"1258:63:1"},"nativeSrc":"1258:78:1","nodeType":"YulFunctionCall","src":"1258:78:1"},"variableNames":[{"name":"tail","nativeSrc":"1250:4:1","nodeType":"YulIdentifier","src":"1250:4:1"}]}]},"name":"abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed","nativeSrc":"1030:313:1","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"1120:9:1","nodeType":"YulTypedName","src":"1120:9:1","type":""},{"name":"value0","nativeSrc":"1132:6:1","nodeType":"YulTypedName","src":"1132:6:1","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"1143:4:1","nodeType":"YulTypedName","src":"1143:4:1","type":""}],"src":"1030:313:1"},{"body":{"nativeSrc":"1389:35:1","nodeType":"YulBlock","src":"1389:35:1","statements":[{"nativeSrc":"1399:19:1","nodeType":"YulAssignment","src":"1399:19:1","value":{"arguments":[{"kind":"number","nativeSrc":"1415:2:1","nodeType":"YulLiteral","src":"1415:2:1","type":"","value":"64"}],"functionName":{"name":"mload","nativeSrc":"1409:5:1","nodeType":"YulIdentifier","src":"1409:5:1"},"nativeSrc":"1409:9:1","nodeType":"YulFunctionCall","src":"1409:9:1"},"variableNames":[{"name":"memPtr","nativeSrc":"1399:6:1","nodeType":"YulIdentifier","src":"1399:6:1"}]}]},"name":"allocate_unbounded","nativeSrc":"1349:75:1","nodeType":"YulFunctionDefinition","returnVariables":[{"name":"memPtr","nativeSrc":"1382:6:1","nodeType":"YulTypedName","src":"1382:6:1","type":""}],"src":"1349:75:1"},{"body":{"nativeSrc":"1519:28:1","nodeType":"YulBlock","src":"1519:28:1","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"1536:1:1","nodeType":"YulLiteral","src":"1536:1:1","type":"","value":"0"},{"kind":"number","nativeSrc":"1539:1:1","nodeType":"YulLiteral","src":"1539:1:1","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"1529:6:1","nodeType":"YulIdentifier","src":"1529:6:1"},"nativeSrc":"1529:12:1","nodeType":"YulFunctionCall","src":"1529:12:1"},"nativeSrc":"1529:12:1","nodeType":"YulExpressionStatement","src":"1529:12:1"}]},"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nativeSrc":"1430:117:1","nodeType":"YulFunctionDefinition","src":"1430:117:1"},{"body":{"nativeSrc":"1642:28:1","nodeType":"YulBlock","src":"1642:28:1","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"1659:1:1","nodeType":"YulLiteral","src":"1659:1:1","type":"","value":"0"},{"kind":"number","nativeSrc":"1662:1:1","nodeType":"YulLiteral","src":"1662:1:1","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"1652:6:1","nodeType":"YulIdentifier","src":"1652:6:1"},"nativeSrc":"1652:12:1","nodeType":"YulFunctionCall","src":"1652:12:1"},"nativeSrc":"1652:12:1","nodeType":"YulExpressionStatement","src":"1652:12:1"}]},"name":"revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db","nativeSrc":"1553:117:1","nodeType":"YulFunctionDefinition","src":"1553:117:1"},{"body":{"nativeSrc":"1721:81:1","nodeType":"YulBlock","src":"1721:81:1","statements":[{"nativeSrc":"1731:65:1","nodeType":"YulAssignment","src":"1731:65:1","value":{"arguments":[{"name":"value","nativeSrc":"1746:5:1","nodeType":"YulIdentifier","src":"1746:5:1"},{"kind":"number","nativeSrc":"1753:42:1","nodeType":"YulLiteral","src":"1753:42:1","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nativeSrc":"1742:3:1","nodeType":"YulIdentifier","src":"1742:3:1"},"nativeSrc":"1742:54:1","nodeType":"YulFunctionCall","src":"1742:54:1"},"variableNames":[{"name":"cleaned","nativeSrc":"1731:7:1","nodeType":"YulIdentifier","src":"1731:7:1"}]}]},"name":"cleanup_t_uint160","nativeSrc":"1676:126:1","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nativeSrc":"1703:5:1","nodeType":"YulTypedName","src":"1703:5:1","type":""}],"returnVariables":[{"name":"cleaned","nativeSrc":"1713:7:1","nodeType":"YulTypedName","src":"1713:7:1","type":""}],"src":"1676:126:1"},{"body":{"nativeSrc":"1853:51:1","nodeType":"YulBlock","src":"1853:51:1","statements":[{"nativeSrc":"1863:35:1","nodeType":"YulAssignment","src":"1863:35:1","value":{"arguments":[{"name":"value","nativeSrc":"1892:5:1","nodeType":"YulIdentifier","src":"1892:5:1"}],"functionName":{"name":"cleanup_t_uint160","nativeSrc":"1874:17:1","nodeType":"YulIdentifier","src":"1874:17:1"},"nativeSrc":"1874:24:1","nodeType":"YulFunctionCall","src":"1874:24:1"},"variableNames":[{"name":"cleaned","nativeSrc":"1863:7:1","nodeType":"YulIdentifier","src":"1863:7:1"}]}]},"name":"cleanup_t_address","nativeSrc":"1808:96:1","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nativeSrc":"1835:5:1","nodeType":"YulTypedName","src":"1835:5:1","type":""}],"returnVariables":[{"name":"cleaned","nativeSrc":"1845:7:1","nodeType":"YulTypedName","src":"1845:7:1","type":""}],"src":"1808:96:1"},{"body":{"nativeSrc":"1953:79:1","nodeType":"YulBlock","src":"1953:79:1","statements":[{"body":{"nativeSrc":"2010:16:1","nodeType":"YulBlock","src":"2010:16:1","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"2019:1:1","nodeType":"YulLiteral","src":"2019:1:1","type":"","value":"0"},{"kind":"number","nativeSrc":"2022:1:1","nodeType":"YulLiteral","src":"2022:1:1","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"2012:6:1","nodeType":"YulIdentifier","src":"2012:6:1"},"nativeSrc":"2012:12:1","nodeType":"YulFunctionCall","src":"2012:12:1"},"nativeSrc":"2012:12:1","nodeType":"YulExpressionStatement","src":"2012:12:1"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nativeSrc":"1976:5:1","nodeType":"YulIdentifier","src":"1976:5:1"},{"arguments":[{"name":"value","nativeSrc":"2001:5:1","nodeType":"YulIdentifier","src":"2001:5:1"}],"functionName":{"name":"cleanup_t_address","nativeSrc":"1983:17:1","nodeType":"YulIdentifier","src":"1983:17:1"},"nativeSrc":"1983:24:1","nodeType":"YulFunctionCall","src":"1983:24:1"}],"functionName":{"name":"eq","nativeSrc":"1973:2:1","nodeType":"YulIdentifier","src":"1973:2:1"},"nativeSrc":"1973:35:1","nodeType":"YulFunctionCall","src":"1973:35:1"}],"functionName":{"name":"iszero","nativeSrc":"1966:6:1","nodeType":"YulIdentifier","src":"1966:6:1"},"nativeSrc":"1966:43:1","nodeType":"YulFunctionCall","src":"1966:43:1"},"nativeSrc":"1963:63:1","nodeType":"YulIf","src":"1963:63:1"}]},"name":"validator_revert_t_address","nativeSrc":"1910:122:1","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nativeSrc":"1946:5:1","nodeType":"YulTypedName","src":"1946:5:1","type":""}],"src":"1910:122:1"},{"body":{"nativeSrc":"2090:87:1","nodeType":"YulBlock","src":"2090:87:1","statements":[{"nativeSrc":"2100:29:1","nodeType":"YulAssignment","src":"2100:29:1","value":{"arguments":[{"name":"offset","nativeSrc":"2122:6:1","nodeType":"YulIdentifier","src":"2122:6:1"}],"functionName":{"name":"calldataload","nativeSrc":"2109:12:1","nodeType":"YulIdentifier","src":"2109:12:1"},"nativeSrc":"2109:20:1","nodeType":"YulFunctionCall","src":"2109:20:1"},"variableNames":[{"name":"value","nativeSrc":"2100:5:1","nodeType":"YulIdentifier","src":"2100:5:1"}]},{"expression":{"arguments":[{"name":"value","nativeSrc":"2165:5:1","nodeType":"YulIdentifier","src":"2165:5:1"}],"functionName":{"name":"validator_revert_t_address","nativeSrc":"2138:26:1","nodeType":"YulIdentifier","src":"2138:26:1"},"nativeSrc":"2138:33:1","nodeType":"YulFunctionCall","src":"2138:33:1"},"nativeSrc":"2138:33:1","nodeType":"YulExpressionStatement","src":"2138:33:1"}]},"name":"abi_decode_t_address","nativeSrc":"2038:139:1","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nativeSrc":"2068:6:1","nodeType":"YulTypedName","src":"2068:6:1","type":""},{"name":"end","nativeSrc":"2076:3:1","nodeType":"YulTypedName","src":"2076:3:1","type":""}],"returnVariables":[{"name":"value","nativeSrc":"2084:5:1","nodeType":"YulTypedName","src":"2084:5:1","type":""}],"src":"2038:139:1"},{"body":{"nativeSrc":"2228:32:1","nodeType":"YulBlock","src":"2228:32:1","statements":[{"nativeSrc":"2238:16:1","nodeType":"YulAssignment","src":"2238:16:1","value":{"name":"value","nativeSrc":"2249:5:1","nodeType":"YulIdentifier","src":"2249:5:1"},"variableNames":[{"name":"cleaned","nativeSrc":"2238:7:1","nodeType":"YulIdentifier","src":"2238:7:1"}]}]},"name":"cleanup_t_uint256","nativeSrc":"2183:77:1","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nativeSrc":"2210:5:1","nodeType":"YulTypedName","src":"2210:5:1","type":""}],"returnVariables":[{"name":"cleaned","nativeSrc":"2220:7:1","nodeType":"YulTypedName","src":"2220:7:1","type":""}],"src":"2183:77:1"},{"body":{"nativeSrc":"2309:79:1","nodeType":"YulBlock","src":"2309:79:1","statements":[{"body":{"nativeSrc":"2366:16:1","nodeType":"YulBlock","src":"2366:16:1","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"2375:1:1","nodeType":"YulLiteral","src":"2375:1:1","type":"","value":"0"},{"kind":"number","nativeSrc":"2378:1:1","nodeType":"YulLiteral","src":"2378:1:1","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"2368:6:1","nodeType":"YulIdentifier","src":"2368:6:1"},"nativeSrc":"2368:12:1","nodeType":"YulFunctionCall","src":"2368:12:1"},"nativeSrc":"2368:12:1","nodeType":"YulExpressionStatement","src":"2368:12:1"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nativeSrc":"2332:5:1","nodeType":"YulIdentifier","src":"2332:5:1"},{"arguments":[{"name":"value","nativeSrc":"2357:5:1","nodeType":"YulIdentifier","src":"2357:5:1"}],"functionName":{"name":"cleanup_t_uint256","nativeSrc":"2339:17:1","nodeType":"YulIdentifier","src":"2339:17:1"},"nativeSrc":"2339:24:1","nodeType":"YulFunctionCall","src":"2339:24:1"}],"functionName":{"name":"eq","nativeSrc":"2329:2:1","nodeType":"YulIdentifier","src":"2329:2:1"},"nativeSrc":"2329:35:1","nodeType":"YulFunctionCall","src":"2329:35:1"}],"functionName":{"name":"iszero","nativeSrc":"2322:6:1","nodeType":"YulIdentifier","src":"2322:6:1"},"nativeSrc":"2322:43:1","nodeType":"YulFunctionCall","src":"2322:43:1"},"nativeSrc":"2319:63:1","nodeType":"YulIf","src":"2319:63:1"}]},"name":"validator_revert_t_uint256","nativeSrc":"2266:122:1","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nativeSrc":"2302:5:1","nodeType":"YulTypedName","src":"2302:5:1","type":""}],"src":"2266:122:1"},{"body":{"nativeSrc":"2446:87:1","nodeType":"YulBlock","src":"2446:87:1","statements":[{"nativeSrc":"2456:29:1","nodeType":"YulAssignment","src":"2456:29:1","value":{"arguments":[{"name":"offset","nativeSrc":"2478:6:1","nodeType":"YulIdentifier","src":"2478:6:1"}],"functionName":{"name":"calldataload","nativeSrc":"2465:12:1","nodeType":"YulIdentifier","src":"2465:12:1"},"nativeSrc":"2465:20:1","nodeType":"YulFunctionCall","src":"2465:20:1"},"variableNames":[{"name":"value","nativeSrc":"2456:5:1","nodeType":"YulIdentifier","src":"2456:5:1"}]},{"expression":{"arguments":[{"name":"value","nativeSrc":"2521:5:1","nodeType":"YulIdentifier","src":"2521:5:1"}],"functionName":{"name":"validator_revert_t_uint256","nativeSrc":"2494:26:1","nodeType":"YulIdentifier","src":"2494:26:1"},"nativeSrc":"2494:33:1","nodeType":"YulFunctionCall","src":"2494:33:1"},"nativeSrc":"2494:33:1","nodeType":"YulExpressionStatement","src":"2494:33:1"}]},"name":"abi_decode_t_uint256","nativeSrc":"2394:139:1","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nativeSrc":"2424:6:1","nodeType":"YulTypedName","src":"2424:6:1","type":""},{"name":"end","nativeSrc":"2432:3:1","nodeType":"YulTypedName","src":"2432:3:1","type":""}],"returnVariables":[{"name":"value","nativeSrc":"2440:5:1","nodeType":"YulTypedName","src":"2440:5:1","type":""}],"src":"2394:139:1"},{"body":{"nativeSrc":"2622:391:1","nodeType":"YulBlock","src":"2622:391:1","statements":[{"body":{"nativeSrc":"2668:83:1","nodeType":"YulBlock","src":"2668:83:1","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nativeSrc":"2670:77:1","nodeType":"YulIdentifier","src":"2670:77:1"},"nativeSrc":"2670:79:1","nodeType":"YulFunctionCall","src":"2670:79:1"},"nativeSrc":"2670:79:1","nodeType":"YulExpressionStatement","src":"2670:79:1"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"2643:7:1","nodeType":"YulIdentifier","src":"2643:7:1"},{"name":"headStart","nativeSrc":"2652:9:1","nodeType":"YulIdentifier","src":"2652:9:1"}],"functionName":{"name":"sub","nativeSrc":"2639:3:1","nodeType":"YulIdentifier","src":"2639:3:1"},"nativeSrc":"2639:23:1","nodeType":"YulFunctionCall","src":"2639:23:1"},{"kind":"number","nativeSrc":"2664:2:1","nodeType":"YulLiteral","src":"2664:2:1","type":"","value":"64"}],"functionName":{"name":"slt","nativeSrc":"2635:3:1","nodeType":"YulIdentifier","src":"2635:3:1"},"nativeSrc":"2635:32:1","nodeType":"YulFunctionCall","src":"2635:32:1"},"nativeSrc":"2632:119:1","nodeType":"YulIf","src":"2632:119:1"},{"nativeSrc":"2761:117:1","nodeType":"YulBlock","src":"2761:117:1","statements":[{"nativeSrc":"2776:15:1","nodeType":"YulVariableDeclaration","src":"2776:15:1","value":{"kind":"number","nativeSrc":"2790:1:1","nodeType":"YulLiteral","src":"2790:1:1","type":"","value":"0"},"variables":[{"name":"offset","nativeSrc":"2780:6:1","nodeType":"YulTypedName","src":"2780:6:1","type":""}]},{"nativeSrc":"2805:63:1","nodeType":"YulAssignment","src":"2805:63:1","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"2840:9:1","nodeType":"YulIdentifier","src":"2840:9:1"},{"name":"offset","nativeSrc":"2851:6:1","nodeType":"YulIdentifier","src":"2851:6:1"}],"functionName":{"name":"add","nativeSrc":"2836:3:1","nodeType":"YulIdentifier","src":"2836:3:1"},"nativeSrc":"2836:22:1","nodeType":"YulFunctionCall","src":"2836:22:1"},{"name":"dataEnd","nativeSrc":"2860:7:1","nodeType":"YulIdentifier","src":"2860:7:1"}],"functionName":{"name":"abi_decode_t_address","nativeSrc":"2815:20:1","nodeType":"YulIdentifier","src":"2815:20:1"},"nativeSrc":"2815:53:1","nodeType":"YulFunctionCall","src":"2815:53:1"},"variableNames":[{"name":"value0","nativeSrc":"2805:6:1","nodeType":"YulIdentifier","src":"2805:6:1"}]}]},{"nativeSrc":"2888:118:1","nodeType":"YulBlock","src":"2888:118:1","statements":[{"nativeSrc":"2903:16:1","nodeType":"YulVariableDeclaration","src":"2903:16:1","value":{"kind":"number","nativeSrc":"2917:2:1","nodeType":"YulLiteral","src":"2917:2:1","type":"","value":"32"},"variables":[{"name":"offset","nativeSrc":"2907:6:1","nodeType":"YulTypedName","src":"2907:6:1","type":""}]},{"nativeSrc":"2933:63:1","nodeType":"YulAssignment","src":"2933:63:1","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"2968:9:1","nodeType":"YulIdentifier","src":"2968:9:1"},{"name":"offset","nativeSrc":"2979:6:1","nodeType":"YulIdentifier","src":"2979:6:1"}],"functionName":{"name":"add","nativeSrc":"2964:3:1","nodeType":"YulIdentifier","src":"2964:3:1"},"nativeSrc":"2964:22:1","nodeType":"YulFunctionCall","src":"2964:22:1"},{"name":"dataEnd","nativeSrc":"2988:7:1","nodeType":"YulIdentifier","src":"2988:7:1"}],"functionName":{"name":"abi_decode_t_uint256","nativeSrc":"2943:20:1","nodeType":"YulIdentifier","src":"2943:20:1"},"nativeSrc":"2943:53:1","nodeType":"YulFunctionCall","src":"2943:53:1"},"variableNames":[{"name":"value1","nativeSrc":"2933:6:1","nodeType":"YulIdentifier","src":"2933:6:1"}]}]}]},"name":"abi_decode_tuple_t_addresst_uint256","nativeSrc":"2539:474:1","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"2584:9:1","nodeType":"YulTypedName","src":"2584:9:1","type":""},{"name":"dataEnd","nativeSrc":"2595:7:1","nodeType":"YulTypedName","src":"2595:7:1","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"2607:6:1","nodeType":"YulTypedName","src":"2607:6:1","type":""},{"name":"value1","nativeSrc":"2615:6:1","nodeType":"YulTypedName","src":"2615:6:1","type":""}],"src":"2539:474:1"},{"body":{"nativeSrc":"3061:48:1","nodeType":"YulBlock","src":"3061:48:1","statements":[{"nativeSrc":"3071:32:1","nodeType":"YulAssignment","src":"3071:32:1","value":{"arguments":[{"arguments":[{"name":"value","nativeSrc":"3096:5:1","nodeType":"YulIdentifier","src":"3096:5:1"}],"functionName":{"name":"iszero","nativeSrc":"3089:6:1","nodeType":"YulIdentifier","src":"3089:6:1"},"nativeSrc":"3089:13:1","nodeType":"YulFunctionCall","src":"3089:13:1"}],"functionName":{"name":"iszero","nativeSrc":"3082:6:1","nodeType":"YulIdentifier","src":"3082:6:1"},"nativeSrc":"3082:21:1","nodeType":"YulFunctionCall","src":"3082:21:1"},"variableNames":[{"name":"cleaned","nativeSrc":"3071:7:1","nodeType":"YulIdentifier","src":"3071:7:1"}]}]},"name":"cleanup_t_bool","nativeSrc":"3019:90:1","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nativeSrc":"3043:5:1","nodeType":"YulTypedName","src":"3043:5:1","type":""}],"returnVariables":[{"name":"cleaned","nativeSrc":"3053:7:1","nodeType":"YulTypedName","src":"3053:7:1","type":""}],"src":"3019:90:1"},{"body":{"nativeSrc":"3174:50:1","nodeType":"YulBlock","src":"3174:50:1","statements":[{"expression":{"arguments":[{"name":"pos","nativeSrc":"3191:3:1","nodeType":"YulIdentifier","src":"3191:3:1"},{"arguments":[{"name":"value","nativeSrc":"3211:5:1","nodeType":"YulIdentifier","src":"3211:5:1"}],"functionName":{"name":"cleanup_t_bool","nativeSrc":"3196:14:1","nodeType":"YulIdentifier","src":"3196:14:1"},"nativeSrc":"3196:21:1","nodeType":"YulFunctionCall","src":"3196:21:1"}],"functionName":{"name":"mstore","nativeSrc":"3184:6:1","nodeType":"YulIdentifier","src":"3184:6:1"},"nativeSrc":"3184:34:1","nodeType":"YulFunctionCall","src":"3184:34:1"},"nativeSrc":"3184:34:1","nodeType":"YulExpressionStatement","src":"3184:34:1"}]},"name":"abi_encode_t_bool_to_t_bool_fromStack","nativeSrc":"3115:109:1","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nativeSrc":"3162:5:1","nodeType":"YulTypedName","src":"3162:5:1","type":""},{"name":"pos","nativeSrc":"3169:3:1","nodeType":"YulTypedName","src":"3169:3:1","type":""}],"src":"3115:109:1"},{"body":{"nativeSrc":"3322:118:1","nodeType":"YulBlock","src":"3322:118:1","statements":[{"nativeSrc":"3332:26:1","nodeType":"YulAssignment","src":"3332:26:1","value":{"arguments":[{"name":"headStart","nativeSrc":"3344:9:1","nodeType":"YulIdentifier","src":"3344:9:1"},{"kind":"number","nativeSrc":"3355:2:1","nodeType":"YulLiteral","src":"3355:2:1","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"3340:3:1","nodeType":"YulIdentifier","src":"3340:3:1"},"nativeSrc":"3340:18:1","nodeType":"YulFunctionCall","src":"3340:18:1"},"variableNames":[{"name":"tail","nativeSrc":"3332:4:1","nodeType":"YulIdentifier","src":"3332:4:1"}]},{"expression":{"arguments":[{"name":"value0","nativeSrc":"3406:6:1","nodeType":"YulIdentifier","src":"3406:6:1"},{"arguments":[{"name":"headStart","nativeSrc":"3419:9:1","nodeType":"YulIdentifier","src":"3419:9:1"},{"kind":"number","nativeSrc":"3430:1:1","nodeType":"YulLiteral","src":"3430:1:1","type":"","value":"0"}],"functionName":{"name":"add","nativeSrc":"3415:3:1","nodeType":"YulIdentifier","src":"3415:3:1"},"nativeSrc":"3415:17:1","nodeType":"YulFunctionCall","src":"3415:17:1"}],"functionName":{"name":"abi_encode_t_bool_to_t_bool_fromStack","nativeSrc":"3368:37:1","nodeType":"YulIdentifier","src":"3368:37:1"},"nativeSrc":"3368:65:1","nodeType":"YulFunctionCall","src":"3368:65:1"},"nativeSrc":"3368:65:1","nodeType":"YulExpressionStatement","src":"3368:65:1"}]},"name":"abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed","nativeSrc":"3230:210:1","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"3294:9:1","nodeType":"YulTypedName","src":"3294:9:1","type":""},{"name":"value0","nativeSrc":"3306:6:1","nodeType":"YulTypedName","src":"3306:6:1","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"3317:4:1","nodeType":"YulTypedName","src":"3317:4:1","type":""}],"src":"3230:210:1"},{"body":{"nativeSrc":"3511:53:1","nodeType":"YulBlock","src":"3511:53:1","statements":[{"expression":{"arguments":[{"name":"pos","nativeSrc":"3528:3:1","nodeType":"YulIdentifier","src":"3528:3:1"},{"arguments":[{"name":"value","nativeSrc":"3551:5:1","nodeType":"YulIdentifier","src":"3551:5:1"}],"functionName":{"name":"cleanup_t_uint256","nativeSrc":"3533:17:1","nodeType":"YulIdentifier","src":"3533:17:1"},"nativeSrc":"3533:24:1","nodeType":"YulFunctionCall","src":"3533:24:1"}],"functionName":{"name":"mstore","nativeSrc":"3521:6:1","nodeType":"YulIdentifier","src":"3521:6:1"},"nativeSrc":"3521:37:1","nodeType":"YulFunctionCall","src":"3521:37:1"},"nativeSrc":"3521:37:1","nodeType":"YulExpressionStatement","src":"3521:37:1"}]},"name":"abi_encode_t_uint256_to_t_uint256_fromStack","nativeSrc":"3446:118:1","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nativeSrc":"3499:5:1","nodeType":"YulTypedName","src":"3499:5:1","type":""},{"name":"pos","nativeSrc":"3506:3:1","nodeType":"YulTypedName","src":"3506:3:1","type":""}],"src":"3446:118:1"},{"body":{"nativeSrc":"3668:124:1","nodeType":"YulBlock","src":"3668:124:1","statements":[{"nativeSrc":"3678:26:1","nodeType":"YulAssignment","src":"3678:26:1","value":{"arguments":[{"name":"headStart","nativeSrc":"3690:9:1","nodeType":"YulIdentifier","src":"3690:9:1"},{"kind":"number","nativeSrc":"3701:2:1","nodeType":"YulLiteral","src":"3701:2:1","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"3686:3:1","nodeType":"YulIdentifier","src":"3686:3:1"},"nativeSrc":"3686:18:1","nodeType":"YulFunctionCall","src":"3686:18:1"},"variableNames":[{"name":"tail","nativeSrc":"3678:4:1","nodeType":"YulIdentifier","src":"3678:4:1"}]},{"expression":{"arguments":[{"name":"value0","nativeSrc":"3758:6:1","nodeType":"YulIdentifier","src":"3758:6:1"},{"arguments":[{"name":"headStart","nativeSrc":"3771:9:1","nodeType":"YulIdentifier","src":"3771:9:1"},{"kind":"number","nativeSrc":"3782:1:1","nodeType":"YulLiteral","src":"3782:1:1","type":"","value":"0"}],"functionName":{"name":"add","nativeSrc":"3767:3:1","nodeType":"YulIdentifier","src":"3767:3:1"},"nativeSrc":"3767:17:1","nodeType":"YulFunctionCall","src":"3767:17:1"}],"functionName":{"name":"abi_encode_t_uint256_to_t_uint256_fromStack","nativeSrc":"3714:43:1","nodeType":"YulIdentifier","src":"3714:43:1"},"nativeSrc":"3714:71:1","nodeType":"YulFunctionCall","src":"3714:71:1"},"nativeSrc":"3714:71:1","nodeType":"YulExpressionStatement","src":"3714:71:1"}]},"name":"abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed","nativeSrc":"3570:222:1","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"3640:9:1","nodeType":"YulTypedName","src":"3640:9:1","type":""},{"name":"value0","nativeSrc":"3652:6:1","nodeType":"YulTypedName","src":"3652:6:1","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"3663:4:1","nodeType":"YulTypedName","src":"3663:4:1","type":""}],"src":"3570:222:1"},{"body":{"nativeSrc":"3898:519:1","nodeType":"YulBlock","src":"3898:519:1","statements":[{"body":{"nativeSrc":"3944:83:1","nodeType":"YulBlock","src":"3944:83:1","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nativeSrc":"3946:77:1","nodeType":"YulIdentifier","src":"3946:77:1"},"nativeSrc":"3946:79:1","nodeType":"YulFunctionCall","src":"3946:79:1"},"nativeSrc":"3946:79:1","nodeType":"YulExpressionStatement","src":"3946:79:1"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"3919:7:1","nodeType":"YulIdentifier","src":"3919:7:1"},{"name":"headStart","nativeSrc":"3928:9:1","nodeType":"YulIdentifier","src":"3928:9:1"}],"functionName":{"name":"sub","nativeSrc":"3915:3:1","nodeType":"YulIdentifier","src":"3915:3:1"},"nativeSrc":"3915:23:1","nodeType":"YulFunctionCall","src":"3915:23:1"},{"kind":"number","nativeSrc":"3940:2:1","nodeType":"YulLiteral","src":"3940:2:1","type":"","value":"96"}],"functionName":{"name":"slt","nativeSrc":"3911:3:1","nodeType":"YulIdentifier","src":"3911:3:1"},"nativeSrc":"3911:32:1","nodeType":"YulFunctionCall","src":"3911:32:1"},"nativeSrc":"3908:119:1","nodeType":"YulIf","src":"3908:119:1"},{"nativeSrc":"4037:117:1","nodeType":"YulBlock","src":"4037:117:1","statements":[{"nativeSrc":"4052:15:1","nodeType":"YulVariableDeclaration","src":"4052:15:1","value":{"kind":"number","nativeSrc":"4066:1:1","nodeType":"YulLiteral","src":"4066:1:1","type":"","value":"0"},"variables":[{"name":"offset","nativeSrc":"4056:6:1","nodeType":"YulTypedName","src":"4056:6:1","type":""}]},{"nativeSrc":"4081:63:1","nodeType":"YulAssignment","src":"4081:63:1","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"4116:9:1","nodeType":"YulIdentifier","src":"4116:9:1"},{"name":"offset","nativeSrc":"4127:6:1","nodeType":"YulIdentifier","src":"4127:6:1"}],"functionName":{"name":"add","nativeSrc":"4112:3:1","nodeType":"YulIdentifier","src":"4112:3:1"},"nativeSrc":"4112:22:1","nodeType":"YulFunctionCall","src":"4112:22:1"},{"name":"dataEnd","nativeSrc":"4136:7:1","nodeType":"YulIdentifier","src":"4136:7:1"}],"functionName":{"name":"abi_decode_t_address","nativeSrc":"4091:20:1","nodeType":"YulIdentifier","src":"4091:20:1"},"nativeSrc":"4091:53:1","nodeType":"YulFunctionCall","src":"4091:53:1"},"variableNames":[{"name":"value0","nativeSrc":"4081:6:1","nodeType":"YulIdentifier","src":"4081:6:1"}]}]},{"nativeSrc":"4164:118:1","nodeType":"YulBlock","src":"4164:118:1","statements":[{"nativeSrc":"4179:16:1","nodeType":"YulVariableDeclaration","src":"4179:16:1","value":{"kind":"number","nativeSrc":"4193:2:1","nodeType":"YulLiteral","src":"4193:2:1","type":"","value":"32"},"variables":[{"name":"offset","nativeSrc":"4183:6:1","nodeType":"YulTypedName","src":"4183:6:1","type":""}]},{"nativeSrc":"4209:63:1","nodeType":"YulAssignment","src":"4209:63:1","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"4244:9:1","nodeType":"YulIdentifier","src":"4244:9:1"},{"name":"offset","nativeSrc":"4255:6:1","nodeType":"YulIdentifier","src":"4255:6:1"}],"functionName":{"name":"add","nativeSrc":"4240:3:1","nodeType":"YulIdentifier","src":"4240:3:1"},"nativeSrc":"4240:22:1","nodeType":"YulFunctionCall","src":"4240:22:1"},{"name":"dataEnd","nativeSrc":"4264:7:1","nodeType":"YulIdentifier","src":"4264:7:1"}],"functionName":{"name":"abi_decode_t_address","nativeSrc":"4219:20:1","nodeType":"YulIdentifier","src":"4219:20:1"},"nativeSrc":"4219:53:1","nodeType":"YulFunctionCall","src":"4219:53:1"},"variableNames":[{"name":"value1","nativeSrc":"4209:6:1","nodeType":"YulIdentifier","src":"4209:6:1"}]}]},{"nativeSrc":"4292:118:1","nodeType":"YulBlock","src":"4292:118:1","statements":[{"nativeSrc":"4307:16:1","nodeType":"YulVariableDeclaration","src":"4307:16:1","value":{"kind":"number","nativeSrc":"4321:2:1","nodeType":"YulLiteral","src":"4321:2:1","type":"","value":"64"},"variables":[{"name":"offset","nativeSrc":"4311:6:1","nodeType":"YulTypedName","src":"4311:6:1","type":""}]},{"nativeSrc":"4337:63:1","nodeType":"YulAssignment","src":"4337:63:1","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"4372:9:1","nodeType":"YulIdentifier","src":"4372:9:1"},{"name":"offset","nativeSrc":"4383:6:1","nodeType":"YulIdentifier","src":"4383:6:1"}],"functionName":{"name":"add","nativeSrc":"4368:3:1","nodeType":"YulIdentifier","src":"4368:3:1"},"nativeSrc":"4368:22:1","nodeType":"YulFunctionCall","src":"4368:22:1"},{"name":"dataEnd","nativeSrc":"4392:7:1","nodeType":"YulIdentifier","src":"4392:7:1"}],"functionName":{"name":"abi_decode_t_uint256","nativeSrc":"4347:20:1","nodeType":"YulIdentifier","src":"4347:20:1"},"nativeSrc":"4347:53:1","nodeType":"YulFunctionCall","src":"4347:53:1"},"variableNames":[{"name":"value2","nativeSrc":"4337:6:1","nodeType":"YulIdentifier","src":"4337:6:1"}]}]}]},"name":"abi_decode_tuple_t_addresst_addresst_uint256","nativeSrc":"3798:619:1","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"3852:9:1","nodeType":"YulTypedName","src":"3852:9:1","type":""},{"name":"dataEnd","nativeSrc":"3863:7:1","nodeType":"YulTypedName","src":"3863:7:1","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"3875:6:1","nodeType":"YulTypedName","src":"3875:6:1","type":""},{"name":"value1","nativeSrc":"3883:6:1","nodeType":"YulTypedName","src":"3883:6:1","type":""},{"name":"value2","nativeSrc":"3891:6:1","nodeType":"YulTypedName","src":"3891:6:1","type":""}],"src":"3798:619:1"},{"body":{"nativeSrc":"4466:43:1","nodeType":"YulBlock","src":"4466:43:1","statements":[{"nativeSrc":"4476:27:1","nodeType":"YulAssignment","src":"4476:27:1","value":{"arguments":[{"name":"value","nativeSrc":"4491:5:1","nodeType":"YulIdentifier","src":"4491:5:1"},{"kind":"number","nativeSrc":"4498:4:1","nodeType":"YulLiteral","src":"4498:4:1","type":"","value":"0xff"}],"functionName":{"name":"and","nativeSrc":"4487:3:1","nodeType":"YulIdentifier","src":"4487:3:1"},"nativeSrc":"4487:16:1","nodeType":"YulFunctionCall","src":"4487:16:1"},"variableNames":[{"name":"cleaned","nativeSrc":"4476:7:1","nodeType":"YulIdentifier","src":"4476:7:1"}]}]},"name":"cleanup_t_uint8","nativeSrc":"4423:86:1","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nativeSrc":"4448:5:1","nodeType":"YulTypedName","src":"4448:5:1","type":""}],"returnVariables":[{"name":"cleaned","nativeSrc":"4458:7:1","nodeType":"YulTypedName","src":"4458:7:1","type":""}],"src":"4423:86:1"},{"body":{"nativeSrc":"4576:51:1","nodeType":"YulBlock","src":"4576:51:1","statements":[{"expression":{"arguments":[{"name":"pos","nativeSrc":"4593:3:1","nodeType":"YulIdentifier","src":"4593:3:1"},{"arguments":[{"name":"value","nativeSrc":"4614:5:1","nodeType":"YulIdentifier","src":"4614:5:1"}],"functionName":{"name":"cleanup_t_uint8","nativeSrc":"4598:15:1","nodeType":"YulIdentifier","src":"4598:15:1"},"nativeSrc":"4598:22:1","nodeType":"YulFunctionCall","src":"4598:22:1"}],"functionName":{"name":"mstore","nativeSrc":"4586:6:1","nodeType":"YulIdentifier","src":"4586:6:1"},"nativeSrc":"4586:35:1","nodeType":"YulFunctionCall","src":"4586:35:1"},"nativeSrc":"4586:35:1","nodeType":"YulExpressionStatement","src":"4586:35:1"}]},"name":"abi_encode_t_uint8_to_t_uint8_fromStack","nativeSrc":"4515:112:1","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nativeSrc":"4564:5:1","nodeType":"YulTypedName","src":"4564:5:1","type":""},{"name":"pos","nativeSrc":"4571:3:1","nodeType":"YulTypedName","src":"4571:3:1","type":""}],"src":"4515:112:1"},{"body":{"nativeSrc":"4727:120:1","nodeType":"YulBlock","src":"4727:120:1","statements":[{"nativeSrc":"4737:26:1","nodeType":"YulAssignment","src":"4737:26:1","value":{"arguments":[{"name":"headStart","nativeSrc":"4749:9:1","nodeType":"YulIdentifier","src":"4749:9:1"},{"kind":"number","nativeSrc":"4760:2:1","nodeType":"YulLiteral","src":"4760:2:1","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"4745:3:1","nodeType":"YulIdentifier","src":"4745:3:1"},"nativeSrc":"4745:18:1","nodeType":"YulFunctionCall","src":"4745:18:1"},"variableNames":[{"name":"tail","nativeSrc":"4737:4:1","nodeType":"YulIdentifier","src":"4737:4:1"}]},{"expression":{"arguments":[{"name":"value0","nativeSrc":"4813:6:1","nodeType":"YulIdentifier","src":"4813:6:1"},{"arguments":[{"name":"headStart","nativeSrc":"4826:9:1","nodeType":"YulIdentifier","src":"4826:9:1"},{"kind":"number","nativeSrc":"4837:1:1","nodeType":"YulLiteral","src":"4837:1:1","type":"","value":"0"}],"functionName":{"name":"add","nativeSrc":"4822:3:1","nodeType":"YulIdentifier","src":"4822:3:1"},"nativeSrc":"4822:17:1","nodeType":"YulFunctionCall","src":"4822:17:1"}],"functionName":{"name":"abi_encode_t_uint8_to_t_uint8_fromStack","nativeSrc":"4773:39:1","nodeType":"YulIdentifier","src":"4773:39:1"},"nativeSrc":"4773:67:1","nodeType":"YulFunctionCall","src":"4773:67:1"},"nativeSrc":"4773:67:1","nodeType":"YulExpressionStatement","src":"4773:67:1"}]},"name":"abi_encode_tuple_t_uint8__to_t_uint8__fromStack_reversed","nativeSrc":"4633:214:1","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"4699:9:1","nodeType":"YulTypedName","src":"4699:9:1","type":""},{"name":"value0","nativeSrc":"4711:6:1","nodeType":"YulTypedName","src":"4711:6:1","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"4722:4:1","nodeType":"YulTypedName","src":"4722:4:1","type":""}],"src":"4633:214:1"},{"body":{"nativeSrc":"4919:263:1","nodeType":"YulBlock","src":"4919:263:1","statements":[{"body":{"nativeSrc":"4965:83:1","nodeType":"YulBlock","src":"4965:83:1","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nativeSrc":"4967:77:1","nodeType":"YulIdentifier","src":"4967:77:1"},"nativeSrc":"4967:79:1","nodeType":"YulFunctionCall","src":"4967:79:1"},"nativeSrc":"4967:79:1","nodeType":"YulExpressionStatement","src":"4967:79:1"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"4940:7:1","nodeType":"YulIdentifier","src":"4940:7:1"},{"name":"headStart","nativeSrc":"4949:9:1","nodeType":"YulIdentifier","src":"4949:9:1"}],"functionName":{"name":"sub","nativeSrc":"4936:3:1","nodeType":"YulIdentifier","src":"4936:3:1"},"nativeSrc":"4936:23:1","nodeType":"YulFunctionCall","src":"4936:23:1"},{"kind":"number","nativeSrc":"4961:2:1","nodeType":"YulLiteral","src":"4961:2:1","type":"","value":"32"}],"functionName":{"name":"slt","nativeSrc":"4932:3:1","nodeType":"YulIdentifier","src":"4932:3:1"},"nativeSrc":"4932:32:1","nodeType":"YulFunctionCall","src":"4932:32:1"},"nativeSrc":"4929:119:1","nodeType":"YulIf","src":"4929:119:1"},{"nativeSrc":"5058:117:1","nodeType":"YulBlock","src":"5058:117:1","statements":[{"nativeSrc":"5073:15:1","nodeType":"YulVariableDeclaration","src":"5073:15:1","value":{"kind":"number","nativeSrc":"5087:1:1","nodeType":"YulLiteral","src":"5087:1:1","type":"","value":"0"},"variables":[{"name":"offset","nativeSrc":"5077:6:1","nodeType":"YulTypedName","src":"5077:6:1","type":""}]},{"nativeSrc":"5102:63:1","nodeType":"YulAssignment","src":"5102:63:1","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"5137:9:1","nodeType":"YulIdentifier","src":"5137:9:1"},{"name":"offset","nativeSrc":"5148:6:1","nodeType":"YulIdentifier","src":"5148:6:1"}],"functionName":{"name":"add","nativeSrc":"5133:3:1","nodeType":"YulIdentifier","src":"5133:3:1"},"nativeSrc":"5133:22:1","nodeType":"YulFunctionCall","src":"5133:22:1"},{"name":"dataEnd","nativeSrc":"5157:7:1","nodeType":"YulIdentifier","src":"5157:7:1"}],"functionName":{"name":"abi_decode_t_address","nativeSrc":"5112:20:1","nodeType":"YulIdentifier","src":"5112:20:1"},"nativeSrc":"5112:53:1","nodeType":"YulFunctionCall","src":"5112:53:1"},"variableNames":[{"name":"value0","nativeSrc":"5102:6:1","nodeType":"YulIdentifier","src":"5102:6:1"}]}]}]},"name":"abi_decode_tuple_t_address","nativeSrc":"4853:329:1","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"4889:9:1","nodeType":"YulTypedName","src":"4889:9:1","type":""},{"name":"dataEnd","nativeSrc":"4900:7:1","nodeType":"YulTypedName","src":"4900:7:1","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"4912:6:1","nodeType":"YulTypedName","src":"4912:6:1","type":""}],"src":"4853:329:1"},{"body":{"nativeSrc":"5271:391:1","nodeType":"YulBlock","src":"5271:391:1","statements":[{"body":{"nativeSrc":"5317:83:1","nodeType":"YulBlock","src":"5317:83:1","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nativeSrc":"5319:77:1","nodeType":"YulIdentifier","src":"5319:77:1"},"nativeSrc":"5319:79:1","nodeType":"YulFunctionCall","src":"5319:79:1"},"nativeSrc":"5319:79:1","nodeType":"YulExpressionStatement","src":"5319:79:1"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"5292:7:1","nodeType":"YulIdentifier","src":"5292:7:1"},{"name":"headStart","nativeSrc":"5301:9:1","nodeType":"YulIdentifier","src":"5301:9:1"}],"functionName":{"name":"sub","nativeSrc":"5288:3:1","nodeType":"YulIdentifier","src":"5288:3:1"},"nativeSrc":"5288:23:1","nodeType":"YulFunctionCall","src":"5288:23:1"},{"kind":"number","nativeSrc":"5313:2:1","nodeType":"YulLiteral","src":"5313:2:1","type":"","value":"64"}],"functionName":{"name":"slt","nativeSrc":"5284:3:1","nodeType":"YulIdentifier","src":"5284:3:1"},"nativeSrc":"5284:32:1","nodeType":"YulFunctionCall","src":"5284:32:1"},"nativeSrc":"5281:119:1","nodeType":"YulIf","src":"5281:119:1"},{"nativeSrc":"5410:117:1","nodeType":"YulBlock","src":"5410:117:1","statements":[{"nativeSrc":"5425:15:1","nodeType":"YulVariableDeclaration","src":"5425:15:1","value":{"kind":"number","nativeSrc":"5439:1:1","nodeType":"YulLiteral","src":"5439:1:1","type":"","value":"0"},"variables":[{"name":"offset","nativeSrc":"5429:6:1","nodeType":"YulTypedName","src":"5429:6:1","type":""}]},{"nativeSrc":"5454:63:1","nodeType":"YulAssignment","src":"5454:63:1","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"5489:9:1","nodeType":"YulIdentifier","src":"5489:9:1"},{"name":"offset","nativeSrc":"5500:6:1","nodeType":"YulIdentifier","src":"5500:6:1"}],"functionName":{"name":"add","nativeSrc":"5485:3:1","nodeType":"YulIdentifier","src":"5485:3:1"},"nativeSrc":"5485:22:1","nodeType":"YulFunctionCall","src":"5485:22:1"},{"name":"dataEnd","nativeSrc":"5509:7:1","nodeType":"YulIdentifier","src":"5509:7:1"}],"functionName":{"name":"abi_decode_t_address","nativeSrc":"5464:20:1","nodeType":"YulIdentifier","src":"5464:20:1"},"nativeSrc":"5464:53:1","nodeType":"YulFunctionCall","src":"5464:53:1"},"variableNames":[{"name":"value0","nativeSrc":"5454:6:1","nodeType":"YulIdentifier","src":"5454:6:1"}]}]},{"nativeSrc":"5537:118:1","nodeType":"YulBlock","src":"5537:118:1","statements":[{"nativeSrc":"5552:16:1","nodeType":"YulVariableDeclaration","src":"5552:16:1","value":{"kind":"number","nativeSrc":"5566:2:1","nodeType":"YulLiteral","src":"5566:2:1","type":"","value":"32"},"variables":[{"name":"offset","nativeSrc":"5556:6:1","nodeType":"YulTypedName","src":"5556:6:1","type":""}]},{"nativeSrc":"5582:63:1","nodeType":"YulAssignment","src":"5582:63:1","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"5617:9:1","nodeType":"YulIdentifier","src":"5617:9:1"},{"name":"offset","nativeSrc":"5628:6:1","nodeType":"YulIdentifier","src":"5628:6:1"}],"functionName":{"name":"add","nativeSrc":"5613:3:1","nodeType":"YulIdentifier","src":"5613:3:1"},"nativeSrc":"5613:22:1","nodeType":"YulFunctionCall","src":"5613:22:1"},{"name":"dataEnd","nativeSrc":"5637:7:1","nodeType":"YulIdentifier","src":"5637:7:1"}],"functionName":{"name":"abi_decode_t_address","nativeSrc":"5592:20:1","nodeType":"YulIdentifier","src":"5592:20:1"},"nativeSrc":"5592:53:1","nodeType":"YulFunctionCall","src":"5592:53:1"},"variableNames":[{"name":"value1","nativeSrc":"5582:6:1","nodeType":"YulIdentifier","src":"5582:6:1"}]}]}]},"name":"abi_decode_tuple_t_addresst_address","nativeSrc":"5188:474:1","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"5233:9:1","nodeType":"YulTypedName","src":"5233:9:1","type":""},{"name":"dataEnd","nativeSrc":"5244:7:1","nodeType":"YulTypedName","src":"5244:7:1","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"5256:6:1","nodeType":"YulTypedName","src":"5256:6:1","type":""},{"name":"value1","nativeSrc":"5264:6:1","nodeType":"YulTypedName","src":"5264:6:1","type":""}],"src":"5188:474:1"},{"body":{"nativeSrc":"5696:152:1","nodeType":"YulBlock","src":"5696:152:1","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"5713:1:1","nodeType":"YulLiteral","src":"5713:1:1","type":"","value":"0"},{"kind":"number","nativeSrc":"5716:77:1","nodeType":"YulLiteral","src":"5716:77:1","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nativeSrc":"5706:6:1","nodeType":"YulIdentifier","src":"5706:6:1"},"nativeSrc":"5706:88:1","nodeType":"YulFunctionCall","src":"5706:88:1"},"nativeSrc":"5706:88:1","nodeType":"YulExpressionStatement","src":"5706:88:1"},{"expression":{"arguments":[{"kind":"number","nativeSrc":"5810:1:1","nodeType":"YulLiteral","src":"5810:1:1","type":"","value":"4"},{"kind":"number","nativeSrc":"5813:4:1","nodeType":"YulLiteral","src":"5813:4:1","type":"","value":"0x22"}],"functionName":{"name":"mstore","nativeSrc":"5803:6:1","nodeType":"YulIdentifier","src":"5803:6:1"},"nativeSrc":"5803:15:1","nodeType":"YulFunctionCall","src":"5803:15:1"},"nativeSrc":"5803:15:1","nodeType":"YulExpressionStatement","src":"5803:15:1"},{"expression":{"arguments":[{"kind":"number","nativeSrc":"5834:1:1","nodeType":"YulLiteral","src":"5834:1:1","type":"","value":"0"},{"kind":"number","nativeSrc":"5837:4:1","nodeType":"YulLiteral","src":"5837:4:1","type":"","value":"0x24"}],"functionName":{"name":"revert","nativeSrc":"5827:6:1","nodeType":"YulIdentifier","src":"5827:6:1"},"nativeSrc":"5827:15:1","nodeType":"YulFunctionCall","src":"5827:15:1"},"nativeSrc":"5827:15:1","nodeType":"YulExpressionStatement","src":"5827:15:1"}]},"name":"panic_error_0x22","nativeSrc":"5668:180:1","nodeType":"YulFunctionDefinition","src":"5668:180:1"},{"body":{"nativeSrc":"5905:269:1","nodeType":"YulBlock","src":"5905:269:1","statements":[{"nativeSrc":"5915:22:1","nodeType":"YulAssignment","src":"5915:22:1","value":{"arguments":[{"name":"data","nativeSrc":"5929:4:1","nodeType":"YulIdentifier","src":"5929:4:1"},{"kind":"number","nativeSrc":"5935:1:1","nodeType":"YulLiteral","src":"5935:1:1","type":"","value":"2"}],"functionName":{"name":"div","nativeSrc":"5925:3:1","nodeType":"YulIdentifier","src":"5925:3:1"},"nativeSrc":"5925:12:1","nodeType":"YulFunctionCall","src":"5925:12:1"},"variableNames":[{"name":"length","nativeSrc":"5915:6:1","nodeType":"YulIdentifier","src":"5915:6:1"}]},{"nativeSrc":"5946:38:1","nodeType":"YulVariableDeclaration","src":"5946:38:1","value":{"arguments":[{"name":"data","nativeSrc":"5976:4:1","nodeType":"YulIdentifier","src":"5976:4:1"},{"kind":"number","nativeSrc":"5982:1:1","nodeType":"YulLiteral","src":"5982:1:1","type":"","value":"1"}],"functionName":{"name":"and","nativeSrc":"5972:3:1","nodeType":"YulIdentifier","src":"5972:3:1"},"nativeSrc":"5972:12:1","nodeType":"YulFunctionCall","src":"5972:12:1"},"variables":[{"name":"outOfPlaceEncoding","nativeSrc":"5950:18:1","nodeType":"YulTypedName","src":"5950:18:1","type":""}]},{"body":{"nativeSrc":"6023:51:1","nodeType":"YulBlock","src":"6023:51:1","statements":[{"nativeSrc":"6037:27:1","nodeType":"YulAssignment","src":"6037:27:1","value":{"arguments":[{"name":"length","nativeSrc":"6051:6:1","nodeType":"YulIdentifier","src":"6051:6:1"},{"kind":"number","nativeSrc":"6059:4:1","nodeType":"YulLiteral","src":"6059:4:1","type":"","value":"0x7f"}],"functionName":{"name":"and","nativeSrc":"6047:3:1","nodeType":"YulIdentifier","src":"6047:3:1"},"nativeSrc":"6047:17:1","nodeType":"YulFunctionCall","src":"6047:17:1"},"variableNames":[{"name":"length","nativeSrc":"6037:6:1","nodeType":"YulIdentifier","src":"6037:6:1"}]}]},"condition":{"arguments":[{"name":"outOfPlaceEncoding","nativeSrc":"6003:18:1","nodeType":"YulIdentifier","src":"6003:18:1"}],"functionName":{"name":"iszero","nativeSrc":"5996:6:1","nodeType":"YulIdentifier","src":"5996:6:1"},"nativeSrc":"5996:26:1","nodeType":"YulFunctionCall","src":"5996:26:1"},"nativeSrc":"5993:81:1","nodeType":"YulIf","src":"5993:81:1"},{"body":{"nativeSrc":"6126:42:1","nodeType":"YulBlock","src":"6126:42:1","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x22","nativeSrc":"6140:16:1","nodeType":"YulIdentifier","src":"6140:16:1"},"nativeSrc":"6140:18:1","nodeType":"YulFunctionCall","src":"6140:18:1"},"nativeSrc":"6140:18:1","nodeType":"YulExpressionStatement","src":"6140:18:1"}]},"condition":{"arguments":[{"name":"outOfPlaceEncoding","nativeSrc":"6090:18:1","nodeType":"YulIdentifier","src":"6090:18:1"},{"arguments":[{"name":"length","nativeSrc":"6113:6:1","nodeType":"YulIdentifier","src":"6113:6:1"},{"kind":"number","nativeSrc":"6121:2:1","nodeType":"YulLiteral","src":"6121:2:1","type":"","value":"32"}],"functionName":{"name":"lt","nativeSrc":"6110:2:1","nodeType":"YulIdentifier","src":"6110:2:1"},"nativeSrc":"6110:14:1","nodeType":"YulFunctionCall","src":"6110:14:1"}],"functionName":{"name":"eq","nativeSrc":"6087:2:1","nodeType":"YulIdentifier","src":"6087:2:1"},"nativeSrc":"6087:38:1","nodeType":"YulFunctionCall","src":"6087:38:1"},"nativeSrc":"6084:84:1","nodeType":"YulIf","src":"6084:84:1"}]},"name":"extract_byte_array_length","nativeSrc":"5854:320:1","nodeType":"YulFunctionDefinition","parameters":[{"name":"data","nativeSrc":"5889:4:1","nodeType":"YulTypedName","src":"5889:4:1","type":""}],"returnVariables":[{"name":"length","nativeSrc":"5898:6:1","nodeType":"YulTypedName","src":"5898:6:1","type":""}],"src":"5854:320:1"},{"body":{"nativeSrc":"6286:64:1","nodeType":"YulBlock","src":"6286:64:1","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nativeSrc":"6308:6:1","nodeType":"YulIdentifier","src":"6308:6:1"},{"kind":"number","nativeSrc":"6316:1:1","nodeType":"YulLiteral","src":"6316:1:1","type":"","value":"0"}],"functionName":{"name":"add","nativeSrc":"6304:3:1","nodeType":"YulIdentifier","src":"6304:3:1"},"nativeSrc":"6304:14:1","nodeType":"YulFunctionCall","src":"6304:14:1"},{"hexValue":"696e73756666696369656e742062616c616e6365","kind":"string","nativeSrc":"6320:22:1","nodeType":"YulLiteral","src":"6320:22:1","type":"","value":"insufficient balance"}],"functionName":{"name":"mstore","nativeSrc":"6297:6:1","nodeType":"YulIdentifier","src":"6297:6:1"},"nativeSrc":"6297:46:1","nodeType":"YulFunctionCall","src":"6297:46:1"},"nativeSrc":"6297:46:1","nodeType":"YulExpressionStatement","src":"6297:46:1"}]},"name":"store_literal_in_memory_a6d1ff1db3d0b9b8c60e12ccab5ce7431be9a2cd0518ac362f1c5c1e0b1cefee","nativeSrc":"6180:170:1","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nativeSrc":"6278:6:1","nodeType":"YulTypedName","src":"6278:6:1","type":""}],"src":"6180:170:1"},{"body":{"nativeSrc":"6502:220:1","nodeType":"YulBlock","src":"6502:220:1","statements":[{"nativeSrc":"6512:74:1","nodeType":"YulAssignment","src":"6512:74:1","value":{"arguments":[{"name":"pos","nativeSrc":"6578:3:1","nodeType":"YulIdentifier","src":"6578:3:1"},{"kind":"number","nativeSrc":"6583:2:1","nodeType":"YulLiteral","src":"6583:2:1","type":"","value":"20"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nativeSrc":"6519:58:1","nodeType":"YulIdentifier","src":"6519:58:1"},"nativeSrc":"6519:67:1","nodeType":"YulFunctionCall","src":"6519:67:1"},"variableNames":[{"name":"pos","nativeSrc":"6512:3:1","nodeType":"YulIdentifier","src":"6512:3:1"}]},{"expression":{"arguments":[{"name":"pos","nativeSrc":"6684:3:1","nodeType":"YulIdentifier","src":"6684:3:1"}],"functionName":{"name":"store_literal_in_memory_a6d1ff1db3d0b9b8c60e12ccab5ce7431be9a2cd0518ac362f1c5c1e0b1cefee","nativeSrc":"6595:88:1","nodeType":"YulIdentifier","src":"6595:88:1"},"nativeSrc":"6595:93:1","nodeType":"YulFunctionCall","src":"6595:93:1"},"nativeSrc":"6595:93:1","nodeType":"YulExpressionStatement","src":"6595:93:1"},{"nativeSrc":"6697:19:1","nodeType":"YulAssignment","src":"6697:19:1","value":{"arguments":[{"name":"pos","nativeSrc":"6708:3:1","nodeType":"YulIdentifier","src":"6708:3:1"},{"kind":"number","nativeSrc":"6713:2:1","nodeType":"YulLiteral","src":"6713:2:1","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"6704:3:1","nodeType":"YulIdentifier","src":"6704:3:1"},"nativeSrc":"6704:12:1","nodeType":"YulFunctionCall","src":"6704:12:1"},"variableNames":[{"name":"end","nativeSrc":"6697:3:1","nodeType":"YulIdentifier","src":"6697:3:1"}]}]},"name":"abi_encode_t_stringliteral_a6d1ff1db3d0b9b8c60e12ccab5ce7431be9a2cd0518ac362f1c5c1e0b1cefee_to_t_string_memory_ptr_fromStack","nativeSrc":"6356:366:1","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nativeSrc":"6490:3:1","nodeType":"YulTypedName","src":"6490:3:1","type":""}],"returnVariables":[{"name":"end","nativeSrc":"6498:3:1","nodeType":"YulTypedName","src":"6498:3:1","type":""}],"src":"6356:366:1"},{"body":{"nativeSrc":"6899:248:1","nodeType":"YulBlock","src":"6899:248:1","statements":[{"nativeSrc":"6909:26:1","nodeType":"YulAssignment","src":"6909:26:1","value":{"arguments":[{"name":"headStart","nativeSrc":"6921:9:1","nodeType":"YulIdentifier","src":"6921:9:1"},{"kind":"number","nativeSrc":"6932:2:1","nodeType":"YulLiteral","src":"6932:2:1","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"6917:3:1","nodeType":"YulIdentifier","src":"6917:3:1"},"nativeSrc":"6917:18:1","nodeType":"YulFunctionCall","src":"6917:18:1"},"variableNames":[{"name":"tail","nativeSrc":"6909:4:1","nodeType":"YulIdentifier","src":"6909:4:1"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"6956:9:1","nodeType":"YulIdentifier","src":"6956:9:1"},{"kind":"number","nativeSrc":"6967:1:1","nodeType":"YulLiteral","src":"6967:1:1","type":"","value":"0"}],"functionName":{"name":"add","nativeSrc":"6952:3:1","nodeType":"YulIdentifier","src":"6952:3:1"},"nativeSrc":"6952:17:1","nodeType":"YulFunctionCall","src":"6952:17:1"},{"arguments":[{"name":"tail","nativeSrc":"6975:4:1","nodeType":"YulIdentifier","src":"6975:4:1"},{"name":"headStart","nativeSrc":"6981:9:1","nodeType":"YulIdentifier","src":"6981:9:1"}],"functionName":{"name":"sub","nativeSrc":"6971:3:1","nodeType":"YulIdentifier","src":"6971:3:1"},"nativeSrc":"6971:20:1","nodeType":"YulFunctionCall","src":"6971:20:1"}],"functionName":{"name":"mstore","nativeSrc":"6945:6:1","nodeType":"YulIdentifier","src":"6945:6:1"},"nativeSrc":"6945:47:1","nodeType":"YulFunctionCall","src":"6945:47:1"},"nativeSrc":"6945:47:1","nodeType":"YulExpressionStatement","src":"6945:47:1"},{"nativeSrc":"7001:139:1","nodeType":"YulAssignment","src":"7001:139:1","value":{"arguments":[{"name":"tail","nativeSrc":"7135:4:1","nodeType":"YulIdentifier","src":"7135:4:1"}],"functionName":{"name":"abi_encode_t_stringliteral_a6d1ff1db3d0b9b8c60e12ccab5ce7431be9a2cd0518ac362f1c5c1e0b1cefee_to_t_string_memory_ptr_fromStack","nativeSrc":"7009:124:1","nodeType":"YulIdentifier","src":"7009:124:1"},"nativeSrc":"7009:131:1","nodeType":"YulFunctionCall","src":"7009:131:1"},"variableNames":[{"name":"tail","nativeSrc":"7001:4:1","nodeType":"YulIdentifier","src":"7001:4:1"}]}]},"name":"abi_encode_tuple_t_stringliteral_a6d1ff1db3d0b9b8c60e12ccab5ce7431be9a2cd0518ac362f1c5c1e0b1cefee__to_t_string_memory_ptr__fromStack_reversed","nativeSrc":"6728:419:1","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"6879:9:1","nodeType":"YulTypedName","src":"6879:9:1","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"6894:4:1","nodeType":"YulTypedName","src":"6894:4:1","type":""}],"src":"6728:419:1"},{"body":{"nativeSrc":"7259:61:1","nodeType":"YulBlock","src":"7259:61:1","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nativeSrc":"7281:6:1","nodeType":"YulIdentifier","src":"7281:6:1"},{"kind":"number","nativeSrc":"7289:1:1","nodeType":"YulLiteral","src":"7289:1:1","type":"","value":"0"}],"functionName":{"name":"add","nativeSrc":"7277:3:1","nodeType":"YulIdentifier","src":"7277:3:1"},"nativeSrc":"7277:14:1","nodeType":"YulFunctionCall","src":"7277:14:1"},{"hexValue":"6578636565647320616c6c6f77616e6365","kind":"string","nativeSrc":"7293:19:1","nodeType":"YulLiteral","src":"7293:19:1","type":"","value":"exceeds allowance"}],"functionName":{"name":"mstore","nativeSrc":"7270:6:1","nodeType":"YulIdentifier","src":"7270:6:1"},"nativeSrc":"7270:43:1","nodeType":"YulFunctionCall","src":"7270:43:1"},"nativeSrc":"7270:43:1","nodeType":"YulExpressionStatement","src":"7270:43:1"}]},"name":"store_literal_in_memory_a2db9b2d459fa87320b1b84f2f349507cfdbf260f36c3b404dc6ea1ada9b5618","nativeSrc":"7153:167:1","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nativeSrc":"7251:6:1","nodeType":"YulTypedName","src":"7251:6:1","type":""}],"src":"7153:167:1"},{"body":{"nativeSrc":"7472:220:1","nodeType":"YulBlock","src":"7472:220:1","statements":[{"nativeSrc":"7482:74:1","nodeType":"YulAssignment","src":"7482:74:1","value":{"arguments":[{"name":"pos","nativeSrc":"7548:3:1","nodeType":"YulIdentifier","src":"7548:3:1"},{"kind":"number","nativeSrc":"7553:2:1","nodeType":"YulLiteral","src":"7553:2:1","type":"","value":"17"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nativeSrc":"7489:58:1","nodeType":"YulIdentifier","src":"7489:58:1"},"nativeSrc":"7489:67:1","nodeType":"YulFunctionCall","src":"7489:67:1"},"variableNames":[{"name":"pos","nativeSrc":"7482:3:1","nodeType":"YulIdentifier","src":"7482:3:1"}]},{"expression":{"arguments":[{"name":"pos","nativeSrc":"7654:3:1","nodeType":"YulIdentifier","src":"7654:3:1"}],"functionName":{"name":"store_literal_in_memory_a2db9b2d459fa87320b1b84f2f349507cfdbf260f36c3b404dc6ea1ada9b5618","nativeSrc":"7565:88:1","nodeType":"YulIdentifier","src":"7565:88:1"},"nativeSrc":"7565:93:1","nodeType":"YulFunctionCall","src":"7565:93:1"},"nativeSrc":"7565:93:1","nodeType":"YulExpressionStatement","src":"7565:93:1"},{"nativeSrc":"7667:19:1","nodeType":"YulAssignment","src":"7667:19:1","value":{"arguments":[{"name":"pos","nativeSrc":"7678:3:1","nodeType":"YulIdentifier","src":"7678:3:1"},{"kind":"number","nativeSrc":"7683:2:1","nodeType":"YulLiteral","src":"7683:2:1","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"7674:3:1","nodeType":"YulIdentifier","src":"7674:3:1"},"nativeSrc":"7674:12:1","nodeType":"YulFunctionCall","src":"7674:12:1"},"variableNames":[{"name":"end","nativeSrc":"7667:3:1","nodeType":"YulIdentifier","src":"7667:3:1"}]}]},"name":"abi_encode_t_stringliteral_a2db9b2d459fa87320b1b84f2f349507cfdbf260f36c3b404dc6ea1ada9b5618_to_t_string_memory_ptr_fromStack","nativeSrc":"7326:366:1","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nativeSrc":"7460:3:1","nodeType":"YulTypedName","src":"7460:3:1","type":""}],"returnVariables":[{"name":"end","nativeSrc":"7468:3:1","nodeType":"YulTypedName","src":"7468:3:1","type":""}],"src":"7326:366:1"},{"body":{"nativeSrc":"7869:248:1","nodeType":"YulBlock","src":"7869:248:1","statements":[{"nativeSrc":"7879:26:1","nodeType":"YulAssignment","src":"7879:26:1","value":{"arguments":[{"name":"headStart","nativeSrc":"7891:9:1","nodeType":"YulIdentifier","src":"7891:9:1"},{"kind":"number","nativeSrc":"7902:2:1","nodeType":"YulLiteral","src":"7902:2:1","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"7887:3:1","nodeType":"YulIdentifier","src":"7887:3:1"},"nativeSrc":"7887:18:1","nodeType":"YulFunctionCall","src":"7887:18:1"},"variableNames":[{"name":"tail","nativeSrc":"7879:4:1","nodeType":"YulIdentifier","src":"7879:4:1"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"7926:9:1","nodeType":"YulIdentifier","src":"7926:9:1"},{"kind":"number","nativeSrc":"7937:1:1","nodeType":"YulLiteral","src":"7937:1:1","type":"","value":"0"}],"functionName":{"name":"add","nativeSrc":"7922:3:1","nodeType":"YulIdentifier","src":"7922:3:1"},"nativeSrc":"7922:17:1","nodeType":"YulFunctionCall","src":"7922:17:1"},{"arguments":[{"name":"tail","nativeSrc":"7945:4:1","nodeType":"YulIdentifier","src":"7945:4:1"},{"name":"headStart","nativeSrc":"7951:9:1","nodeType":"YulIdentifier","src":"7951:9:1"}],"functionName":{"name":"sub","nativeSrc":"7941:3:1","nodeType":"YulIdentifier","src":"7941:3:1"},"nativeSrc":"7941:20:1","nodeType":"YulFunctionCall","src":"7941:20:1"}],"functionName":{"name":"mstore","nativeSrc":"7915:6:1","nodeType":"YulIdentifier","src":"7915:6:1"},"nativeSrc":"7915:47:1","nodeType":"YulFunctionCall","src":"7915:47:1"},"nativeSrc":"7915:47:1","nodeType":"YulExpressionStatement","src":"7915:47:1"},{"nativeSrc":"7971:139:1","nodeType":"YulAssignment","src":"7971:139:1","value":{"arguments":[{"name":"tail","nativeSrc":"8105:4:1","nodeType":"YulIdentifier","src":"8105:4:1"}],"functionName":{"name":"abi_encode_t_stringliteral_a2db9b2d459fa87320b1b84f2f349507cfdbf260f36c3b404dc6ea1ada9b5618_to_t_string_memory_ptr_fromStack","nativeSrc":"7979:124:1","nodeType":"YulIdentifier","src":"7979:124:1"},"nativeSrc":"7979:131:1","nodeType":"YulFunctionCall","src":"7979:131:1"},"variableNames":[{"name":"tail","nativeSrc":"7971:4:1","nodeType":"YulIdentifier","src":"7971:4:1"}]}]},"name":"abi_encode_tuple_t_stringliteral_a2db9b2d459fa87320b1b84f2f349507cfdbf260f36c3b404dc6ea1ada9b5618__to_t_string_memory_ptr__fromStack_reversed","nativeSrc":"7698:419:1","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"7849:9:1","nodeType":"YulTypedName","src":"7849:9:1","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"7864:4:1","nodeType":"YulTypedName","src":"7864:4:1","type":""}],"src":"7698:419:1"},{"body":{"nativeSrc":"8151:152:1","nodeType":"YulBlock","src":"8151:152:1","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"8168:1:1","nodeType":"YulLiteral","src":"8168:1:1","type":"","value":"0"},{"kind":"number","nativeSrc":"8171:77:1","nodeType":"YulLiteral","src":"8171:77:1","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nativeSrc":"8161:6:1","nodeType":"YulIdentifier","src":"8161:6:1"},"nativeSrc":"8161:88:1","nodeType":"YulFunctionCall","src":"8161:88:1"},"nativeSrc":"8161:88:1","nodeType":"YulExpressionStatement","src":"8161:88:1"},{"expression":{"arguments":[{"kind":"number","nativeSrc":"8265:1:1","nodeType":"YulLiteral","src":"8265:1:1","type":"","value":"4"},{"kind":"number","nativeSrc":"8268:4:1","nodeType":"YulLiteral","src":"8268:4:1","type":"","value":"0x11"}],"functionName":{"name":"mstore","nativeSrc":"8258:6:1","nodeType":"YulIdentifier","src":"8258:6:1"},"nativeSrc":"8258:15:1","nodeType":"YulFunctionCall","src":"8258:15:1"},"nativeSrc":"8258:15:1","nodeType":"YulExpressionStatement","src":"8258:15:1"},{"expression":{"arguments":[{"kind":"number","nativeSrc":"8289:1:1","nodeType":"YulLiteral","src":"8289:1:1","type":"","value":"0"},{"kind":"number","nativeSrc":"8292:4:1","nodeType":"YulLiteral","src":"8292:4:1","type":"","value":"0x24"}],"functionName":{"name":"revert","nativeSrc":"8282:6:1","nodeType":"YulIdentifier","src":"8282:6:1"},"nativeSrc":"8282:15:1","nodeType":"YulFunctionCall","src":"8282:15:1"},"nativeSrc":"8282:15:1","nodeType":"YulExpressionStatement","src":"8282:15:1"}]},"name":"panic_error_0x11","nativeSrc":"8123:180:1","nodeType":"YulFunctionDefinition","src":"8123:180:1"},{"body":{"nativeSrc":"8354:149:1","nodeType":"YulBlock","src":"8354:149:1","statements":[{"nativeSrc":"8364:25:1","nodeType":"YulAssignment","src":"8364:25:1","value":{"arguments":[{"name":"x","nativeSrc":"8387:1:1","nodeType":"YulIdentifier","src":"8387:1:1"}],"functionName":{"name":"cleanup_t_uint256","nativeSrc":"8369:17:1","nodeType":"YulIdentifier","src":"8369:17:1"},"nativeSrc":"8369:20:1","nodeType":"YulFunctionCall","src":"8369:20:1"},"variableNames":[{"name":"x","nativeSrc":"8364:1:1","nodeType":"YulIdentifier","src":"8364:1:1"}]},{"nativeSrc":"8398:25:1","nodeType":"YulAssignment","src":"8398:25:1","value":{"arguments":[{"name":"y","nativeSrc":"8421:1:1","nodeType":"YulIdentifier","src":"8421:1:1"}],"functionName":{"name":"cleanup_t_uint256","nativeSrc":"8403:17:1","nodeType":"YulIdentifier","src":"8403:17:1"},"nativeSrc":"8403:20:1","nodeType":"YulFunctionCall","src":"8403:20:1"},"variableNames":[{"name":"y","nativeSrc":"8398:1:1","nodeType":"YulIdentifier","src":"8398:1:1"}]},{"nativeSrc":"8432:17:1","nodeType":"YulAssignment","src":"8432:17:1","value":{"arguments":[{"name":"x","nativeSrc":"8444:1:1","nodeType":"YulIdentifier","src":"8444:1:1"},{"name":"y","nativeSrc":"8447:1:1","nodeType":"YulIdentifier","src":"8447:1:1"}],"functionName":{"name":"sub","nativeSrc":"8440:3:1","nodeType":"YulIdentifier","src":"8440:3:1"},"nativeSrc":"8440:9:1","nodeType":"YulFunctionCall","src":"8440:9:1"},"variableNames":[{"name":"diff","nativeSrc":"8432:4:1","nodeType":"YulIdentifier","src":"8432:4:1"}]},{"body":{"nativeSrc":"8474:22:1","nodeType":"YulBlock","src":"8474:22:1","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x11","nativeSrc":"8476:16:1","nodeType":"YulIdentifier","src":"8476:16:1"},"nativeSrc":"8476:18:1","nodeType":"YulFunctionCall","src":"8476:18:1"},"nativeSrc":"8476:18:1","nodeType":"YulExpressionStatement","src":"8476:18:1"}]},"condition":{"arguments":[{"name":"diff","nativeSrc":"8465:4:1","nodeType":"YulIdentifier","src":"8465:4:1"},{"name":"x","nativeSrc":"8471:1:1","nodeType":"YulIdentifier","src":"8471:1:1"}],"functionName":{"name":"gt","nativeSrc":"8462:2:1","nodeType":"YulIdentifier","src":"8462:2:1"},"nativeSrc":"8462:11:1","nodeType":"YulFunctionCall","src":"8462:11:1"},"nativeSrc":"8459:37:1","nodeType":"YulIf","src":"8459:37:1"}]},"name":"checked_sub_t_uint256","nativeSrc":"8309:194:1","nodeType":"YulFunctionDefinition","parameters":[{"name":"x","nativeSrc":"8340:1:1","nodeType":"YulTypedName","src":"8340:1:1","type":""},{"name":"y","nativeSrc":"8343:1:1","nodeType":"YulTypedName","src":"8343:1:1","type":""}],"returnVariables":[{"name":"diff","nativeSrc":"8349:4:1","nodeType":"YulTypedName","src":"8349:4:1","type":""}],"src":"8309:194:1"},{"body":{"nativeSrc":"8553:147:1","nodeType":"YulBlock","src":"8553:147:1","statements":[{"nativeSrc":"8563:25:1","nodeType":"YulAssignment","src":"8563:25:1","value":{"arguments":[{"name":"x","nativeSrc":"8586:1:1","nodeType":"YulIdentifier","src":"8586:1:1"}],"functionName":{"name":"cleanup_t_uint256","nativeSrc":"8568:17:1","nodeType":"YulIdentifier","src":"8568:17:1"},"nativeSrc":"8568:20:1","nodeType":"YulFunctionCall","src":"8568:20:1"},"variableNames":[{"name":"x","nativeSrc":"8563:1:1","nodeType":"YulIdentifier","src":"8563:1:1"}]},{"nativeSrc":"8597:25:1","nodeType":"YulAssignment","src":"8597:25:1","value":{"arguments":[{"name":"y","nativeSrc":"8620:1:1","nodeType":"YulIdentifier","src":"8620:1:1"}],"functionName":{"name":"cleanup_t_uint256","nativeSrc":"8602:17:1","nodeType":"YulIdentifier","src":"8602:17:1"},"nativeSrc":"8602:20:1","nodeType":"YulFunctionCall","src":"8602:20:1"},"variableNames":[{"name":"y","nativeSrc":"8597:1:1","nodeType":"YulIdentifier","src":"8597:1:1"}]},{"nativeSrc":"8631:16:1","nodeType":"YulAssignment","src":"8631:16:1","value":{"arguments":[{"name":"x","nativeSrc":"8642:1:1","nodeType":"YulIdentifier","src":"8642:1:1"},{"name":"y","nativeSrc":"8645:1:1","nodeType":"YulIdentifier","src":"8645:1:1"}],"functionName":{"name":"add","nativeSrc":"8638:3:1","nodeType":"YulIdentifier","src":"8638:3:1"},"nativeSrc":"8638:9:1","nodeType":"YulFunctionCall","src":"8638:9:1"},"variableNames":[{"name":"sum","nativeSrc":"8631:3:1","nodeType":"YulIdentifier","src":"8631:3:1"}]},{"body":{"nativeSrc":"8671:22:1","nodeType":"YulBlock","src":"8671:22:1","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x11","nativeSrc":"8673:16:1","nodeType":"YulIdentifier","src":"8673:16:1"},"nativeSrc":"8673:18:1","nodeType":"YulFunctionCall","src":"8673:18:1"},"nativeSrc":"8673:18:1","nodeType":"YulExpressionStatement","src":"8673:18:1"}]},"condition":{"arguments":[{"name":"x","nativeSrc":"8663:1:1","nodeType":"YulIdentifier","src":"8663:1:1"},{"name":"sum","nativeSrc":"8666:3:1","nodeType":"YulIdentifier","src":"8666:3:1"}],"functionName":{"name":"gt","nativeSrc":"8660:2:1","nodeType":"YulIdentifier","src":"8660:2:1"},"nativeSrc":"8660:10:1","nodeType":"YulFunctionCall","src":"8660:10:1"},"nativeSrc":"8657:36:1","nodeType":"YulIf","src":"8657:36:1"}]},"name":"checked_add_t_uint256","nativeSrc":"8509:191:1","nodeType":"YulFunctionDefinition","parameters":[{"name":"x","nativeSrc":"8540:1:1","nodeType":"YulTypedName","src":"8540:1:1","type":""},{"name":"y","nativeSrc":"8543:1:1","nodeType":"YulTypedName","src":"8543:1:1","type":""}],"returnVariables":[{"name":"sum","nativeSrc":"8549:3:1","nodeType":"YulTypedName","src":"8549:3:1","type":""}],"src":"8509:191:1"}]},"contents":"{\n\n    function array_length_t_string_memory_ptr(value) -> length {\n\n        length := mload(value)\n\n    }\n\n    function array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, length) -> updated_pos {\n        mstore(pos, length)\n        updated_pos := add(pos, 0x20)\n    }\n\n    function copy_memory_to_memory_with_cleanup(src, dst, length) {\n        let i := 0\n        for { } lt(i, length) { i := add(i, 32) }\n        {\n            mstore(add(dst, i), mload(add(src, i)))\n        }\n        mstore(add(dst, length), 0)\n    }\n\n    function round_up_to_mul_of_32(value) -> result {\n        result := and(add(value, 31), not(31))\n    }\n\n    function abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack(value, pos) -> end {\n        let length := array_length_t_string_memory_ptr(value)\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, length)\n        copy_memory_to_memory_with_cleanup(add(value, 0x20), pos, length)\n        end := add(pos, round_up_to_mul_of_32(length))\n    }\n\n    function abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack(value0,  tail)\n\n    }\n\n    function allocate_unbounded() -> memPtr {\n        memPtr := mload(64)\n    }\n\n    function revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() {\n        revert(0, 0)\n    }\n\n    function revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db() {\n        revert(0, 0)\n    }\n\n    function cleanup_t_uint160(value) -> cleaned {\n        cleaned := and(value, 0xffffffffffffffffffffffffffffffffffffffff)\n    }\n\n    function cleanup_t_address(value) -> cleaned {\n        cleaned := cleanup_t_uint160(value)\n    }\n\n    function validator_revert_t_address(value) {\n        if iszero(eq(value, cleanup_t_address(value))) { revert(0, 0) }\n    }\n\n    function abi_decode_t_address(offset, end) -> value {\n        value := calldataload(offset)\n        validator_revert_t_address(value)\n    }\n\n    function cleanup_t_uint256(value) -> cleaned {\n        cleaned := value\n    }\n\n    function validator_revert_t_uint256(value) {\n        if iszero(eq(value, cleanup_t_uint256(value))) { revert(0, 0) }\n    }\n\n    function abi_decode_t_uint256(offset, end) -> value {\n        value := calldataload(offset)\n        validator_revert_t_uint256(value)\n    }\n\n    function abi_decode_tuple_t_addresst_uint256(headStart, dataEnd) -> value0, value1 {\n        if slt(sub(dataEnd, headStart), 64) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 32\n\n            value1 := abi_decode_t_uint256(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function cleanup_t_bool(value) -> cleaned {\n        cleaned := iszero(iszero(value))\n    }\n\n    function abi_encode_t_bool_to_t_bool_fromStack(value, pos) {\n        mstore(pos, cleanup_t_bool(value))\n    }\n\n    function abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        abi_encode_t_bool_to_t_bool_fromStack(value0,  add(headStart, 0))\n\n    }\n\n    function abi_encode_t_uint256_to_t_uint256_fromStack(value, pos) {\n        mstore(pos, cleanup_t_uint256(value))\n    }\n\n    function abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        abi_encode_t_uint256_to_t_uint256_fromStack(value0,  add(headStart, 0))\n\n    }\n\n    function abi_decode_tuple_t_addresst_addresst_uint256(headStart, dataEnd) -> value0, value1, value2 {\n        if slt(sub(dataEnd, headStart), 96) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 32\n\n            value1 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 64\n\n            value2 := abi_decode_t_uint256(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function cleanup_t_uint8(value) -> cleaned {\n        cleaned := and(value, 0xff)\n    }\n\n    function abi_encode_t_uint8_to_t_uint8_fromStack(value, pos) {\n        mstore(pos, cleanup_t_uint8(value))\n    }\n\n    function abi_encode_tuple_t_uint8__to_t_uint8__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        abi_encode_t_uint8_to_t_uint8_fromStack(value0,  add(headStart, 0))\n\n    }\n\n    function abi_decode_tuple_t_address(headStart, dataEnd) -> value0 {\n        if slt(sub(dataEnd, headStart), 32) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function abi_decode_tuple_t_addresst_address(headStart, dataEnd) -> value0, value1 {\n        if slt(sub(dataEnd, headStart), 64) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 32\n\n            value1 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function panic_error_0x22() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x22)\n        revert(0, 0x24)\n    }\n\n    function extract_byte_array_length(data) -> length {\n        length := div(data, 2)\n        let outOfPlaceEncoding := and(data, 1)\n        if iszero(outOfPlaceEncoding) {\n            length := and(length, 0x7f)\n        }\n\n        if eq(outOfPlaceEncoding, lt(length, 32)) {\n            panic_error_0x22()\n        }\n    }\n\n    function store_literal_in_memory_a6d1ff1db3d0b9b8c60e12ccab5ce7431be9a2cd0518ac362f1c5c1e0b1cefee(memPtr) {\n\n        mstore(add(memPtr, 0), \"insufficient balance\")\n\n    }\n\n    function abi_encode_t_stringliteral_a6d1ff1db3d0b9b8c60e12ccab5ce7431be9a2cd0518ac362f1c5c1e0b1cefee_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 20)\n        store_literal_in_memory_a6d1ff1db3d0b9b8c60e12ccab5ce7431be9a2cd0518ac362f1c5c1e0b1cefee(pos)\n        end := add(pos, 32)\n    }\n\n    function abi_encode_tuple_t_stringliteral_a6d1ff1db3d0b9b8c60e12ccab5ce7431be9a2cd0518ac362f1c5c1e0b1cefee__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_a6d1ff1db3d0b9b8c60e12ccab5ce7431be9a2cd0518ac362f1c5c1e0b1cefee_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function store_literal_in_memory_a2db9b2d459fa87320b1b84f2f349507cfdbf260f36c3b404dc6ea1ada9b5618(memPtr) {\n\n        mstore(add(memPtr, 0), \"exceeds allowance\")\n\n    }\n\n    function abi_encode_t_stringliteral_a2db9b2d459fa87320b1b84f2f349507cfdbf260f36c3b404dc6ea1ada9b5618_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 17)\n        store_literal_in_memory_a2db9b2d459fa87320b1b84f2f349507cfdbf260f36c3b404dc6ea1ada9b5618(pos)\n        end := add(pos, 32)\n    }\n\n    function abi_encode_tuple_t_stringliteral_a2db9b2d459fa87320b1b84f2f349507cfdbf260f36c3b404dc6ea1ada9b5618__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_a2db9b2d459fa87320b1b84f2f349507cfdbf260f36c3b404dc6ea1ada9b5618_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function panic_error_0x11() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x11)\n        revert(0, 0x24)\n    }\n\n    function checked_sub_t_uint256(x, y) -> diff {\n        x := cleanup_t_uint256(x)\n        y := cleanup_t_uint256(y)\n        diff := sub(x, y)\n\n        if gt(diff, x) { panic_error_0x11() }\n\n    }\n\n    function checked_add_t_uint256(x, y) -> sum {\n        x := cleanup_t_uint256(x)\n        y := cleanup_t_uint256(y)\n        sum := add(x, y)\n\n        if gt(x, sum) { panic_error_0x11() }\n\n    }\n\n}\n","id":1,"language":"Yul","name":"#utility.yul"}],"immutableReferences":{},"linkReferences":{},"object":"608060405234801561001057600080fd5b506004361061009e5760003560e01c806340c10f191161006657806340c10f191461015d57806370a082311461017957806395d89b41146101a9578063a9059cbb146101c7578063dd62ed3e146101f75761009e565b806306fdde03146100a3578063095ea7b3146100c157806318160ddd146100f157806323b872dd1461010f578063313ce5671461013f575b600080fd5b6100ab610227565b6040516100b89190610a85565b60405180910390f35b6100db60048036038101906100d69190610b40565b6102b5565b6040516100e89190610b9b565b60405180910390f35b6100f96103a7565b6040516101069190610bc5565b60405180910390f35b61012960048036038101906101249190610be0565b6103ad565b6040516101369190610b9b565b60405180910390f35b61014761069f565b6040516101549190610c4f565b60405180910390f35b61017760048036038101906101729190610b40565b6106b2565b005b610193600480360381019061018e9190610c6a565b61078b565b6040516101a09190610bc5565b60405180910390f35b6101b16107a3565b6040516101be9190610a85565b60405180910390f35b6101e160048036038101906101dc9190610b40565b610831565b6040516101ee9190610b9b565b60405180910390f35b610211600480360381019061020c9190610c97565b6109d0565b60405161021e9190610bc5565b60405180910390f35b6000805461023490610d06565b80601f016020809104026020016040519081016040528092919081815260200182805461026090610d06565b80156102ad5780601f10610282576101008083540402835291602001916102ad565b820191906000526020600020905b81548152906001019060200180831161029057829003601f168201915b505050505081565b600081600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925846040516103959190610bc5565b60405180910390a36001905092915050565b60035481565b600081600460008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020541015610431576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161042890610d83565b60405180910390fd5b81600560008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205410156104f0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104e790610def565b60405180910390fd5b81600460008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461053f9190610e3e565b9250508190555081600460008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546105959190610e72565b9250508190555081600560008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546106289190610e3e565b925050819055508273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8460405161068c9190610bc5565b60405180910390a3600190509392505050565b600260009054906101000a900460ff1681565b80600460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546107019190610e72565b92505081905550806003600082825461071a9190610e72565b925050819055508173ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8360405161077f9190610bc5565b60405180910390a35050565b60046020528060005260406000206000915090505481565b600180546107b090610d06565b80601f01602080910402602001604051908101604052809291908181526020018280546107dc90610d06565b80156108295780601f106107fe57610100808354040283529160200191610829565b820191906000526020600020905b81548152906001019060200180831161080c57829003601f168201915b505050505081565b600081600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205410156108b5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108ac90610d83565b60405180910390fd5b81600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546109049190610e3e565b9250508190555081600460008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461095a9190610e72565b925050819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040516109be9190610bc5565b60405180910390a36001905092915050565b6005602052816000526040600020602052806000526040600020600091509150505481565b600081519050919050565b600082825260208201905092915050565b60005b83811015610a2f578082015181840152602081019050610a14565b60008484015250505050565b6000601f19601f8301169050919050565b6000610a57826109f5565b610a618185610a00565b9350610a71818560208601610a11565b610a7a81610a3b565b840191505092915050565b60006020820190508181036000830152610a9f8184610a4c565b905092915050565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610ad782610aac565b9050919050565b610ae781610acc565b8114610af257600080fd5b50565b600081359050610b0481610ade565b92915050565b6000819050919050565b610b1d81610b0a565b8114610b2857600080fd5b50565b600081359050610b3a81610b14565b92915050565b60008060408385031215610b5757610b56610aa7565b5b6000610b6585828601610af5565b9250506020610b7685828601610b2b565b9150509250929050565b60008115159050919050565b610b9581610b80565b82525050565b6000602082019050610bb06000830184610b8c565b92915050565b610bbf81610b0a565b82525050565b6000602082019050610bda6000830184610bb6565b92915050565b600080600060608486031215610bf957610bf8610aa7565b5b6000610c0786828701610af5565b9350506020610c1886828701610af5565b9250506040610c2986828701610b2b565b9150509250925092565b600060ff82169050919050565b610c4981610c33565b82525050565b6000602082019050610c646000830184610c40565b92915050565b600060208284031215610c8057610c7f610aa7565b5b6000610c8e84828501610af5565b91505092915050565b60008060408385031215610cae57610cad610aa7565b5b6000610cbc85828601610af5565b9250506020610ccd85828601610af5565b9150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b60006002820490506001821680610d1e57607f821691505b602082108103610d3157610d30610cd7565b5b50919050565b7f696e73756666696369656e742062616c616e6365000000000000000000000000600082015250565b6000610d6d601483610a00565b9150610d7882610d37565b602082019050919050565b60006020820190508181036000830152610d9c81610d60565b9050919050565b7f6578636565647320616c6c6f77616e6365000000000000000000000000000000600082015250565b6000610dd9601183610a00565b9150610de482610da3565b602082019050919050565b60006020820190508181036000830152610e0881610dcc565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610e4982610b0a565b9150610e5483610b0a565b9250828203905081811115610e6c57610e6b610e0f565b5b92915050565b6000610e7d82610b0a565b9150610e8883610b0a565b9250828201905080821115610ea057610e9f610e0f565b5b9291505056fea264697066735822122041fa693da1c1decf8c3e4932e0c8ae158fb01e9b5107935494ee90fbcdd5f6dc64736f6c63430008180033","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x9E JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x40C10F19 GT PUSH2 0x66 JUMPI DUP1 PUSH4 0x40C10F19 EQ PUSH2 0x15D JUMPI DUP1 PUSH4 0x70A08231 EQ PUSH2 0x179 JUMPI DUP1 PUSH4 0x95D89B41 EQ PUSH2 0x1A9 JUMPI DUP1 PUSH4 0xA9059CBB EQ PUSH2 0x1C7 JUMPI DUP1 PUSH4 0xDD62ED3E EQ PUSH2 0x1F7 JUMPI PUSH2 0x9E JUMP JUMPDEST DUP1 PUSH4 0x6FDDE03 EQ PUSH2 0xA3 JUMPI DUP1 PUSH4 0x95EA7B3 EQ PUSH2 0xC1 JUMPI DUP1 PUSH4 0x18160DDD EQ PUSH2 0xF1 JUMPI DUP1 PUSH4 0x23B872DD EQ PUSH2 0x10F JUMPI DUP1 PUSH4 0x313CE567 EQ PUSH2 0x13F JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xAB PUSH2 0x227 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xB8 SWAP2 SWAP1 PUSH2 0xA85 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0xDB PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0xD6 SWAP2 SWAP1 PUSH2 0xB40 JUMP JUMPDEST PUSH2 0x2B5 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xE8 SWAP2 SWAP1 PUSH2 0xB9B JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0xF9 PUSH2 0x3A7 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x106 SWAP2 SWAP1 PUSH2 0xBC5 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x129 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x124 SWAP2 SWAP1 PUSH2 0xBE0 JUMP JUMPDEST PUSH2 0x3AD JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x136 SWAP2 SWAP1 PUSH2 0xB9B JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x147 PUSH2 0x69F JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x154 SWAP2 SWAP1 PUSH2 0xC4F JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x177 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x172 SWAP2 SWAP1 PUSH2 0xB40 JUMP JUMPDEST PUSH2 0x6B2 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x193 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x18E SWAP2 SWAP1 PUSH2 0xC6A JUMP JUMPDEST PUSH2 0x78B JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1A0 SWAP2 SWAP1 PUSH2 0xBC5 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x1B1 PUSH2 0x7A3 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1BE SWAP2 SWAP1 PUSH2 0xA85 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x1E1 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x1DC SWAP2 SWAP1 PUSH2 0xB40 JUMP JUMPDEST PUSH2 0x831 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1EE SWAP2 SWAP1 PUSH2 0xB9B JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x211 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x20C SWAP2 SWAP1 PUSH2 0xC97 JUMP JUMPDEST PUSH2 0x9D0 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x21E SWAP2 SWAP1 PUSH2 0xBC5 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH2 0x234 SWAP1 PUSH2 0xD06 JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x260 SWAP1 PUSH2 0xD06 JUMP JUMPDEST DUP1 ISZERO PUSH2 0x2AD JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x282 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x2AD JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x290 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP DUP2 JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x5 PUSH1 0x0 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP2 SWAP1 SSTORE POP DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x8C5BE1E5EBEC7D5BD14F71427D1E84F3DD0314C0F7B2291E5B200AC8C7C3B925 DUP5 PUSH1 0x40 MLOAD PUSH2 0x395 SWAP2 SWAP1 PUSH2 0xBC5 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 PUSH1 0x1 SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x3 SLOAD DUP2 JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x4 PUSH1 0x0 DUP7 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD LT ISZERO PUSH2 0x431 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x428 SWAP1 PUSH2 0xD83 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP2 PUSH1 0x5 PUSH1 0x0 DUP7 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD LT ISZERO PUSH2 0x4F0 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x4E7 SWAP1 PUSH2 0xDEF JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP2 PUSH1 0x4 PUSH1 0x0 DUP7 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP3 DUP3 SLOAD PUSH2 0x53F SWAP2 SWAP1 PUSH2 0xE3E JUMP JUMPDEST SWAP3 POP POP DUP2 SWAP1 SSTORE POP DUP2 PUSH1 0x4 PUSH1 0x0 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP3 DUP3 SLOAD PUSH2 0x595 SWAP2 SWAP1 PUSH2 0xE72 JUMP JUMPDEST SWAP3 POP POP DUP2 SWAP1 SSTORE POP DUP2 PUSH1 0x5 PUSH1 0x0 DUP7 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP3 DUP3 SLOAD PUSH2 0x628 SWAP2 SWAP1 PUSH2 0xE3E JUMP JUMPDEST SWAP3 POP POP DUP2 SWAP1 SSTORE POP DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF DUP5 PUSH1 0x40 MLOAD PUSH2 0x68C SWAP2 SWAP1 PUSH2 0xBC5 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 PUSH1 0x1 SWAP1 POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x2 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND DUP2 JUMP JUMPDEST DUP1 PUSH1 0x4 PUSH1 0x0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP3 DUP3 SLOAD PUSH2 0x701 SWAP2 SWAP1 PUSH2 0xE72 JUMP JUMPDEST SWAP3 POP POP DUP2 SWAP1 SSTORE POP DUP1 PUSH1 0x3 PUSH1 0x0 DUP3 DUP3 SLOAD PUSH2 0x71A SWAP2 SWAP1 PUSH2 0xE72 JUMP JUMPDEST SWAP3 POP POP DUP2 SWAP1 SSTORE POP DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF DUP4 PUSH1 0x40 MLOAD PUSH2 0x77F SWAP2 SWAP1 PUSH2 0xBC5 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP JUMP JUMPDEST PUSH1 0x4 PUSH1 0x20 MSTORE DUP1 PUSH1 0x0 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP2 POP SWAP1 POP SLOAD DUP2 JUMP JUMPDEST PUSH1 0x1 DUP1 SLOAD PUSH2 0x7B0 SWAP1 PUSH2 0xD06 JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x7DC SWAP1 PUSH2 0xD06 JUMP JUMPDEST DUP1 ISZERO PUSH2 0x829 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x7FE JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x829 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x80C JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP DUP2 JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x4 PUSH1 0x0 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD LT ISZERO PUSH2 0x8B5 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x8AC SWAP1 PUSH2 0xD83 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP2 PUSH1 0x4 PUSH1 0x0 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP3 DUP3 SLOAD PUSH2 0x904 SWAP2 SWAP1 PUSH2 0xE3E JUMP JUMPDEST SWAP3 POP POP DUP2 SWAP1 SSTORE POP DUP2 PUSH1 0x4 PUSH1 0x0 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP3 DUP3 SLOAD PUSH2 0x95A SWAP2 SWAP1 PUSH2 0xE72 JUMP JUMPDEST SWAP3 POP POP DUP2 SWAP1 SSTORE POP DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF DUP5 PUSH1 0x40 MLOAD PUSH2 0x9BE SWAP2 SWAP1 PUSH2 0xBC5 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 PUSH1 0x1 SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x5 PUSH1 0x20 MSTORE DUP2 PUSH1 0x0 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 PUSH1 0x20 MSTORE DUP1 PUSH1 0x0 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP2 POP SWAP2 POP POP SLOAD DUP2 JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0xA2F JUMPI DUP1 DUP3 ADD MLOAD DUP2 DUP5 ADD MSTORE PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH2 0xA14 JUMP JUMPDEST PUSH1 0x0 DUP5 DUP5 ADD MSTORE POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1F NOT PUSH1 0x1F DUP4 ADD AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xA57 DUP3 PUSH2 0x9F5 JUMP JUMPDEST PUSH2 0xA61 DUP2 DUP6 PUSH2 0xA00 JUMP JUMPDEST SWAP4 POP PUSH2 0xA71 DUP2 DUP6 PUSH1 0x20 DUP7 ADD PUSH2 0xA11 JUMP JUMPDEST PUSH2 0xA7A DUP2 PUSH2 0xA3B JUMP JUMPDEST DUP5 ADD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0xA9F DUP2 DUP5 PUSH2 0xA4C JUMP JUMPDEST SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xAD7 DUP3 PUSH2 0xAAC JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0xAE7 DUP2 PUSH2 0xACC JUMP JUMPDEST DUP2 EQ PUSH2 0xAF2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0xB04 DUP2 PUSH2 0xADE JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0xB1D DUP2 PUSH2 0xB0A JUMP JUMPDEST DUP2 EQ PUSH2 0xB28 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0xB3A DUP2 PUSH2 0xB14 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0xB57 JUMPI PUSH2 0xB56 PUSH2 0xAA7 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0xB65 DUP6 DUP3 DUP7 ADD PUSH2 0xAF5 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0xB76 DUP6 DUP3 DUP7 ADD PUSH2 0xB2B JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 ISZERO ISZERO SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0xB95 DUP2 PUSH2 0xB80 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0xBB0 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0xB8C JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0xBBF DUP2 PUSH2 0xB0A JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0xBDA PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0xBB6 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0xBF9 JUMPI PUSH2 0xBF8 PUSH2 0xAA7 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0xC07 DUP7 DUP3 DUP8 ADD PUSH2 0xAF5 JUMP JUMPDEST SWAP4 POP POP PUSH1 0x20 PUSH2 0xC18 DUP7 DUP3 DUP8 ADD PUSH2 0xAF5 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x40 PUSH2 0xC29 DUP7 DUP3 DUP8 ADD PUSH2 0xB2B JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 PUSH1 0xFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0xC49 DUP2 PUSH2 0xC33 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0xC64 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0xC40 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xC80 JUMPI PUSH2 0xC7F PUSH2 0xAA7 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0xC8E DUP5 DUP3 DUP6 ADD PUSH2 0xAF5 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0xCAE JUMPI PUSH2 0xCAD PUSH2 0xAA7 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0xCBC DUP6 DUP3 DUP7 ADD PUSH2 0xAF5 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0xCCD DUP6 DUP3 DUP7 ADD PUSH2 0xAF5 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x2 DUP3 DIV SWAP1 POP PUSH1 0x1 DUP3 AND DUP1 PUSH2 0xD1E JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 SUB PUSH2 0xD31 JUMPI PUSH2 0xD30 PUSH2 0xCD7 JUMP JUMPDEST JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x696E73756666696369656E742062616C616E6365000000000000000000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xD6D PUSH1 0x14 DUP4 PUSH2 0xA00 JUMP JUMPDEST SWAP2 POP PUSH2 0xD78 DUP3 PUSH2 0xD37 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0xD9C DUP2 PUSH2 0xD60 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x6578636565647320616C6C6F77616E6365000000000000000000000000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xDD9 PUSH1 0x11 DUP4 PUSH2 0xA00 JUMP JUMPDEST SWAP2 POP PUSH2 0xDE4 DUP3 PUSH2 0xDA3 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0xE08 DUP2 PUSH2 0xDCC JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH2 0xE49 DUP3 PUSH2 0xB0A JUMP JUMPDEST SWAP2 POP PUSH2 0xE54 DUP4 PUSH2 0xB0A JUMP JUMPDEST SWAP3 POP DUP3 DUP3 SUB SWAP1 POP DUP2 DUP2 GT ISZERO PUSH2 0xE6C JUMPI PUSH2 0xE6B PUSH2 0xE0F JUMP JUMPDEST JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xE7D DUP3 PUSH2 0xB0A JUMP JUMPDEST SWAP2 POP PUSH2 0xE88 DUP4 PUSH2 0xB0A JUMP JUMPDEST SWAP3 POP DUP3 DUP3 ADD SWAP1 POP DUP1 DUP3 GT ISZERO PUSH2 0xEA0 JUMPI PUSH2 0xE9F PUSH2 0xE0F JUMP JUMPDEST JUMPDEST SWAP3 SWAP2 POP POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 COINBASE STATICCALL PUSH10 0x3DA1C1DECF8C3E4932E0 0xC8 0xAE ISZERO DUP16 0xB0 0x1E SWAP12 MLOAD SMOD SWAP4 SLOAD SWAP5 0xEE SWAP1 0xFB 0xCD 0xD5 0xF6 0xDC PUSH5 0x736F6C6343 STOP ADDMOD XOR STOP CALLER ","sourceMap":"58:1667:0:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;83:30;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;926:206;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;185:26;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;1138:416;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;153:26;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;1560:163;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;217:44;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;119:28;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;626:294;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;267:64;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;83:30;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;926:206::-;991:12;1048:5;1015:9;:21;1025:10;1015:21;;;;;;;;;;;;;;;:30;1037:7;1015:30;;;;;;;;;;;;;;;:38;;;;1089:7;1068:36;;1077:10;1068:36;;;1098:5;1068:36;;;;;;:::i;:::-;;;;;;;;1121:4;1114:11;;926:206;;;;:::o;185:26::-;;;;:::o;1138:416::-;1217:12;1268:5;1249:9;:15;1259:4;1249:15;;;;;;;;;;;;;;;;:24;;1241:57;;;;;;;;;;;;:::i;:::-;;;;;;;;;1347:5;1316:9;:15;1326:4;1316:15;;;;;;;;;;;;;;;:27;1332:10;1316:27;;;;;;;;;;;;;;;;:36;;1308:66;;;;;;;;;;;;:::i;:::-;;;;;;;;;1403:5;1384:9;:15;1394:4;1384:15;;;;;;;;;;;;;;;;:24;;;;;;;:::i;:::-;;;;;;;;1435:5;1418:9;:13;1428:2;1418:13;;;;;;;;;;;;;;;;:22;;;;;;;:::i;:::-;;;;;;;;1481:5;1450:9;:15;1460:4;1450:15;;;;;;;;;;;;;;;:27;1466:10;1450:27;;;;;;;;;;;;;;;;:36;;;;;;;:::i;:::-;;;;;;;;1516:2;1501:25;;1510:4;1501:25;;;1520:5;1501:25;;;;;;:::i;:::-;;;;;;;;1543:4;1536:11;;1138:416;;;;;:::o;153:26::-;;;;;;;;;;;;;:::o;1560:163::-;1635:5;1618:9;:13;1628:2;1618:13;;;;;;;;;;;;;;;;:22;;;;;;;:::i;:::-;;;;;;;;1665:5;1650:11;;:20;;;;;;;:::i;:::-;;;;;;;;1706:2;1685:31;;1702:1;1685:31;;;1710:5;1685:31;;;;;;:::i;:::-;;;;;;;;1560:163;;:::o;217:44::-;;;;;;;;;;;;;;;;;:::o;119:28::-;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;626:294::-;687:12;744:5;719:9;:21;729:10;719:21;;;;;;;;;;;;;;;;:30;;711:63;;;;;;;;;;;;:::i;:::-;;;;;;;;;809:5;784:9;:21;794:10;784:21;;;;;;;;;;;;;;;;:30;;;;;;;:::i;:::-;;;;;;;;841:5;824:9;:13;834:2;824:13;;;;;;;;;;;;;;;;:22;;;;;;;:::i;:::-;;;;;;;;882:2;861:31;;870:10;861:31;;;886:5;861:31;;;;;;:::i;:::-;;;;;;;;909:4;902:11;;626:294;;;;:::o;267:64::-;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;7:99:1:-;59:6;93:5;87:12;77:22;;7:99;;;:::o;112:169::-;196:11;230:6;225:3;218:19;270:4;265:3;261:14;246:29;;112:169;;;;:::o;287:246::-;368:1;378:113;392:6;389:1;386:13;378:113;;;477:1;472:3;468:11;462:18;458:1;453:3;449:11;442:39;414:2;411:1;407:10;402:15;;378:113;;;525:1;516:6;511:3;507:16;500:27;349:184;287:246;;;:::o;539:102::-;580:6;631:2;627:7;622:2;615:5;611:14;607:28;597:38;;539:102;;;:::o;647:377::-;735:3;763:39;796:5;763:39;:::i;:::-;818:71;882:6;877:3;818:71;:::i;:::-;811:78;;898:65;956:6;951:3;944:4;937:5;933:16;898:65;:::i;:::-;988:29;1010:6;988:29;:::i;:::-;983:3;979:39;972:46;;739:285;647:377;;;;:::o;1030:313::-;1143:4;1181:2;1170:9;1166:18;1158:26;;1230:9;1224:4;1220:20;1216:1;1205:9;1201:17;1194:47;1258:78;1331:4;1322:6;1258:78;:::i;:::-;1250:86;;1030:313;;;;:::o;1430:117::-;1539:1;1536;1529:12;1676:126;1713:7;1753:42;1746:5;1742:54;1731:65;;1676:126;;;:::o;1808:96::-;1845:7;1874:24;1892:5;1874:24;:::i;:::-;1863:35;;1808:96;;;:::o;1910:122::-;1983:24;2001:5;1983:24;:::i;:::-;1976:5;1973:35;1963:63;;2022:1;2019;2012:12;1963:63;1910:122;:::o;2038:139::-;2084:5;2122:6;2109:20;2100:29;;2138:33;2165:5;2138:33;:::i;:::-;2038:139;;;;:::o;2183:77::-;2220:7;2249:5;2238:16;;2183:77;;;:::o;2266:122::-;2339:24;2357:5;2339:24;:::i;:::-;2332:5;2329:35;2319:63;;2378:1;2375;2368:12;2319:63;2266:122;:::o;2394:139::-;2440:5;2478:6;2465:20;2456:29;;2494:33;2521:5;2494:33;:::i;:::-;2394:139;;;;:::o;2539:474::-;2607:6;2615;2664:2;2652:9;2643:7;2639:23;2635:32;2632:119;;;2670:79;;:::i;:::-;2632:119;2790:1;2815:53;2860:7;2851:6;2840:9;2836:22;2815:53;:::i;:::-;2805:63;;2761:117;2917:2;2943:53;2988:7;2979:6;2968:9;2964:22;2943:53;:::i;:::-;2933:63;;2888:118;2539:474;;;;;:::o;3019:90::-;3053:7;3096:5;3089:13;3082:21;3071:32;;3019:90;;;:::o;3115:109::-;3196:21;3211:5;3196:21;:::i;:::-;3191:3;3184:34;3115:109;;:::o;3230:210::-;3317:4;3355:2;3344:9;3340:18;3332:26;;3368:65;3430:1;3419:9;3415:17;3406:6;3368:65;:::i;:::-;3230:210;;;;:::o;3446:118::-;3533:24;3551:5;3533:24;:::i;:::-;3528:3;3521:37;3446:118;;:::o;3570:222::-;3663:4;3701:2;3690:9;3686:18;3678:26;;3714:71;3782:1;3771:9;3767:17;3758:6;3714:71;:::i;:::-;3570:222;;;;:::o;3798:619::-;3875:6;3883;3891;3940:2;3928:9;3919:7;3915:23;3911:32;3908:119;;;3946:79;;:::i;:::-;3908:119;4066:1;4091:53;4136:7;4127:6;4116:9;4112:22;4091:53;:::i;:::-;4081:63;;4037:117;4193:2;4219:53;4264:7;4255:6;4244:9;4240:22;4219:53;:::i;:::-;4209:63;;4164:118;4321:2;4347:53;4392:7;4383:6;4372:9;4368:22;4347:53;:::i;:::-;4337:63;;4292:118;3798:619;;;;;:::o;4423:86::-;4458:7;4498:4;4491:5;4487:16;4476:27;;4423:86;;;:::o;4515:112::-;4598:22;4614:5;4598:22;:::i;:::-;4593:3;4586:35;4515:112;;:::o;4633:214::-;4722:4;4760:2;4749:9;4745:18;4737:26;;4773:67;4837:1;4826:9;4822:17;4813:6;4773:67;:::i;:::-;4633:214;;;;:::o;4853:329::-;4912:6;4961:2;4949:9;4940:7;4936:23;4932:32;4929:119;;;4967:79;;:::i;:::-;4929:119;5087:1;5112:53;5157:7;5148:6;5137:9;5133:22;5112:53;:::i;:::-;5102:63;;5058:117;4853:329;;;;:::o;5188:474::-;5256:6;5264;5313:2;5301:9;5292:7;5288:23;5284:32;5281:119;;;5319:79;;:::i;:::-;5281:119;5439:1;5464:53;5509:7;5500:6;5489:9;5485:22;5464:53;:::i;:::-;5454:63;;5410:117;5566:2;5592:53;5637:7;5628:6;5617:9;5613:22;5592:53;:::i;:::-;5582:63;;5537:118;5188:474;;;;;:::o;5668:180::-;5716:77;5713:1;5706:88;5813:4;5810:1;5803:15;5837:4;5834:1;5827:15;5854:320;5898:6;5935:1;5929:4;5925:12;5915:22;;5982:1;5976:4;5972:12;6003:18;5993:81;;6059:4;6051:6;6047:17;6037:27;;5993:81;6121:2;6113:6;6110:14;6090:18;6087:38;6084:84;;6140:18;;:::i;:::-;6084:84;5905:269;5854:320;;;:::o;6180:170::-;6320:22;6316:1;6308:6;6304:14;6297:46;6180:170;:::o;6356:366::-;6498:3;6519:67;6583:2;6578:3;6519:67;:::i;:::-;6512:74;;6595:93;6684:3;6595:93;:::i;:::-;6713:2;6708:3;6704:12;6697:19;;6356:366;;;:::o;6728:419::-;6894:4;6932:2;6921:9;6917:18;6909:26;;6981:9;6975:4;6971:20;6967:1;6956:9;6952:17;6945:47;7009:131;7135:4;7009:131;:::i;:::-;7001:139;;6728:419;;;:::o;7153:167::-;7293:19;7289:1;7281:6;7277:14;7270:43;7153:167;:::o;7326:366::-;7468:3;7489:67;7553:2;7548:3;7489:67;:::i;:::-;7482:74;;7565:93;7654:3;7565:93;:::i;:::-;7683:2;7678:3;7674:12;7667:19;;7326:366;;;:::o;7698:419::-;7864:4;7902:2;7891:9;7887:18;7879:26;;7951:9;7945:4;7941:20;7937:1;7926:9;7922:17;7915:47;7979:131;8105:4;7979:131;:::i;:::-;7971:139;;7698:419;;;:::o;8123:180::-;8171:77;8168:1;8161:88;8268:4;8265:1;8258:15;8292:4;8289:1;8282:15;8309:194;8349:4;8369:20;8387:1;8369:20;:::i;:::-;8364:25;;8403:20;8421:1;8403:20;:::i;:::-;8398:25;;8447:1;8444;8440:9;8432:17;;8471:1;8465:4;8462:11;8459:37;;;8476:18;;:::i;:::-;8459:37;8309:194;;;;:::o;8509:191::-;8549:3;8568:20;8586:1;8568:20;:::i;:::-;8563:25;;8602:20;8620:1;8602:20;:::i;:::-;8597:25;;8645:1;8642;8638:9;8631:16;;8666:3;8663:1;8660:10;8657:36;;;8673:18;;:::i;:::-;8657:36;8509:191;;;;:::o"},"methodIdentifiers":{"allowance(address,address)":"dd62ed3e","approve(address,uint256)":"095ea7b3","balanceOf(address)":"70a08231","decimals()":"313ce567","mint(address,uint256)":"40c10f19","name()":"06fdde03","symbol()":"95d89b41","totalSupply()":"18160ddd","transfer(address,uint256)":"a9059cbb","transferFrom(address,address,uint256)":"23b872dd"}},"metadata":"{\"compiler\":{\"version\":\"0.8.24+commit.e11b9ed9\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/TestToken.sol\":\"TestToken\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/TestToken.sol\":{\"keccak256\":\"0xcc2f6cad2cc1af002c25976d39fb5ae2ead24e87ab687728297db858d1f4be4b\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://23ec38a5a4a99511d904dd8c40d4ba18a9cc8f523668ffb7bc32b215b8f7c1e2\",\"dweb:/ipfs/QmViwAngs81bYSi4sXoykkrjTdUnhU6gec6dzpCKY5jcCj\"]}},\"version\":1}"}}}}}

================
File: artifacts/contracts/TestToken.sol/TestToken.dbg.json
================
{
  "_format": "hh-sol-dbg-1",
  "buildInfo": "../../build-info/a41376ba4fdfb875b722abb085e468b4.json"
}

================
File: artifacts/contracts/TestToken.sol/TestToken.json
================
{
  "_format": "hh-sol-artifact-1",
  "contractName": "TestToken",
  "sourceName": "contracts/TestToken.sol",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "allowance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [
        {
          "internalType": "bool",
          "name": "success",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "decimals",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "mint",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "transfer",
      "outputs": [
        {
          "internalType": "bool",
          "name": "success",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [
        {
          "internalType": "bool",
          "name": "success",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "bytecode": "0x60806040526040518060400160405280600781526020017f4d79546f6b656e00000000000000000000000000000000000000000000000000815250600090816200004a9190620003b9565b506040518060400160405280600381526020017f4d4350000000000000000000000000000000000000000000000000000000000081525060019081620000919190620003b9565b506012600260006101000a81548160ff021916908360ff160217905550348015620000bb57600080fd5b50600260009054906101000a900460ff1660ff16600a620000dd919062000623565b620f4240620000ed919062000674565b600381905550600354600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550620006bf565b600081519050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b60006002820490506001821680620001c157607f821691505b602082108103620001d757620001d662000179565b5b50919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b600060088302620002417fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8262000202565b6200024d868362000202565b95508019841693508086168417925050509392505050565b6000819050919050565b6000819050919050565b60006200029a620002946200028e8462000265565b6200026f565b62000265565b9050919050565b6000819050919050565b620002b68362000279565b620002ce620002c582620002a1565b8484546200020f565b825550505050565b600090565b620002e5620002d6565b620002f2818484620002ab565b505050565b5b818110156200031a576200030e600082620002db565b600181019050620002f8565b5050565b601f82111562000369576200033381620001dd565b6200033e84620001f2565b810160208510156200034e578190505b620003666200035d85620001f2565b830182620002f7565b50505b505050565b600082821c905092915050565b60006200038e600019846008026200036e565b1980831691505092915050565b6000620003a983836200037b565b9150826002028217905092915050565b620003c4826200013f565b67ffffffffffffffff811115620003e057620003df6200014a565b5b620003ec8254620001a8565b620003f98282856200031e565b600060209050601f8311600181146200043157600084156200041c578287015190505b6200042885826200039b565b86555062000498565b601f1984166200044186620001dd565b60005b828110156200046b5784890151825560018201915060208501945060208101905062000444565b868310156200048b578489015162000487601f8916826200037b565b8355505b6001600288020188555050505b505050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60008160011c9050919050565b6000808291508390505b60018511156200052e57808604811115620005065762000505620004a0565b5b6001851615620005165780820291505b80810290506200052685620004cf565b9450620004e6565b94509492505050565b6000826200054957600190506200061c565b816200055957600090506200061c565b81600181146200057257600281146200057d57620005b3565b60019150506200061c565b60ff841115620005925762000591620004a0565b5b8360020a915084821115620005ac57620005ab620004a0565b5b506200061c565b5060208310610133831016604e8410600b8410161715620005ed5782820a905083811115620005e757620005e6620004a0565b5b6200061c565b620005fc8484846001620004dc565b92509050818404811115620006165762000615620004a0565b5b81810290505b9392505050565b6000620006308262000265565b91506200063d8362000265565b92506200066c7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff848462000537565b905092915050565b6000620006818262000265565b91506200068e8362000265565b92508282026200069e8162000265565b91508282048414831517620006b857620006b7620004a0565b5b5092915050565b610edc80620006cf6000396000f3fe608060405234801561001057600080fd5b506004361061009e5760003560e01c806340c10f191161006657806340c10f191461015d57806370a082311461017957806395d89b41146101a9578063a9059cbb146101c7578063dd62ed3e146101f75761009e565b806306fdde03146100a3578063095ea7b3146100c157806318160ddd146100f157806323b872dd1461010f578063313ce5671461013f575b600080fd5b6100ab610227565b6040516100b89190610a85565b60405180910390f35b6100db60048036038101906100d69190610b40565b6102b5565b6040516100e89190610b9b565b60405180910390f35b6100f96103a7565b6040516101069190610bc5565b60405180910390f35b61012960048036038101906101249190610be0565b6103ad565b6040516101369190610b9b565b60405180910390f35b61014761069f565b6040516101549190610c4f565b60405180910390f35b61017760048036038101906101729190610b40565b6106b2565b005b610193600480360381019061018e9190610c6a565b61078b565b6040516101a09190610bc5565b60405180910390f35b6101b16107a3565b6040516101be9190610a85565b60405180910390f35b6101e160048036038101906101dc9190610b40565b610831565b6040516101ee9190610b9b565b60405180910390f35b610211600480360381019061020c9190610c97565b6109d0565b60405161021e9190610bc5565b60405180910390f35b6000805461023490610d06565b80601f016020809104026020016040519081016040528092919081815260200182805461026090610d06565b80156102ad5780601f10610282576101008083540402835291602001916102ad565b820191906000526020600020905b81548152906001019060200180831161029057829003601f168201915b505050505081565b600081600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925846040516103959190610bc5565b60405180910390a36001905092915050565b60035481565b600081600460008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020541015610431576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161042890610d83565b60405180910390fd5b81600560008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205410156104f0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104e790610def565b60405180910390fd5b81600460008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461053f9190610e3e565b9250508190555081600460008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546105959190610e72565b9250508190555081600560008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546106289190610e3e565b925050819055508273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8460405161068c9190610bc5565b60405180910390a3600190509392505050565b600260009054906101000a900460ff1681565b80600460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546107019190610e72565b92505081905550806003600082825461071a9190610e72565b925050819055508173ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8360405161077f9190610bc5565b60405180910390a35050565b60046020528060005260406000206000915090505481565b600180546107b090610d06565b80601f01602080910402602001604051908101604052809291908181526020018280546107dc90610d06565b80156108295780601f106107fe57610100808354040283529160200191610829565b820191906000526020600020905b81548152906001019060200180831161080c57829003601f168201915b505050505081565b600081600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205410156108b5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108ac90610d83565b60405180910390fd5b81600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546109049190610e3e565b9250508190555081600460008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461095a9190610e72565b925050819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040516109be9190610bc5565b60405180910390a36001905092915050565b6005602052816000526040600020602052806000526040600020600091509150505481565b600081519050919050565b600082825260208201905092915050565b60005b83811015610a2f578082015181840152602081019050610a14565b60008484015250505050565b6000601f19601f8301169050919050565b6000610a57826109f5565b610a618185610a00565b9350610a71818560208601610a11565b610a7a81610a3b565b840191505092915050565b60006020820190508181036000830152610a9f8184610a4c565b905092915050565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610ad782610aac565b9050919050565b610ae781610acc565b8114610af257600080fd5b50565b600081359050610b0481610ade565b92915050565b6000819050919050565b610b1d81610b0a565b8114610b2857600080fd5b50565b600081359050610b3a81610b14565b92915050565b60008060408385031215610b5757610b56610aa7565b5b6000610b6585828601610af5565b9250506020610b7685828601610b2b565b9150509250929050565b60008115159050919050565b610b9581610b80565b82525050565b6000602082019050610bb06000830184610b8c565b92915050565b610bbf81610b0a565b82525050565b6000602082019050610bda6000830184610bb6565b92915050565b600080600060608486031215610bf957610bf8610aa7565b5b6000610c0786828701610af5565b9350506020610c1886828701610af5565b9250506040610c2986828701610b2b565b9150509250925092565b600060ff82169050919050565b610c4981610c33565b82525050565b6000602082019050610c646000830184610c40565b92915050565b600060208284031215610c8057610c7f610aa7565b5b6000610c8e84828501610af5565b91505092915050565b60008060408385031215610cae57610cad610aa7565b5b6000610cbc85828601610af5565b9250506020610ccd85828601610af5565b9150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b60006002820490506001821680610d1e57607f821691505b602082108103610d3157610d30610cd7565b5b50919050565b7f696e73756666696369656e742062616c616e6365000000000000000000000000600082015250565b6000610d6d601483610a00565b9150610d7882610d37565b602082019050919050565b60006020820190508181036000830152610d9c81610d60565b9050919050565b7f6578636565647320616c6c6f77616e6365000000000000000000000000000000600082015250565b6000610dd9601183610a00565b9150610de482610da3565b602082019050919050565b60006020820190508181036000830152610e0881610dcc565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610e4982610b0a565b9150610e5483610b0a565b9250828203905081811115610e6c57610e6b610e0f565b5b92915050565b6000610e7d82610b0a565b9150610e8883610b0a565b9250828201905080821115610ea057610e9f610e0f565b5b9291505056fea264697066735822122041fa693da1c1decf8c3e4932e0c8ae158fb01e9b5107935494ee90fbcdd5f6dc64736f6c63430008180033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061009e5760003560e01c806340c10f191161006657806340c10f191461015d57806370a082311461017957806395d89b41146101a9578063a9059cbb146101c7578063dd62ed3e146101f75761009e565b806306fdde03146100a3578063095ea7b3146100c157806318160ddd146100f157806323b872dd1461010f578063313ce5671461013f575b600080fd5b6100ab610227565b6040516100b89190610a85565b60405180910390f35b6100db60048036038101906100d69190610b40565b6102b5565b6040516100e89190610b9b565b60405180910390f35b6100f96103a7565b6040516101069190610bc5565b60405180910390f35b61012960048036038101906101249190610be0565b6103ad565b6040516101369190610b9b565b60405180910390f35b61014761069f565b6040516101549190610c4f565b60405180910390f35b61017760048036038101906101729190610b40565b6106b2565b005b610193600480360381019061018e9190610c6a565b61078b565b6040516101a09190610bc5565b60405180910390f35b6101b16107a3565b6040516101be9190610a85565b60405180910390f35b6101e160048036038101906101dc9190610b40565b610831565b6040516101ee9190610b9b565b60405180910390f35b610211600480360381019061020c9190610c97565b6109d0565b60405161021e9190610bc5565b60405180910390f35b6000805461023490610d06565b80601f016020809104026020016040519081016040528092919081815260200182805461026090610d06565b80156102ad5780601f10610282576101008083540402835291602001916102ad565b820191906000526020600020905b81548152906001019060200180831161029057829003601f168201915b505050505081565b600081600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925846040516103959190610bc5565b60405180910390a36001905092915050565b60035481565b600081600460008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020541015610431576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161042890610d83565b60405180910390fd5b81600560008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205410156104f0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104e790610def565b60405180910390fd5b81600460008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461053f9190610e3e565b9250508190555081600460008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546105959190610e72565b9250508190555081600560008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546106289190610e3e565b925050819055508273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8460405161068c9190610bc5565b60405180910390a3600190509392505050565b600260009054906101000a900460ff1681565b80600460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546107019190610e72565b92505081905550806003600082825461071a9190610e72565b925050819055508173ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8360405161077f9190610bc5565b60405180910390a35050565b60046020528060005260406000206000915090505481565b600180546107b090610d06565b80601f01602080910402602001604051908101604052809291908181526020018280546107dc90610d06565b80156108295780601f106107fe57610100808354040283529160200191610829565b820191906000526020600020905b81548152906001019060200180831161080c57829003601f168201915b505050505081565b600081600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205410156108b5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108ac90610d83565b60405180910390fd5b81600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546109049190610e3e565b9250508190555081600460008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461095a9190610e72565b925050819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040516109be9190610bc5565b60405180910390a36001905092915050565b6005602052816000526040600020602052806000526040600020600091509150505481565b600081519050919050565b600082825260208201905092915050565b60005b83811015610a2f578082015181840152602081019050610a14565b60008484015250505050565b6000601f19601f8301169050919050565b6000610a57826109f5565b610a618185610a00565b9350610a71818560208601610a11565b610a7a81610a3b565b840191505092915050565b60006020820190508181036000830152610a9f8184610a4c565b905092915050565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610ad782610aac565b9050919050565b610ae781610acc565b8114610af257600080fd5b50565b600081359050610b0481610ade565b92915050565b6000819050919050565b610b1d81610b0a565b8114610b2857600080fd5b50565b600081359050610b3a81610b14565b92915050565b60008060408385031215610b5757610b56610aa7565b5b6000610b6585828601610af5565b9250506020610b7685828601610b2b565b9150509250929050565b60008115159050919050565b610b9581610b80565b82525050565b6000602082019050610bb06000830184610b8c565b92915050565b610bbf81610b0a565b82525050565b6000602082019050610bda6000830184610bb6565b92915050565b600080600060608486031215610bf957610bf8610aa7565b5b6000610c0786828701610af5565b9350506020610c1886828701610af5565b9250506040610c2986828701610b2b565b9150509250925092565b600060ff82169050919050565b610c4981610c33565b82525050565b6000602082019050610c646000830184610c40565b92915050565b600060208284031215610c8057610c7f610aa7565b5b6000610c8e84828501610af5565b91505092915050565b60008060408385031215610cae57610cad610aa7565b5b6000610cbc85828601610af5565b9250506020610ccd85828601610af5565b9150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b60006002820490506001821680610d1e57607f821691505b602082108103610d3157610d30610cd7565b5b50919050565b7f696e73756666696369656e742062616c616e6365000000000000000000000000600082015250565b6000610d6d601483610a00565b9150610d7882610d37565b602082019050919050565b60006020820190508181036000830152610d9c81610d60565b9050919050565b7f6578636565647320616c6c6f77616e6365000000000000000000000000000000600082015250565b6000610dd9601183610a00565b9150610de482610da3565b602082019050919050565b60006020820190508181036000830152610e0881610dcc565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610e4982610b0a565b9150610e5483610b0a565b9250828203905081811115610e6c57610e6b610e0f565b5b92915050565b6000610e7d82610b0a565b9150610e8883610b0a565b9250828201905080821115610ea057610e9f610e0f565b5b9291505056fea264697066735822122041fa693da1c1decf8c3e4932e0c8ae158fb01e9b5107935494ee90fbcdd5f6dc64736f6c63430008180033",
  "linkReferences": {},
  "deployedLinkReferences": {}
}

================
File: cache/solidity-files-cache.json
================
{
  "_format": "hh-sol-cache-2",
  "files": {
    "/Users/dennisonbertram/Develop/ModelContextProtocol/ethers-server/contracts/TestToken.sol": {
      "lastModificationDate": 1736573664417,
      "contentHash": "b37c04f89eeb3d91be4c7e3fa771060d",
      "sourceName": "contracts/TestToken.sol",
      "solcConfig": {
        "version": "0.8.24",
        "settings": {
          "evmVersion": "paris",
          "optimizer": {
            "enabled": false,
            "runs": 200
          },
          "outputSelection": {
            "*": {
              "*": [
                "abi",
                "evm.bytecode",
                "evm.deployedBytecode",
                "evm.methodIdentifiers",
                "metadata"
              ],
              "": [
                "ast"
              ]
            }
          }
        }
      },
      "imports": [],
      "versionPragmas": [
        "^0.8.24"
      ],
      "artifacts": [
        "TestToken"
      ]
    }
  }
}

================
File: contracts/TestToken.sol
================
// SPDX-License-Identifier: MIT
pragma solidity ^0.8.24;

contract TestToken {
    string public name = "MyToken";
    string public symbol = "MCP";
    uint8 public decimals = 18;
    uint256 public totalSupply;
    mapping(address => uint256) public balanceOf;
    mapping(address => mapping(address => uint256)) public allowance;

    event Transfer(address indexed from, address indexed to, uint256 value);
    event Approval(address indexed owner, address indexed spender, uint256 value);

    constructor() {
        totalSupply = 1000000 * 10**uint256(decimals);
        balanceOf[msg.sender] = totalSupply;
    }

    function transfer(address to, uint256 value) public returns (bool success) {
        require(balanceOf[msg.sender] >= value, "insufficient balance");
        balanceOf[msg.sender] -= value;
        balanceOf[to] += value;
        emit Transfer(msg.sender, to, value);
        return true;
    }

    function approve(address spender, uint256 value) public returns (bool success) {
        allowance[msg.sender][spender] = value;
        emit Approval(msg.sender, spender, value);
        return true;
    }

    function transferFrom(address from, address to, uint256 value) public returns (bool success) {
        require(balanceOf[from] >= value, "insufficient balance");
        require(allowance[from][msg.sender] >= value, "exceeds allowance");
        balanceOf[from] -= value;
        balanceOf[to] += value;
        allowance[from][msg.sender] -= value;
        emit Transfer(from, to, value);
        return true;
    }

    function mint(address to, uint256 value) public {
        balanceOf[to] += value;
        totalSupply += value;
        emit Transfer(address(0), to, value);
    }
}

================
File: src/services/ethersService.ts
================
import { ethers } from "ethers";
import { z } from "zod";

export type DefaultProvider = 
    | "mainnet"      // Ethereum Mainnet
    | "sepolia"      // Sepolia Testnet
    | "goerli"       // Goerli Testnet
    | "arbitrum"     // Arbitrum
    | "optimism"     // Optimism
    | "base"         // Base
    | "polygon";     // Polygon

const DEFAULT_PROVIDERS = [
    "mainnet",
    "sepolia",
    "goerli",
    "arbitrum",
    "optimism",
    "base",
    "polygon"
];

// Move addressSchema to class level to avoid duplication
const addressSchema = z.string().regex(/^0x[a-fA-F0-9]{40}$/);

export class EthersService {
    private defaultProvider: ethers.Provider;
    private defaultSigner?: ethers.Signer;

    constructor(provider?: ethers.Provider) {
        this.defaultProvider = provider || new ethers.JsonRpcProvider('http://localhost:8545');
    }

    private getInfuraApiKey(): string {
        const infuraApiKey = process.env.INFURA_API_KEY;
        if (!infuraApiKey) {
            throw new Error("Missing INFURA_API_KEY in environment variables.");
        }
        return infuraApiKey;
    }

    private createInfuraProvider(network: DefaultProvider): ethers.Provider {
        try {
            return new ethers.InfuraProvider(network as ethers.Networkish, this.getInfuraApiKey());
        } catch (error) {
            this.handleProviderError(error, `create Infura provider for network ${network}`);
        }
    }

    private validateRpcUrl(url: string): void {
        if (!url.match(/^https?:\/\/.+$/)) {
            throw new Error(`Invalid RPC URL format: ${url}. URL must start with http:// or https:// and include a valid domain.`);
        }
    }

    private handleProviderError(error: unknown, context: string, details?: Record<string, any>): never {
        if (error instanceof z.ZodError) {
            const firstError = error.errors[0];
            const message = firstError?.message || 'Invalid input format';
            throw new Error(`Invalid input format: ${message}. Expected a valid Ethereum address (0x followed by 40 hexadecimal characters)`);
        }

        // Handle provider errors
        if (error instanceof Error && 'code' in error) {
            throw new Error(`Failed to ${context}: Provider error: ${error.message}`);
        }

        // Generic error with context
        const err = error as Error;
        const errorMessage = err.message || String(error);
        const detailsStr = details ? ` Details: ${Object.entries(details).map(([k, v]) => `${k}=${this.serializeValue(v)}`).join(', ')}` : '';
        throw new Error(`Failed to ${context}: ${errorMessage}${detailsStr}`);
    }

    private serializeValue(value: any): string {
        if (value === undefined) return 'undefined';
        if (value === null) return 'null';
        if (typeof value === 'bigint') return value.toString();
        if (typeof value === 'object') {
            return JSON.stringify(value, (_, v) => 
                typeof v === 'bigint' ? v.toString() : v
            );
        }
        return String(value);
    }

    private getProvider(provider?: string): ethers.Provider {
        if (!provider) {
            return this.defaultProvider;
        }

        // Check if it's a default provider
        if (DEFAULT_PROVIDERS.includes(provider as DefaultProvider)) {
            try {
                return this.createInfuraProvider(provider as DefaultProvider);
            } catch (error) {
                this.handleProviderError(error, `create Infura provider for network ${provider}`);
            }
        }

        // Otherwise treat it as an RPC URL
        if (provider.startsWith("http")) {
            try {
                this.validateRpcUrl(provider);
                return new ethers.JsonRpcProvider(provider);
            } catch (error) {
                this.handleProviderError(error, `create provider with RPC URL ${provider}`);
            }
        }

        throw new Error(
            `Invalid provider: ${provider}. Must be either:\n` +
            `1. A supported network name (${DEFAULT_PROVIDERS.join(", ")})\n` +
            `2. A valid RPC URL starting with http:// or https://`
        );
    }

    async getBalance(address: string, provider?: string): Promise<string> {
        try {
            addressSchema.parse(address);
            const selectedProvider = this.getProvider(provider);
            const balance = await selectedProvider.getBalance(address);
            return ethers.formatEther(balance);
        } catch (error) {
            this.handleProviderError(error, "fetch balance", { address });
        }
    }

    async getERC20Balance(address: string, tokenAddress: string, provider?: string): Promise<string> {
        try {
            addressSchema.parse(address);
            addressSchema.parse(tokenAddress);
            const selectedProvider = this.getProvider(provider);
            const contract = new ethers.Contract(
                tokenAddress,
                [
                    "function balanceOf(address) view returns (uint)",
                    "function decimals() view returns (uint8)"
                ],
                selectedProvider
            );

            const decimals = await contract.decimals();
            const balance = await contract.balanceOf(address);
            return ethers.formatUnits(balance, decimals);
        } catch (error) {
            this.handleProviderError(error, "fetch ERC20 balance", { address, tokenAddress });
        }
    }

    async getTransactionCount(address: string, provider?: string): Promise<number> {
        try {
            addressSchema.parse(address);
            const selectedProvider = this.getProvider(provider);
            const count = await selectedProvider.getTransactionCount(address);
            return count;
        } catch (error) {
            this.handleProviderError(error, "fetch transaction count", { address });
        }
    }

    async getBlockNumber(provider?: string): Promise<number> {
        try {
            const selectedProvider = this.getProvider(provider);
            return await selectedProvider.getBlockNumber();
        } catch (error) {
            this.handleProviderError(error, "fetch latest block number");
        }
    }

    async getBlockDetails(blockTag: string | number, provider?: string): Promise<ethers.Block | null> {
        try {
            const selectedProvider = this.getProvider(provider);
            const block = await selectedProvider.getBlock(blockTag);
            return block;
        } catch (error) {
            this.handleProviderError(error, "fetch block details", { blockTag: String(blockTag) });
        }
    }

    async getTransactionDetails(txHash: string, provider?: string): Promise<ethers.TransactionResponse | null> {
        try {
            const txSchema = z.string().regex(/^0x[a-fA-F0-9]{64}$/);
            txSchema.parse(txHash);
            const selectedProvider = this.getProvider(provider);
            return await selectedProvider.getTransaction(txHash);
        } catch (error) {
            this.handleProviderError(error, "fetch transaction details", { txHash });
        }
    }

    async getGasPrice(provider?: string): Promise<string> {
        try {
            const selectedProvider = this.getProvider(provider);
            const feeData = await selectedProvider.getFeeData();
            return ethers.formatUnits(feeData.gasPrice || 0n, "gwei");
        } catch (error) {
            this.handleProviderError(error, "get gas price");
        }
    }

    async getFeeData(provider?: string): Promise<ethers.FeeData> {
        try {
            const selectedProvider = this.getProvider(provider);
            return await selectedProvider.getFeeData();
        } catch (error) {
            this.handleProviderError(error, "get fee data");
        }
    }

    async getContractCode(address: string, provider?: string): Promise<string | null> {
        try {
            addressSchema.parse(address);
            const selectedProvider = this.getProvider(provider);
            return await selectedProvider.getCode(address);
        } catch (error) {
            this.handleProviderError(error, "get contract bytecode", { address });
        }
    }

    async lookupAddress(address: string, provider?: string): Promise<string | null> {
        try {
            addressSchema.parse(address);
            const selectedProvider = this.getProvider(provider);
            return await selectedProvider.lookupAddress(address);
        } catch (error) {
            this.handleProviderError(error, "look up ENS name for address", { address });
        }
    }

    async resolveName(name: string, provider?: string): Promise<string | null> {
        try {
            const selectedProvider = this.getProvider(provider);
            return await selectedProvider.resolveName(name);
        } catch (error) {
            this.handleProviderError(error, "resolve ENS name", { name });
        }
    }

    formatEther(wei: string | number | bigint): string {
        try {
            return ethers.formatEther(wei);
        } catch (error) {
            this.handleProviderError(error, "format Ether value", { wei: String(wei) });
        }
    }

    parseEther(ether: string): bigint {
        try {
            return ethers.parseEther(ether);
        } catch (error) {
            this.handleProviderError(error, "parse Ether string", { ether });
        }
    }

    formatUnits(value: string | number | bigint, unit: string | number): string {
        try {
            return ethers.formatUnits(value, unit);
        } catch (error) {
            this.handleProviderError(error, "format units", { value: String(value), unit: String(unit) });
        }
    }

    parseUnits(value: string, unit: string | number): bigint {
        try {
            return ethers.parseUnits(value, unit);
        } catch (error) {
            this.handleProviderError(error, "parse units", { value, unit: String(unit) });
        }
    }

    private getSigner(provider?: string): ethers.Signer {
        if (this.defaultSigner) {
            return this.defaultSigner;
        }
        
        const privateKey = process.env.PRIVATE_KEY;
        if (!privateKey) {
            throw new Error("Missing PRIVATE_KEY in environment variables.");
        }
        const selectedProvider = this.getProvider(provider);
        return new ethers.Wallet(privateKey, selectedProvider);
    }

    async createTransaction(to: string, value: string, data?: string, provider?: string): Promise<ethers.TransactionRequest> {
        try {
            addressSchema.parse(to);
            const parsedValue = ethers.parseEther(value);

            const transaction: ethers.TransactionRequest = {
                to,
                value: parsedValue,
                data: data || "0x",
            };
            
            const signer = this.getSigner(provider);
            const populatedTx = await signer.populateTransaction(transaction);
            return populatedTx;
        } catch (error) {
            this.handleProviderError(error, "create transaction", { to, value });
        }
    }

    async estimateGas(tx: ethers.TransactionRequest, provider?: string): Promise<bigint> {
        try {
            const signer = this.getSigner(provider);
            const result = await signer.estimateGas(tx);
            return result;
        } catch (error) {
            this.handleProviderError(error, "estimate gas", { tx: JSON.stringify(tx) });
        }
    }

    async sendTransaction(
        toOrTx: string | ethers.TransactionRequest,
        value?: string,
        data?: string,
        provider?: string
    ): Promise<ethers.TransactionResponse> {
        try {
            let tx: ethers.TransactionRequest;
            
            if (typeof toOrTx === 'string') {
                // Handle old-style parameter based call
                addressSchema.parse(toOrTx);
                tx = {
                    to: toOrTx,
                    value: value ? ethers.parseEther(value) : undefined,
                    data: data || "0x"
                };
            } else {
                // Handle object-style call
                if (toOrTx.to) {
                    addressSchema.parse(toOrTx.to);
                }
                tx = toOrTx;
            }

            const signer = this.getSigner(provider);
            return await signer.sendTransaction(tx);
        } catch (error) {
            this.handleProviderError(error, "send transaction", { tx: toOrTx });
        }
    }

    async signMessage(message: string, provider?: string): Promise<string> {
        try {
            const signer = this.getSigner(provider);
            return await signer.signMessage(message);
        } catch (error) {
            this.handleProviderError(error, "sign message", { message });
        }
    }

    async contractCall(
        contractAddress: string,
        abi: string,
        method: string,
        args: any[] = [],
        value: string = "0",
        provider?: string
    ): Promise<any> {
        try {
            addressSchema.parse(contractAddress);
            const signer = this.getSigner(provider);
            const contract = new ethers.Contract(
                contractAddress,
                abi,
                signer
            );
            const parsedValue = ethers.parseEther(value);
            const tx = await contract[method](...args, { value: parsedValue });
            return tx;
        } catch (error) {
            this.handleProviderError(error, `call contract method: ${method}`, {
                contractAddress,
                abi: JSON.stringify(abi),
                args: JSON.stringify(args),
                value
            });
        }
    }

    async contractCallWithEstimate(
        contractAddress: string,
        abi: string,
        method: string,
        args: any[] = [],
        value: string = "0",
        provider?: string
    ): Promise<any> {
        try {
            addressSchema.parse(contractAddress);
            const signer = this.getSigner(provider);
            const contract = new ethers.Contract(
                contractAddress,
                abi,
                signer
            );
            const parsedValue = ethers.parseEther(value);
            
            // Get the function fragment for the method
            const fragment = contract.interface.getFunction(method);
            if (!fragment) {
                throw new Error(`Method ${method} not found in contract ABI`);
            }
            
            // Encode the function data
            const data = contract.interface.encodeFunctionData(fragment, args);
            
            // Create the transaction request
            const tx = {
                to: contractAddress,
                data,
                value: parsedValue
            };
            
            // Estimate the gas
            const estimatedGas = await signer.estimateGas(tx);
            
            // Add the estimated gas and send the transaction
            return await this.contractSendTransaction(
                contractAddress,
                abi,
                method,
                args,
                value,
                provider,
                { gasLimit: estimatedGas }
            );
        } catch (error) {
            this.handleProviderError(error, `call contract method with estimate: ${method}`, {
                contractAddress,
                abi: JSON.stringify(abi),
                args: JSON.stringify(args),
                value
            });
        }
    }

    async contractCallWithOverrides(
        contractAddress: string,
        abi: string,
        method: string,
        args: any[] = [],
        value: string = "0",
        provider?: string,
        overrides?: ethers.Overrides
    ): Promise<any> {
        try {
            addressSchema.parse(contractAddress);
            const signer = this.getSigner(provider);
            const contract = new ethers.Contract(
                contractAddress,
                abi,
                signer
            );
            const parsedValue = ethers.parseEther(value);
            
            // Get the function fragment for the method
            const fragment = contract.interface.getFunction(method);
            if (!fragment) {
                throw new Error(`Method ${method} not found in contract ABI`);
            }
            
            // Merge value with other overrides
            const txOverrides = {
                ...overrides,
                value: parsedValue
            };
            
            // Call the contract method with overrides
            const tx = await contract[method](...args, txOverrides);
            return tx;
        } catch (error) {
            this.handleProviderError(error, `call contract method with overrides: ${method}`, {
                contractAddress,
                abi: JSON.stringify(abi),
                args: this.serializeValue(args),
                value,
                overrides: this.serializeValue(overrides)
            });
        }
    }

    async contractSendTransaction(
        contractAddress: string,
        abi: string,
        method: string,
        args: any[] = [],
        value: string = "0",
        provider?: string,
        overrides?: ethers.Overrides
    ): Promise<ethers.TransactionResponse> {
        try {
            addressSchema.parse(contractAddress);
            const signer = this.getSigner(provider);
            const contract = new ethers.Contract(
                contractAddress,
                abi,
                signer
            );
            const parsedValue = ethers.parseEther(value);
            
            // Get the function fragment for the method
            const fragment = contract.interface.getFunction(method);
            if (!fragment) {
                throw new Error(`Method ${method} not found in contract ABI`);
            }
            
            // Encode the function data
            const data = contract.interface.encodeFunctionData(fragment, args);
            
            // Create the transaction request with overrides
            const tx = {
                to: contractAddress,
                data,
                value: parsedValue,
                ...overrides
            };
            
            // Send the transaction
            return await signer.sendTransaction(tx);
        } catch (error) {
            this.handleProviderError(error, `send transaction to contract method: ${method}`, {
                contractAddress,
                abi: JSON.stringify(abi),
                args: JSON.stringify(args),
                value
            });
        }
    }

    async contractSendTransactionWithEstimate(
        contractAddress: string,
        abi: string,
        method: string,
        args: any[],
        value: string = "0",
        provider?: string
    ): Promise<ethers.TransactionResponse> {
        try {
            const parsedAddress = addressSchema.parse(contractAddress);
            const contract = new ethers.Contract(parsedAddress, abi, await this.getSigner(provider));
            const parsedValue = ethers.parseEther(value);

            // Get the function fragment for the method
            const fragment = contract.interface.getFunction(method);
            if (!fragment) {
                throw new Error(`Method ${method} not found in contract ABI`);
            }
            
            // Encode the function data with value
            const data = contract.interface.encodeFunctionData(fragment, args);
            const tx = {
                to: parsedAddress,
                data,
                value: parsedValue
            };

            // Estimate gas
            const gasEstimate = await contract.getFunction(method).estimateGas(...args, { value: parsedValue });
            
            // Send transaction with estimated gas
            return await contract.getFunction(method)(...args, {
                value: parsedValue,
                gasLimit: gasEstimate
            });
        } catch (error) {
            throw this.handleProviderError(error, `send transaction to contract method with estimate: ${method}`, {
                contractAddress,
                abi: JSON.stringify(abi),
                args: JSON.stringify(args),
                value
            });
        }
    }

    async contractSendTransactionWithOverrides(
        contractAddress: string,
        abi: string,
        method: string,
        args: any[],
        value: string = "0",
        provider?: string,
        overrides: ethers.Overrides = {}
    ): Promise<ethers.TransactionResponse> {
        try {
            const parsedAddress = addressSchema.parse(contractAddress);
            const contract = new ethers.Contract(parsedAddress, abi, await this.getSigner(provider));
            const parsedValue = ethers.parseEther(value);

            // Get the function fragment for the method
            const fragment = contract.interface.getFunction(method);
            if (!fragment) {
                throw new Error(`Method ${method} not found in contract ABI`);
            }
            
            // Merge value with other overrides
            const txOverrides = {
                ...overrides,
                value: parsedValue
            };

            // Encode the function data
            const data = contract.interface.encodeFunctionData(fragment, args);
            
            // Send transaction with overrides
            return await contract.getFunction(method)(...args, txOverrides);
        } catch (error) {
            throw this.handleProviderError(error, `send transaction to contract method with overrides: ${method}`, {
                contractAddress,
                abi: JSON.stringify(abi),
                args: this.serializeValue(args),
                value,
                overrides: this.serializeValue(overrides)
            });
        }
    }

    async sendRawTransaction(
        signedTransaction: string,
        provider?: string
    ): Promise<ethers.TransactionResponse> {
        try {
            const selectedProvider = this.getProvider(provider);
            return await selectedProvider.broadcastTransaction(signedTransaction);
        } catch (error) {
            this.handleProviderError(error, "send raw transaction", { signedTransaction });
        }
    }

    private formatEvent(log: ethers.EventLog | ethers.Log): any {
        return {
            address: log.address,
            blockNumber: log.blockNumber,
            transactionHash: log.transactionHash,
            logIndex: log.index,
            name: 'eventName' in log ? log.eventName : undefined,
            args: 'args' in log ? log.args : undefined,
            data: log.data,
            topics: log.topics
        };
    }

    async queryLogs(
        address?: string,
        topics?: Array<string | null | Array<string>>,
        fromBlock?: string | number,
        toBlock?: string | number,
        provider?: string
    ): Promise<any> {
        try {
            let checksummedAddress: string | undefined;
            if (address) {
                checksummedAddress = ethers.getAddress(address);
            }
            const selectedProvider = this.getProvider(provider);
            const filter: ethers.Filter = {
                address: checksummedAddress,
                topics: topics
            };

            const logs = await selectedProvider.getLogs({
                ...filter,
                fromBlock: fromBlock,
                toBlock: toBlock
            });

            return logs.map((log) => this.formatEvent(log));
        } catch (error) {
            this.handleProviderError(error, "query logs", {
                address: address || "any",
                topics: topics ? JSON.stringify(topics) : "any",
                fromBlock: String(fromBlock || "any"),
                toBlock: String(toBlock || "any")
            });
        }
    }

    async contractEvents(
        contractAddress: string,
        abi: string,
        eventName?: string,
        topics?: Array<string | null | Array<string>>,
        fromBlock?: string | number,
        toBlock?: string | number,
        provider?: string
    ): Promise<any> {
        try {
            // Use ethers.getAddress to get the correct checksummed address
            const checksummedAddress = ethers.getAddress(contractAddress);
            const selectedProvider = this.getProvider(provider);

            const contract = new ethers.Contract(
                checksummedAddress,
                abi,
                selectedProvider
            );

            // If eventName is provided, use it to create a filter
            if (eventName) {
                const fragment = contract.interface.getEvent(eventName);
                if (!fragment) {
                    throw new Error(`Event ${eventName} not found in contract ABI`);
                }
                // Get all events matching the event name and optional block range
                const events = await contract.queryFilter(eventName as any, fromBlock, toBlock);
                return events.map((log) => this.formatEvent(log as ethers.EventLog));
            } else {
                // Get all events from the contract within the block range
                const events = await contract.queryFilter('*' as any, fromBlock, toBlock);
                return events.map((log) => this.formatEvent(log as ethers.EventLog));
            }
        } catch (error) {
            this.handleProviderError(error, "query contract events", {
                contractAddress,
                abi: JSON.stringify(abi),
                eventName: eventName || "any",
                topics: topics ? JSON.stringify(topics) : "any",
                fromBlock: String(fromBlock || "any"),
                toBlock: String(toBlock || "any")
            });
        }
    }
}

================
File: src/tests/utils/hardhatTestProvider.ts
================
import { ethers } from 'ethers';

export interface TestEnvironment {
  provider: ethers.Provider;
  signers: ethers.Signer[];
}

async function resetProvider(provider: ethers.JsonRpcProvider) {
  await provider.send('hardhat_reset', []);
  await provider.send('evm_setAutomine', [true]);
}

export async function getHardhatTestProvider(): Promise<TestEnvironment> {
  const provider = new ethers.JsonRpcProvider('http://127.0.0.1:8545');
  await resetProvider(provider);

  const privateKeys = [
    '0xac0974bec39a17e36ba4a6b4d238ff944bacb478cbed5efcae784d7bf4f2ff80',
    '0x59c6995e998f97a5a0044966f0945389dc9e86dae88c7a8412f4603b6b78690d',
    '0x5de4111afa1a4b94908f83103eb1f1706367c2e68ca870fc3fb9a804cdab365a'
  ];

  const signers = privateKeys.map(key => new ethers.Wallet(key, provider));
  
  // Fund the test accounts sequentially
  try {
    const fundingAmount = ethers.parseEther('1000');
    const funder = signers[0];
    
    for (let i = 1; i < signers.length; i++) {
      const nonce = await provider.getTransactionCount(funder.address);
      const tx = await funder.sendTransaction({
        to: signers[i].address,
        value: fundingAmount,
        nonce
      });
      await tx.wait();
    }

    return {
      provider,
      signers
    };
  } catch (error) {
    console.error('Error funding test accounts:', error);
    throw error;
  }
}

// Export some test constants
export const TEST_ACCOUNTS = {
  ALICE: 0,
  BOB: 1,
  CHARLIE: 2,
  DAVE: 3
} as const;

================
File: src/tests/utils/testContractHelper.ts
================
import { ethers } from 'ethers';
import fs from 'fs';
import path from 'path';

// Interface for the TestToken contract
export interface TestToken extends ethers.BaseContract {
  name(): Promise<string>;
  symbol(): Promise<string>;
  decimals(): Promise<number>;
  totalSupply(): Promise<bigint>;
  balanceOf(account: string): Promise<bigint>;
  allowance(owner: string, spender: string): Promise<bigint>;
  transfer: {
    (to: string, value: bigint): Promise<ethers.ContractTransactionResponse>;
    (to: string, value: bigint, overrides: ethers.Overrides): Promise<ethers.ContractTransactionResponse>;
    estimateGas(to: string, value: bigint): Promise<bigint>;
  };
  approve: {
    (spender: string, value: bigint): Promise<ethers.ContractTransactionResponse>;
    (spender: string, value: bigint, overrides: ethers.Overrides): Promise<ethers.ContractTransactionResponse>;
    estimateGas(spender: string, value: bigint): Promise<bigint>;
  };
  transferFrom: {
    (from: string, to: string, value: bigint): Promise<ethers.ContractTransactionResponse>;
    (from: string, to: string, value: bigint, overrides: ethers.Overrides): Promise<ethers.ContractTransactionResponse>;
    estimateGas(from: string, to: string, value: bigint): Promise<bigint>;
  };
  mint: {
    (to: string, value: bigint): Promise<ethers.ContractTransactionResponse>;
    (to: string, value: bigint, overrides: ethers.Overrides): Promise<ethers.ContractTransactionResponse>;
    estimateGas(to: string, value: bigint): Promise<bigint>;
  };
  connect(signer: ethers.Signer): TestToken;
  getAddress(): Promise<string>;
  interface: ethers.Interface;
}

export const TEST_TOKEN_ABI = [
  "function name() view returns (string)",
  "function symbol() view returns (string)",
  "function decimals() view returns (uint8)",
  "function totalSupply() view returns (uint256)",
  "function balanceOf(address) view returns (uint256)",
  "function allowance(address,address) view returns (uint256)",
  "function transfer(address,uint256) returns (bool)",
  "function approve(address,uint256) returns (bool)",
  "function transferFrom(address,address,uint256) returns (bool)",
  "function mint(address,uint256)",
  "event Transfer(address indexed,address indexed,uint256)",
  "event Approval(address indexed,address indexed,uint256)"
];

export async function deployTestToken(signer: ethers.Signer): Promise<TestToken> {
  console.log('Creating contract factory...');
  
  // Read the compiled contract artifact
  const artifactPath = path.join(process.cwd(), 'artifacts/contracts/TestToken.sol/TestToken.json');
  const artifact = JSON.parse(fs.readFileSync(artifactPath, 'utf8'));
  
  // Create contract factory
  const factory = new ethers.ContractFactory(artifact.abi, artifact.bytecode, signer);
  
  console.log('Deploying contract...');
  const contract = await factory.deploy() as TestToken;
  await contract.waitForDeployment();
  
  return contract;
}

================
File: src/tests/contract-methods.test.ts
================
import { describe, expect, test, beforeAll } from '@jest/globals';
import { ethers } from 'ethers';
import { EthersService } from '../services/ethersService.js';
import { getHardhatTestProvider } from './utils/hardhatTestProvider.js';
import { TestEnvironment } from './utils/hardhatTestProvider.js';
import { deployTestToken, TestToken } from './utils/testContractHelper.js';

describe('Contract Methods Tests', () => {
  let ethersService: EthersService;
  let testEnv: TestEnvironment;
  let alice: ethers.Signer;
  let bob: ethers.Signer;
  let testToken: TestToken;
  let aliceAddress: string;
  let bobAddress: string;
  const approvalAmount = 1000n;

  beforeAll(async () => {
    testEnv = await getHardhatTestProvider();
    ethersService = new EthersService(testEnv.provider);
    [alice, bob] = testEnv.signers;
    aliceAddress = await alice.getAddress();
    bobAddress = await bob.getAddress();
    testToken = await deployTestToken(alice);
  }, 30000); // Increase timeout to 30 seconds

  describe('Contract Read Methods', () => {
    test('should get token name', async () => {
      const name = await testToken.name();
      expect(name).toBe('MyToken');
    });

    test('should get token symbol', async () => {
      const symbol = await testToken.symbol();
      expect(symbol).toBe('MCP');
    });

    test('should get token decimals', async () => {
      const decimals = await testToken.decimals();
      expect(decimals).toBe(18);
    });

    test('should get token balance', async () => {
      const balance = await testToken.balanceOf(aliceAddress);
      expect(balance).toBe(ethers.parseEther('1000000'));
    });
  });

  describe('Contract Write Methods', () => {
    test('should transfer tokens between accounts', async () => {
      const initialAliceBalance = await testToken.balanceOf(aliceAddress);
      const initialBobBalance = await testToken.balanceOf(bobAddress);

      const transferAmount = ethers.parseEther('50');
      const transferTx = await testToken.transfer(bobAddress, transferAmount);
      await transferTx.wait();

      const newAliceBalance = await testToken.balanceOf(aliceAddress);
      const bobBalance = await testToken.balanceOf(bobAddress);

      expect(newAliceBalance).toBe(initialAliceBalance - transferAmount);
      expect(bobBalance).toBe(initialBobBalance + transferAmount);
    });

    test('should handle approval and transferFrom', async () => {
      const initialAliceBalance = await testToken.balanceOf(aliceAddress);
      const initialBobBalance = await testToken.balanceOf(bobAddress);

      const approvalAmount = ethers.parseEther('30');
      const approveTx = await testToken.approve(bobAddress, approvalAmount);
      await approveTx.wait();

      const allowance = await testToken.allowance(aliceAddress, bobAddress);
      expect(allowance).toBe(approvalAmount);

      const transferAmount = ethers.parseEther('20');
      const bobToken = testToken.connect(bob);
      const transferTx = await bobToken.transferFrom(aliceAddress, bobAddress, transferAmount);
      await transferTx.wait();

      const aliceBalance = await testToken.balanceOf(aliceAddress);
      const bobBalance = await testToken.balanceOf(bobAddress);
      const newAllowance = await testToken.allowance(aliceAddress, bobAddress);

      expect(aliceBalance).toBe(initialAliceBalance - transferAmount);
      expect(bobBalance).toBe(initialBobBalance + transferAmount);
      expect(newAllowance).toBe(approvalAmount - transferAmount);
    });

    test('should fail when transferring more than balance', async () => {
      const balance = await testToken.balanceOf(aliceAddress);
      const transferAmount = balance + 1n;

      await expect(testToken.transfer(bobAddress, transferAmount))
        .rejects
        .toThrow('insufficient balance');
    });

    test('should fail when transferring more than allowance', async () => {
      await testToken.approve(bobAddress, approvalAmount);

      const transferAmount = approvalAmount + 1n;
      const bobToken = testToken.connect(bob);

      await expect(bobToken.transferFrom(aliceAddress, bobAddress, transferAmount))
        .rejects
        .toThrow('exceeds allowance');
    });
  });
});

================
File: src/tests/test.ts
================
import { describe, expect, test, beforeAll } from '@jest/globals';
import { ethers } from 'ethers';
import { EthersService } from '../services/ethersService.js';
import { getHardhatTestProvider } from './utils/hardhatTestProvider.js';
import { TestEnvironment } from './utils/hardhatTestProvider.js';
import { deployTestToken, TestToken } from './utils/testContractHelper.js';

describe('EthersService', () => {
  let ethersService: EthersService;
  let testEnv: TestEnvironment;
  let signer: ethers.Signer;
  let validAddress: string;
  let testToken: TestToken;
  const VITALIK_ADDRESS = '0xd8dA6BF26964aF9D7eEd9e03E53415D37aA96045';
  const USDC_CONTRACT = '0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48';
  const TEST_PROVIDER = 'http://127.0.0.1:8545';
  
  beforeAll(async () => {
    testEnv = await getHardhatTestProvider();
    ethersService = new EthersService(testEnv.provider);
    [signer] = testEnv.signers;
    validAddress = await signer.getAddress();
    
    // Deploy test token for ERC20 tests
    testToken = await deployTestToken(signer);
  }, 30000);

  describe('getBalance', () => {
    test('should get balance for valid address', async () => {
      const balance = await ethersService.getBalance(VITALIK_ADDRESS, TEST_PROVIDER);
      expect(balance).toBeDefined();
      expect(typeof balance).toBe('string');
      expect(Number(balance)).not.toBeNaN();
    });

    test('should throw error for invalid address', async () => {
      await expect(ethersService.getBalance('invalid-address', TEST_PROVIDER))
        .rejects
        .toThrow();
    });

    test('should throw error for malformed address', async () => {
      await expect(ethersService.getBalance('0x123', TEST_PROVIDER))
        .rejects
        .toThrow();
    });
  });

  describe('getERC20Balance', () => {
    test('should get ERC20 balance for valid address and token', async () => {
      const tokenAddress = await testToken.getAddress();
      const signerAddress = await signer.getAddress();
      
      const balance = await ethersService.getERC20Balance(signerAddress, tokenAddress, TEST_PROVIDER);
      expect(balance).toBeDefined();
      expect(typeof balance).toBe('string');
      expect(Number(balance)).toBe(1000000); // Initial supply is 1,000,000 tokens
    });

    test('should throw error for invalid address', async () => {
      const tokenAddress = await testToken.getAddress();
      await expect(ethersService.getERC20Balance('invalid-address', tokenAddress, TEST_PROVIDER))
        .rejects
        .toThrow();
    });

    test('should throw error for invalid token address', async () => {
      await expect(ethersService.getERC20Balance(VITALIK_ADDRESS, 'invalid-address', TEST_PROVIDER))
        .rejects
        .toThrow();
    });
  });

  describe('getTransactionCount', () => {
    test('should get transaction count for valid address', async () => {
      const signerAddress = await signer.getAddress();
      
      // Send a transaction to ensure non-zero count
      await signer.sendTransaction({
        to: VITALIK_ADDRESS,
        value: ethers.parseEther("1.0")
      });
      
      const count = await ethersService.getTransactionCount(signerAddress, TEST_PROVIDER);
      expect(count).toBeDefined();
      expect(typeof count).toBe('number');
      expect(count).toBeGreaterThan(0);
    });

    test('should throw error for invalid address', async () => {
      await expect(ethersService.getTransactionCount('invalid-address', TEST_PROVIDER))
        .rejects
        .toThrow();
    });
  });

  describe('getBlockNumber', () => {
    test('should get current block number', async () => {
      const blockNumber = await ethersService.getBlockNumber(TEST_PROVIDER);
      expect(blockNumber).toBeDefined();
      expect(typeof blockNumber).toBe('number');
      expect(blockNumber).toBeGreaterThan(0);
    });
  });

  describe('getBlockDetails', () => {
    test('should get block details for latest block', async () => {
      const block = await ethersService.getBlockDetails('latest', TEST_PROVIDER);
      expect(block).not.toBeNull();
      if (block) {
        expect(block.number).toBeDefined();
        expect(block.hash).toBeDefined();
        expect(block.timestamp).toBeDefined();
      }
    });

    test('should get block details for specific block number', async () => {
      const blockNumber = await ethersService.getBlockNumber(TEST_PROVIDER);
      const block = await ethersService.getBlockDetails(blockNumber - 1, TEST_PROVIDER);
      expect(block).not.toBeNull();
      if (block) {
        expect(block.number).toBe(blockNumber - 1);
        expect(block.hash).toBeDefined();
        expect(block.timestamp).toBeDefined();
      }
    });

    test('should throw error for invalid block tag', async () => {
      await expect(ethersService.getBlockDetails('invalid-block', TEST_PROVIDER))
        .rejects
        .toThrow();
    });
  });

  describe('getGasPrice', () => {
    test('should get current gas price', async () => {
      const gasPrice = await ethersService.getGasPrice(TEST_PROVIDER);
      expect(gasPrice).toBeDefined();
      expect(typeof gasPrice).toBe('string');
      // Gas price should be a valid number
      expect(Number(gasPrice)).not.toBeNaN();
      expect(Number(gasPrice)).toBeGreaterThan(0);
    });
  });

  describe('getFeeData', () => {
    test('should get current fee data', async () => {
      const feeData = await ethersService.getFeeData(TEST_PROVIDER);
      expect(feeData).toBeDefined();
      expect(feeData.gasPrice).toBeDefined();
      expect(feeData.maxFeePerGas).toBeDefined();
      expect(feeData.maxPriorityFeePerGas).toBeDefined();
    });
  });

  describe('getContractCode', () => {
    test('should get bytecode for valid contract address', async () => {
      const tokenAddress = await testToken.getAddress();
      const code = await ethersService.getContractCode(tokenAddress, TEST_PROVIDER);
      expect(code).not.toBeNull();
      if (code) {
        expect(code).not.toBe('0x');
        expect(code.startsWith('0x')).toBe(true);
      }
    });

    test('should return 0x for non-contract address', async () => {
      const code = await ethersService.getContractCode(VITALIK_ADDRESS, TEST_PROVIDER);
      expect(code).toBe('0x');
    });

    test('should throw error for invalid address', async () => {
      await expect(ethersService.getContractCode('invalid-address', TEST_PROVIDER))
        .rejects
        .toThrow();
    });
  });

  describe('formatEther and parseEther', () => {
    test('should correctly format wei to ether', () => {
      const wei = '1000000000000000000'; // 1 ETH in wei
      const ether = ethersService.formatEther(wei);
      expect(ether).toBe('1.0');
    });

    test('should correctly parse ether to wei', () => {
      const ether = '1.0';
      const wei = ethersService.parseEther(ether);
      expect(wei.toString()).toBe('1000000000000000000');
    });

    test('should throw error for invalid ether string', () => {
      expect(() => ethersService.parseEther('invalid'))
        .toThrow();
    });
  });

  describe('formatUnits and parseUnits', () => {
    test('should correctly format units', () => {
      const value = '1000000000'; // 1 GWEI
      const formatted = ethersService.formatUnits(value, 'gwei');
      expect(formatted).toBe('1.0');
    });

    test('should correctly parse units', () => {
      const value = '1.0';
      const parsed = ethersService.parseUnits(value, 'gwei');
      expect(parsed.toString()).toBe('1000000000');
    });

    test('should throw error for invalid unit string', () => {
      expect(() => ethersService.parseUnits('invalid', 'gwei'))
        .toThrow();
    });
  });
});

================
File: src/tests/write-methods.test.ts
================
import { describe, expect, test, beforeAll } from '@jest/globals';
import { ethers } from 'ethers';
import { EthersService } from '../services/ethersService.js';
import { getHardhatTestProvider } from './utils/hardhatTestProvider.js';
import { TestEnvironment } from './utils/hardhatTestProvider.js';
import { deployTestToken, TestToken } from './utils/testContractHelper.js';

describe('Write Methods Tests', () => {
  let ethersService: EthersService;
  let testEnv: TestEnvironment;
  let signer: ethers.Signer;
  let recipientAddress: string;
  let testToken: TestToken;

  beforeAll(async () => {
    testEnv = await getHardhatTestProvider();
    ethersService = new EthersService(testEnv.provider);
    [signer] = testEnv.signers;
    recipientAddress = await testEnv.signers[1].getAddress();
    testToken = await deployTestToken(signer);
  }, 30000); // Increase timeout to 30 seconds

  describe('sendTransaction', () => {
    test('should send ETH between accounts', async () => {
      const initialBalance = await testEnv.provider.getBalance(recipientAddress);
      const amount = '1.0';

      const tx = await ethersService.sendTransaction({
        to: recipientAddress,
        value: ethers.parseEther(amount)
      });
      await tx.wait();

      const newBalance = await testEnv.provider.getBalance(recipientAddress);
      const expectedBalance = initialBalance + ethers.parseEther(amount);
      const tolerance = ethers.parseEther("0.0001"); // Allow for small differences due to gas costs
      expect(newBalance).toBeGreaterThan(expectedBalance - tolerance);
      expect(newBalance).toBeLessThan(expectedBalance + tolerance);
    });

    test('should fail when sending more ETH than available balance', async () => {
      const signerBalance = await testEnv.provider.getBalance(await signer.getAddress());
      const tooMuch = ethers.formatEther(signerBalance + ethers.parseEther("1.0"));

      await expect(ethersService.sendTransaction({
        to: recipientAddress,
        value: ethers.parseEther(tooMuch)
      })).rejects.toThrow();
    });

    test('should fail when sending to an invalid address', async () => {
      await expect(ethersService.sendTransaction({
        to: 'invalid-address',
        value: ethers.parseEther('1.0')
      })).rejects.toThrow();
    });
  });

  describe('signMessage', () => {
    test('should sign a message correctly', async () => {
      const message = 'Hello, World!';
      const signature = await ethersService.signMessage(message);
      expect(signature).toMatch(/^0x[0-9a-fA-F]{130}$/);
    });

    test('should sign different messages with different signatures', async () => {
      const message1 = 'Hello, World!';
      const message2 = 'Different message';
      const signature1 = await ethersService.signMessage(message1);
      const signature2 = await ethersService.signMessage(message2);
      expect(signature1).not.toBe(signature2);
    });
  });

  describe('Contract Interactions', () => {
    test('should call contract method successfully', async () => {
      const tokenAddress = await testToken.getAddress();
      const amount = ethers.parseEther('10');
      const initialBalance = await testToken.balanceOf(recipientAddress);

      const data = testToken.interface.encodeFunctionData('transfer', [recipientAddress, amount]);
      const tx = await ethersService.sendTransaction({
        to: tokenAddress,
        data: data
      });
      await tx.wait();

      const newBalance = await testToken.balanceOf(recipientAddress);
      expect(newBalance).toBe(initialBalance + amount);
    });

    test('should fail when calling with insufficient balance', async () => {
      const tokenAddress = await testToken.getAddress();
      const signerBalance = await testToken.balanceOf(await signer.getAddress());
      const tooMuch = signerBalance + 1n;

      const data = testToken.interface.encodeFunctionData('transfer', [recipientAddress, tooMuch]);
      await expect(ethersService.sendTransaction({
        to: tokenAddress,
        data: data
      })).rejects.toThrow();
    });
  });
});

================
File: src/index.ts
================
#!/usr/bin/env node
import { startServer } from './server.js';
import { config } from 'dotenv';

config();

startServer().catch((error) => {
    console.error('Failed to start server:', error);
    process.exit(1);
});

================
File: src/server.ts
================
import { Server } from "@modelcontextprotocol/sdk/server/index.js";
import { StdioServerTransport } from "@modelcontextprotocol/sdk/server/stdio.js";
import {
    CallToolRequestSchema,
    ListToolsRequestSchema,
} from "@modelcontextprotocol/sdk/types.js";
import { EthersService, DefaultProvider } from "./services/ethersService.js";
import { z } from "zod";
import { config } from "dotenv";
import { ethers } from "ethers";

config(); // Load environment variables

const server = new Server(
    {
        name: "ethers-wallet-server",
        version: "1.0.0",
    },
    {
        capabilities: {
            tools: {},
        },
    }
);

// Initialize the ethers service with configurable default network
const defaultNetwork = (process.env.DEFAULT_NETWORK || "mainnet") as DefaultProvider;
const ethersService = new EthersService(defaultNetwork);

// Tool definitions
const tools = [
    {
        name: "getWalletBalance",
        description: "Get the ETH balance of a wallet",
        inputSchema: {
            type: "object",
            properties: {
                address: {
                    type: "string",
                    description: "The Ethereum address to query",
                },
                provider: {
                    type: "string",
                    description: "Optional. Either a supported network name (mainnet, sepolia, goerli, arbitrum, optimism, base, polygon) or a custom RPC URL. Defaults to mainnet if not provided.",
                },
            },
            required: ["address"],
        },
    },
    {
        name: "getERC20Balance",
        description: "Get the ERC20 token balance of a wallet",
        inputSchema: {
            type: "object",
            properties: {
                address: {
                    type: "string",
                    description: "The Ethereum address to query",
                },
                tokenAddress: {
                    type: "string",
                    description: "The address of the ERC20 token contract"
                },
                provider: {
                    type: "string",
                    description: "Optional. Either a supported network name (mainnet, sepolia, goerli, arbitrum, optimism, base, polygon) or a custom RPC URL. Defaults to mainnet if not provided.",
                },
            },
            required: ["address", "tokenAddress"]
        },
    },
    {
        name: "getWalletTransactionCount",
        description: "Get the number of transactions ever sent by an address",
        inputSchema: {
            type: "object",
            properties: {
                address: {
                    type: "string",
                    description: "The Ethereum address to query",
                },
                provider: {
                    type: "string",
                    description: "Optional. Either a supported network name (mainnet, sepolia, goerli, arbitrum, optimism, base, polygon) or a custom RPC URL. Defaults to mainnet if not provided.",
                },
            },
            required: ["address"]
        },
    },
    {
        name: "getBlockNumber",
        description: "Get the current block number",
        inputSchema: {
            type: "object",
            properties: {
                provider: {
                    type: "string",
                    description: "Optional. Either a supported network name (mainnet, sepolia, goerli, arbitrum, optimism, base, polygon) or a custom RPC URL. Defaults to mainnet if not provided.",
                },
            },
        },
    },
    {
        name: "getBlockDetails",
        description: "Get details about a block",
        inputSchema: {
            type: "object",
            properties: {
                blockTag: {
                    type: ["string", "number"],
                    description: "The block number or the string 'latest'",
                },
                provider: {
                    type: "string",
                    description: "Optional. Either a supported network name (mainnet, sepolia, goerli, arbitrum, optimism, base, polygon) or a custom RPC URL. Defaults to mainnet if not provided.",
                },
            },
            required: ["blockTag"]
        },
    },
    {
        name: "getTransactionDetails",
        description: "Get details about a transaction",
        inputSchema: {
            type: "object",
            properties: {
                txHash: {
                    type: "string",
                    description: "The transaction hash to lookup",
                },
                provider: {
                    type: "string",
                    description: "Optional. Either a supported network name (mainnet, sepolia, goerli, arbitrum, optimism, base, polygon) or a custom RPC URL. Defaults to mainnet if not provided.",
                },
            },
            required: ["txHash"]
        },
    },
    {
        name: "getGasPrice",
        description: "Get the current gas price",
        inputSchema: {
            type: "object",
            properties: {
                provider: {
                    type: "string",
                    description: "Optional. Either a supported network name (mainnet, sepolia, goerli, arbitrum, optimism, base, polygon) or a custom RPC URL. Defaults to mainnet if not provided.",
                },
            },
        },
    },
    {
        name: "getFeeData",
        description: "Get the current network fee data",
        inputSchema: {
            type: "object",
            properties: {
                provider: {
                    type: "string",
                    description: "Optional. Either a supported network name (mainnet, sepolia, goerli, arbitrum, optimism, base, polygon) or a custom RPC URL. Defaults to mainnet if not provided.",
                },
            },
        },
    },
    {
        name: "getContractCode",
        description: "Get a contract's bytecode",
        inputSchema: {
            type: "object",
            properties: {
                address: {
                    type: "string",
                    description: "The contract's address",
                },
                provider: {
                    type: "string",
                    description: "Optional. Either a supported network name (mainnet, sepolia, goerli, arbitrum, optimism, base, polygon) or a custom RPC URL. Defaults to mainnet if not provided.",
                },
            },
            required: ["address"]
        },
    },
    {
        name: "lookupAddress",
        description: "Get the ENS name for an address",
        inputSchema: {
            type: "object",
            properties: {
                address: {
                    type: "string",
                    description: "The Ethereum address to resolve",
                },
                provider: {
                    type: "string",
                    description: "Optional. Either a supported network name (mainnet, sepolia, goerli, arbitrum, optimism, base, polygon) or a custom RPC URL. Defaults to mainnet if not provided.",
                },
            },
            required: ["address"]
        },
    },
    {
        name: "resolveName",
        description: "Get the address for an ENS name",
        inputSchema: {
            type: "object",
            properties: {
                name: {
                    type: "string",
                    description: "The ENS name to resolve",
                },
                provider: {
                    type: "string",
                    description: "Optional. Either a supported network name (mainnet, sepolia, goerli, arbitrum, optimism, base, polygon) or a custom RPC URL. Defaults to mainnet if not provided.",
                },
            },
            required: ["name"]
        },
    },
    {
        name: "formatEther",
        description: "Convert a wei value to a decimal string in ether",
        inputSchema: {
            type: "object",
            properties: {
                wei: {
                    type: "string",
                    description: "The wei value to format",
                },
            },
            required: ["wei"]
        },
    },
    {
        name: "parseEther",
        description: "Convert an ether value to wei",
        inputSchema: {
            type: "object",
            properties: {
                ether: {
                    type: "string",
                    description: "The ether value to parse",
                },
            },
            required: ["ether"]
        },
    },
    {
        name: "formatUnits",
        description: "Convert a value to a decimal string with specified units",
        inputSchema: {
            type: "object",
            properties: {
                value: {
                    type: "string",
                    description: "The value to format",
                },
                unit: {
                    type: ["string", "number"],
                    description: "The number of decimals or unit name (e.g., 'gwei', 18)",
                },
            },
            required: ["value", "unit"]
        },
    },
    {
        name: "parseUnits",
        description: "Convert a decimal string to its smallest unit representation",
        inputSchema: {
            type: "object",
            properties: {
                value: {
                    type: "string",
                    description: "The decimal string to parse",
                },
                unit: {
                    type: ["string", "number"],
                    description: "The number of decimals or unit name (e.g., 'gwei', 18)",
                },
            },
            required: ["value", "unit"]
        },
    },
    {
        name: "sendTransaction",
        description: "Send ETH from the server's wallet to a recipient",
        inputSchema: {
            type: "object",
            properties: {
                to: {
                    type: "string",
                    description: "The recipient address",
                },
                value: {
                    type: "string",
                    description: "The amount of ETH to send",
                },
                data: {
                    type: "string",
                    description: "Optional. Data to include in the transaction",
                },
                provider: {
                    type: "string",
                    description: "Optional. Either a supported network name (mainnet, sepolia, goerli, arbitrum, optimism, base, polygon) or a custom RPC URL. Defaults to mainnet if not provided.",
                },
            },
            required: ["to", "value"]
        },
    },
    {
        name: "signMessage",
        description: "Sign a message using the server's wallet",
        inputSchema: {
            type: "object",
            properties: {
                message: {
                    type: "string",
                    description: "The message to sign",
                },
                provider: {
                    type: "string",
                    description: "Optional. Either a supported network name (mainnet, sepolia, goerli, arbitrum, optimism, base, polygon) or a custom RPC URL. Defaults to mainnet if not provided.",
                },
            },
            required: ["message"]
        },
    },
    {
        name: "contractCall",
        description: "Call a method on a smart contract",
        inputSchema: {
            type: "object",
            properties: {
                contractAddress: {
                    type: "string",
                    description: "The address of the smart contract",
                },
                abi: {
                    type: "string",
                    description: "The ABI of the contract as a JSON string",
                },
                method: {
                    type: "string",
                    description: "The method name to invoke",
                },
                methodArgs: {
                    type: "array",
                    description: "An array of arguments to pass to the method",
                    items: {
                        type: ["string", "number", "boolean", "object"]
                    }
                },
                value: {
                    type: "string",
                    description: "Optional. The amount of ETH to send with the call",
                },
                provider: {
                    type: "string",
                    description: "Optional. Either a supported network name (mainnet, sepolia, goerli, arbitrum, optimism, base, polygon) or a custom RPC URL. Defaults to mainnet if not provided.",
                },
            },
            required: ["contractAddress", "abi", "method"]
        },
    },
    {
        name: "contractCallWithEstimate",
        description: "Call a method on a smart contract with automatic gas estimation",
        inputSchema: {
            type: "object",
            properties: {
                contractAddress: {
                    type: "string",
                    description: "The address of the smart contract",
                },
                abi: {
                    type: "string",
                    description: "The ABI of the contract as a JSON string",
                },
                method: {
                    type: "string",
                    description: "The method name to invoke",
                },
                methodArgs: {
                    type: "array",
                    description: "An array of arguments to pass to the method",
                    items: {
                        type: ["string", "number", "boolean", "object"]
                    }
                },
                value: {
                    type: "string",
                    description: "Optional. The amount of ETH to send with the call",
                },
                provider: {
                    type: "string",
                    description: "Optional. Either a supported network name (mainnet, sepolia, goerli, arbitrum, optimism, base, polygon) or a custom RPC URL. Defaults to mainnet if not provided.",
                },
            },
            required: ["contractAddress", "abi", "method"]
        },
    },
    {
        name: "contractSendTransaction",
        description: "Call a method on a smart contract and send a transaction with custom parameters",
        inputSchema: {
            type: "object",
            properties: {
                contractAddress: {
                    type: "string",
                    description: "The address of the smart contract",
                },
                abi: {
                    type: "string",
                    description: "The ABI of the contract as a JSON string",
                },
                method: {
                    type: "string",
                    description: "The method name to invoke",
                },
                methodArgs: {
                    type: "array",
                    description: "An array of arguments to pass to the method",
                    items: {
                        type: ["string", "number", "boolean", "object"]
                    }
                },
                value: {
                    type: "string",
                    description: "Optional. The amount of ETH to send with the call",
                },
                gasLimit: {
                    type: "string",
                    description: "Optional. The gas limit for the transaction",
                },
                provider: {
                    type: "string",
                    description: "Optional. Either a supported network name (mainnet, sepolia, goerli, arbitrum, optimism, base, polygon) or a custom RPC URL. Defaults to mainnet if not provided.",
                },
            },
            required: ["contractAddress", "abi", "method"]
        },
    },
    {
        name: "contractSendTransactionWithEstimate",
        description: "Call a method on a smart contract and send a transaction with automatic gas estimation",
        inputSchema: {
            type: "object",
            properties: {
                contractAddress: {
                    type: "string",
                    description: "The address of the smart contract",
                },
                abi: {
                    type: "string",
                    description: "The ABI of the contract as a JSON string",
                },
                method: {
                    type: "string",
                    description: "The method name to invoke",
                },
                methodArgs: {
                    type: "array",
                    description: "An array of arguments to pass to the method",
                    items: {
                        type: ["string", "number", "boolean", "object"]
                    }
                },
                value: {
                    type: "string",
                    description: "Optional. The amount of ETH to send with the call",
                },
                provider: {
                    type: "string",
                    description: "Optional. Either a supported network name (mainnet, sepolia, goerli, arbitrum, optimism, base, polygon) or a custom RPC URL. Defaults to mainnet if not provided.",
                },
            },
            required: ["contractAddress", "abi", "method"]
        },
    },
    {
        name: "contractCallWithOverrides",
        description: "Call a method on a smart contract with advanced options",
        inputSchema: {
            type: "object",
            properties: {
                contractAddress: {
                    type: "string",
                    description: "The address of the smart contract",
                },
                abi: {
                    type: "string",
                    description: "The ABI of the contract as a JSON string",
                },
                method: {
                    type: "string",
                    description: "The method name to invoke",
                },
                methodArgs: {
                    type: "array",
                    description: "An array of arguments to pass to the method",
                    items: {
                        type: ["string", "number", "boolean", "object"]
                    }
                },
                value: {
                    type: "string",
                    description: "Optional. The amount of ETH to send with the call",
                },
                gasLimit: {
                    type: "string",
                    description: "Optional. A manual gas limit for the transaction",
                },
                gasPrice: {
                    type: "string",
                    description: "Optional. A manual gas price for legacy transactions",
                },
                nonce: {
                    type: "number",
                    description: "Optional. A manual nonce for the transaction",
                },
                provider: {
                    type: "string",
                    description: "Optional. Either a supported network name (mainnet, sepolia, goerli, arbitrum, optimism, base, polygon) or a custom RPC URL. Defaults to mainnet if not provided.",
                },
            },
            required: ["contractAddress", "abi", "method"]
        },
    },
    {
        name: "contractSendTransactionWithOverrides",
        description: "Call a method on a smart contract and send a transaction with custom parameters",
        inputSchema: {
            type: "object",
            properties: {
                contractAddress: {
                    type: "string",
                    description: "The address of the smart contract",
                },
                abi: {
                    type: "string",
                    description: "The ABI of the contract as a JSON string",
                },
                method: {
                    type: "string",
                    description: "The method name to invoke",
                },
                methodArgs: {
                    type: "array",
                    description: "An array of arguments to pass to the method",
                    items: {
                        type: ["string", "number", "boolean", "object"]
                    }
                },
                value: {
                    type: "string",
                    description: "Optional. The amount of ETH to send with the call",
                },
                gasLimit: {
                    type: "string",
                    description: "Optional. The gas limit for the transaction",
                },
                gasPrice: {
                    type: "string",
                    description: "Optional. A manual gas price for legacy transactions",
                },
                nonce: {
                    type: "number",
                    description: "Optional. A manual nonce for the transaction",
                },
                provider: {
                    type: "string",
                    description: "Optional. Either a supported network name (mainnet, sepolia, goerli, arbitrum, optimism, base, polygon) or a custom RPC URL. Defaults to mainnet if not provided.",
                },
            },
            required: ["contractAddress", "abi", "method"]
        },
    },
    {
        name: "sendRawTransaction",
        description: "Send a raw transaction",
        inputSchema: {
            type: "object",
            properties: {
                signedTransaction: {
                    type: "string",
                    description: "A fully serialized and signed transaction",
                },
                provider: {
                    type: "string",
                    description: "Optional. Either a supported network name (mainnet, sepolia, goerli, arbitrum, optimism, base, polygon) or a custom RPC URL. Defaults to mainnet if not provided.",
                }
            },
            required: ["signedTransaction"]
        },
    },
    {
        name: "queryLogs",
        description: "Query historical logs",
        inputSchema: {
            type: "object",
            properties: {
                address: {
                    type: "string",
                    description: "The contract address emitting the events (optional).",
                },
                topics: {
                    type: "array",
                    description: "A list of topics to filter by. Each item can be a string, null, or an array of strings (optional)",
                    items: { 
                        type: ["string", "null", "array"],
                        items: { type: "string" }
                    }
                },
                fromBlock: {
                    type: ["string", "number"],
                    description: "The starting block number (optional).",
                },
                toBlock: {
                    type: ["string", "number"],
                    description: "The ending block number (optional).",
                },
                provider: {
                    type: "string",
                    description: "Optional. Either a supported network name (mainnet, sepolia, goerli, arbitrum, optimism, base, polygon) or a custom RPC URL. Defaults to mainnet if not provided.",
                },
            },
        },
    },
    {
        name: "contractEvents",
        description: "Query historical events from a contract",
        inputSchema: {
            type: "object",
            properties: {
                contractAddress: {
                    type: "string",
                    description: "The address of the contract to query events from",
                },
                abi: {
                    type: "string",
                    description: "The ABI of the contract as a JSON string",
                },
                eventName: {
                    type: "string",
                    description: "The name of the event to look for. (Optional).",
                },
                topics: {
                    type: "array",
                    description: "A list of topics to filter by. Each item can be a string, null, or an array of strings (optional)",
                    items: { 
                        type: ["string", "null", "array"],
                        items: { type: "string" }
                    }
                },
                fromBlock: {
                    type: ["string", "number"],
                    description: "The starting block number (optional).",
                },
                toBlock: {
                    type: ["string", "number"],
                    description: "The ending block number (optional).",
                },
                provider: {
                    type: "string",
                    description: "Optional. Either a supported network name (mainnet, sepolia, goerli, arbitrum, optimism, base, polygon) or a custom RPC URL. Defaults to mainnet if not provided.",
                },
            },
            required: ["contractAddress", "abi"]
        },
    },
];

// Define available tools
server.setRequestHandler(ListToolsRequestSchema, async () => {
    return { tools };
});

// Tool handlers
const toolHandlers = {
    getWalletBalance: async (args: unknown) => {
        const schema = z.object({ 
            address: z.string(),
            provider: z.string().optional()
        });
        const { address, provider } = schema.parse(args);
        const balance = await ethersService.getBalance(address, provider);
        
        return {
            content: [
                {
                    type: "text",
                    text: `The balance of ${address} is ${balance} ETH`,
                },
            ],
        };
    },
    
    getERC20Balance: async (args: unknown) => {
        const schema = z.object({ 
            address: z.string(), 
            tokenAddress: z.string(),
            provider: z.string().optional()
        });
        const { address, tokenAddress, provider } = schema.parse(args);
        const balance = await ethersService.getERC20Balance(address, tokenAddress, provider);
        return {
            content: [
                {
                    type: "text",
                    text: `The balance of ${address} is ${balance} in ${tokenAddress}`
                },
            ],
        };
    },
    
    getWalletTransactionCount: async (args: unknown) => {
        const schema = z.object({ 
            address: z.string(),
            provider: z.string().optional()
        });
        const { address, provider } = schema.parse(args);
        const count = await ethersService.getTransactionCount(address, provider);
        return {
            content: [{ type: "text", text: `The transaction count for ${address} is ${count}` }],
        };
    },

    getBlockNumber: async (args: unknown) => {
        const schema = z.object({ provider: z.string().optional() });
        const { provider } = schema.parse(args);
        const blockNumber = await ethersService.getBlockNumber(provider);
        return {
            content: [{ type: "text", text: `The current block number is ${blockNumber}` }],
        };
    },

    getBlockDetails: async (args: unknown) => {
        const schema = z.object({
            blockTag: z.union([z.string(), z.number()]),
            provider: z.string().optional()
        });
        const { blockTag, provider } = schema.parse(args);
        const blockDetails = await ethersService.getBlockDetails(blockTag, provider);
        
        if (blockDetails === null) {
            return {
                isError: true,
                content: [{ type: "text", text: `Block not found for tag: ${blockTag}` }]
            };
        }

        return {
            content: [{ type: "text", text: JSON.stringify(blockDetails, null, 2) }],
        };
    },

    getTransactionDetails: async (args: unknown) => {
        const schema = z.object({
            txHash: z.string(),
            provider: z.string().optional()
        });
        const { txHash, provider } = schema.parse(args);
        const txDetails = await ethersService.getTransactionDetails(txHash, provider);
        
        if (txDetails === null) {
            return {
                isError: true,
                content: [{ type: "text", text: `Transaction not found: ${txHash}` }]
            };
        }

        return {
            content: [{ type: "text", text: JSON.stringify(txDetails, null, 2) }],
        };
    },

    getGasPrice: async (args: unknown) => {
        const schema = z.object({ provider: z.string().optional() });
        const { provider } = schema.parse(args);
        const gasPrice = await ethersService.getGasPrice(provider);
        return {
            content: [{ type: "text", text: `The current gas price is ${gasPrice} gwei` }],
        };
    },

    getFeeData: async (args: unknown) => {
        const schema = z.object({ provider: z.string().optional() });
        const { provider } = schema.parse(args);
        const feeData = await ethersService.getFeeData(provider);
        return {
            content: [{ type: "text", text: JSON.stringify(feeData, null, 2) }],
        };
    },

    getContractCode: async (args: unknown) => {
        const schema = z.object({
            address: z.string(),
            provider: z.string().optional()
        });
        const { address, provider } = schema.parse(args);
        const code = await ethersService.getContractCode(address, provider);
        
        if (code === null || code === "0x") {
            return {
                isError: true,
                content: [{ type: "text", text: `No code found at address: ${address}` }]
            };
        }

        return {
            content: [{ type: "text", text: `Contract bytecode at ${address}:\n\n${code}` }],
        };
    },

    lookupAddress: async (args: unknown) => {
        const schema = z.object({
            address: z.string(),
            provider: z.string().optional()
        });
        const { address, provider } = schema.parse(args);
        const ensName = await ethersService.lookupAddress(address, provider);
        
        if (ensName === null) {
            return {
                content: [{ type: "text", text: `No ENS name found for address: ${address}` }]
            };
        }

        return {
            content: [{ type: "text", text: `The ENS name for ${address} is ${ensName}` }],
        };
    },

    resolveName: async (args: unknown) => {
        const schema = z.object({
            name: z.string(),
            provider: z.string().optional()
        });
        const { name, provider } = schema.parse(args);
        const address = await ethersService.resolveName(name, provider);
        
        if (address === null) {
            return {
                content: [{ type: "text", text: `No address found for ENS name: ${name}` }]
            };
        }

        return {
            content: [{ type: "text", text: `The address for ${name} is ${address}` }],
        };
    },

    formatEther: async (args: unknown) => {
        const schema = z.object({
            wei: z.string()
        });
        const { wei } = schema.parse(args);
        const formatted = ethersService.formatEther(wei);
        return {
            content: [{ type: "text", text: `${wei} wei = ${formatted} ETH` }],
        };
    },

    parseEther: async (args: unknown) => {
        const schema = z.object({
            ether: z.string()
        });
        const { ether } = schema.parse(args);
        const parsed = ethersService.parseEther(ether);
        return {
            content: [{ type: "text", text: `${ether} ETH = ${parsed} wei` }],
        };
    },

    formatUnits: async (args: unknown) => {
        const schema = z.object({
            value: z.string(),
            unit: z.union([z.string(), z.number()])
        });
        const { value, unit } = schema.parse(args);
        const formatted = ethersService.formatUnits(value, unit);
        return {
            content: [{ type: "text", text: `${value} = ${formatted} (with ${unit} decimals)` }],
        };
    },

    parseUnits: async (args: unknown) => {
        const schema = z.object({
            value: z.string(),
            unit: z.union([z.string(), z.number()])
        });
        const { value, unit } = schema.parse(args);
        const parsed = ethersService.parseUnits(value, unit);
        return {
            content: [{ type: "text", text: `${value} = ${parsed} (with ${unit} decimals)` }],
        };
    },

    sendTransaction: async (args: unknown) => {
        const schema = z.object({
            to: z.string(),
            value: z.string(),
            data: z.string().optional(),
            provider: z.string().optional()
        });
        const { to, value, data, provider } = schema.parse(args);
        try {
            const tx = await ethersService.sendTransaction(to, value, data, provider);
            return {
                content: [{
                    type: "text",
                    text: `Transaction sent with hash ${tx.hash}`
                }]
            };
        } catch (error) {
            return {
                isError: true,
                content: [{ type: "text", text: `Transaction failed: ${error instanceof Error ? error.message : String(error)}` }]
            };
        }
    },

    signMessage: async (args: unknown) => {
        const schema = z.object({
            message: z.string(),
            provider: z.string().optional()
        });
        const { message, provider } = schema.parse(args);
        try {
            const signature = await ethersService.signMessage(message, provider);
            return {
                content: [{
                    type: "text",
                    text: `Signature: ${signature}`
                }]
            };
        } catch (error) {
            return {
                isError: true,
                content: [{ type: "text", text: `Message signing failed: ${error instanceof Error ? error.message : String(error)}` }]
            };
        }
    },

    contractCall: async (args: unknown) => {
        const schema = z.object({
            contractAddress: z.string(),
            abi: z.string(),
            method: z.string(),
            methodArgs: z.array(z.any()).optional(),
            value: z.string().optional(),
            provider: z.string().optional()
        });
        const { contractAddress, abi, method, methodArgs = [], value = "0", provider } = schema.parse(args);
        try {
            const result = await ethersService.contractCall(contractAddress, abi, method, methodArgs, value, provider);
            return {
                content: [{
                    type: "text",
                    text: JSON.stringify(result, null, 2)
                }]
            };
        } catch (error) {
            return {
                isError: true,
                content: [{ type: "text", text: `Contract call failed: ${error instanceof Error ? error.message : String(error)}` }]
            };
        }
    },

    contractCallWithEstimate: async (args: unknown) => {
        const schema = z.object({
            contractAddress: z.string(),
            abi: z.string(),
            method: z.string(),
            methodArgs: z.array(z.any()).optional(),
            value: z.string().optional(),
            provider: z.string().optional()
        });
        const { contractAddress, abi, method, methodArgs = [], value = "0", provider } = schema.parse(args);
        try {
            const result = await ethersService.contractCallWithEstimate(contractAddress, abi, method, methodArgs, value, provider);
            return {
                content: [{
                    type: "text",
                    text: JSON.stringify(result, null, 2)
                }]
            };
        } catch (error) {
            return {
                isError: true,
                content: [{ type: "text", text: `Contract call with estimate failed: ${error instanceof Error ? error.message : String(error)}` }]
            };
        }
    },

    contractSendTransaction: async (args: unknown) => {
        const schema = z.object({
            contractAddress: z.string(),
            abi: z.string(),
            method: z.string(),
            methodArgs: z.array(z.any()).optional(),
            value: z.string().optional(),
            gasLimit: z.string().optional(),
            provider: z.string().optional()
        });
        const { contractAddress, abi, method, methodArgs = [], value = "0", gasLimit, provider } = schema.parse(args);
        try {
            const overrides = gasLimit ? { gasLimit: ethers.getBigInt(gasLimit) } : undefined;
            const result = await ethersService.contractSendTransaction(
                contractAddress,
                abi,
                method,
                methodArgs,
                value,
                provider,
                overrides
            );
            return {
                content: [{
                    type: "text",
                    text: `Transaction sent with hash ${result.hash}`
                }]
            };
        } catch (error) {
            return {
                isError: true,
                content: [{ type: "text", text: `Contract send transaction failed: ${error instanceof Error ? error.message : String(error)}` }]
            };
        }
    },

    contractSendTransactionWithEstimate: async (args: unknown) => {
        const schema = z.object({
            contractAddress: z.string(),
            abi: z.string(),
            method: z.string(),
            methodArgs: z.array(z.any()).optional(),
            value: z.string().optional(),
            provider: z.string().optional()
        });
        const { contractAddress, abi, method, methodArgs = [], value = "0", provider } = schema.parse(args);
        try {
            const result = await ethersService.contractSendTransactionWithEstimate(
                contractAddress,
                abi,
                method,
                methodArgs,
                value,
                provider
            );
            return {
                content: [{
                    type: "text",
                    text: JSON.stringify(result, null, 2)
                }]
            };
        } catch (error) {
            return {
                isError: true,
                content: [{ type: "text", text: `Contract send transaction with estimate failed: ${error instanceof Error ? error.message : String(error)}` }]
            };
        }
    },

    sendRawTransaction: async (args: unknown) => {
        const schema = z.object({
            signedTransaction: z.string(),
            provider: z.string().optional()
        });
        const { signedTransaction, provider } = schema.parse(args);
        try {
            const tx = await ethersService.sendRawTransaction(signedTransaction, provider);
            return {
                content: [{
                    type: "text",
                    text: `Transaction sent with hash ${tx.hash}`
                }]
            };
        } catch (error) {
            return {
                isError: true,
                content: [{ type: "text", text: `Send raw transaction failed: ${error instanceof Error ? error.message : String(error)}` }]
            };
        }
    },

    contractCallWithOverrides: async (args: unknown) => {
        const schema = z.object({
            contractAddress: z.string(),
            abi: z.string(),
            method: z.string(),
            methodArgs: z.array(z.any()).optional(),
            value: z.string().optional(),
            gasLimit: z.string().optional(),
            gasPrice: z.string().optional(),
            nonce: z.number().optional(),
            provider: z.string().optional()
        });
        const { contractAddress, abi, method, methodArgs = [], value = "0", gasLimit, gasPrice, nonce, provider } = schema.parse(args);
        try {
            const overrides: ethers.Overrides = {};
            if (gasLimit) overrides.gasLimit = ethers.getBigInt(gasLimit);
            if (gasPrice) overrides.gasPrice = ethers.parseUnits(gasPrice, 'gwei');
            if (nonce !== undefined) overrides.nonce = nonce;

            const result = await ethersService.contractCallWithOverrides(
                contractAddress,
                abi,
                method,
                methodArgs,
                value,
                provider,
                overrides
            );
            return {
                content: [{
                    type: "text",
                    text: JSON.stringify(result, null, 2)
                }]
            };
        } catch (error) {
            return {
                isError: true,
                content: [{ type: "text", text: `Contract call with overrides failed: ${error instanceof Error ? error.message : String(error)}` }]
            };
        }
    },

    contractSendTransactionWithOverrides: async (args: unknown) => {
        const schema = z.object({
            contractAddress: z.string(),
            abi: z.string(),
            method: z.string(),
            methodArgs: z.array(z.any()).optional(),
            value: z.string().optional(),
            gasLimit: z.string().optional(),
            gasPrice: z.string().optional(),
            nonce: z.number().optional(),
            provider: z.string().optional()
        });
        const { contractAddress, abi, method, methodArgs = [], value = "0", gasLimit, gasPrice, nonce, provider } = schema.parse(args);
        try {
            const overrides: ethers.Overrides = {};
            if (gasLimit) overrides.gasLimit = ethers.getBigInt(gasLimit);
            if (gasPrice) overrides.gasPrice = ethers.parseUnits(gasPrice, 'gwei');
            if (nonce !== undefined) overrides.nonce = nonce;

            const result = await ethersService.contractSendTransactionWithOverrides(
                contractAddress,
                abi,
                method,
                methodArgs,
                value,
                provider,
                overrides
            );
            return {
                content: [{
                    type: "text",
                    text: `Transaction sent with hash ${result.hash}`
                }]
            };
        } catch (error) {
            return {
                isError: true,
                content: [{ type: "text", text: `Contract send transaction with overrides failed: ${error instanceof Error ? error.message : String(error)}` }]
            };
        }
    },

    queryLogs: async (args: unknown) => {
        const schema = z.object({
            address: z.string().optional(),
            topics: z.array(z.union([z.string(), z.null(), z.array(z.string())])).optional(),
            fromBlock: z.union([z.string(), z.number()]).optional(),
            toBlock: z.union([z.string(), z.number()]).optional(),
            provider: z.string().optional()
        });
        const { address, topics, fromBlock, toBlock, provider } = schema.parse(args);
        try {
            const logs = await ethersService.queryLogs(address, topics, fromBlock, toBlock, provider);
            return { content: [{ type: "text", text: JSON.stringify(logs, null, 2) }] };
        } catch (error) {
            return {
                isError: true,
                content: [{ type: "text", text: `Query logs failed: ${error instanceof Error ? error.message : String(error)}` }]
            };
        }
    },

    contractEvents: async (args: unknown) => {
        const schema = z.object({
            contractAddress: z.string(),
            abi: z.string(),
            eventName: z.string().optional(),
            topics: z.array(z.union([z.string(), z.null(), z.array(z.string())])).optional(),
            fromBlock: z.union([z.string(), z.number()]).optional(),
            toBlock: z.union([z.string(), z.number()]).optional(),
            provider: z.string().optional()
        });
        const { contractAddress, abi, eventName, topics, fromBlock, toBlock, provider } = schema.parse(args);

        try {
            const events = await ethersService.contractEvents(
                contractAddress,
                abi,
                eventName,
                topics,
                fromBlock,
                toBlock,
                provider
            );
            return { content: [{ type: "text", text: JSON.stringify(events, null, 2) }] };
        } catch (error) {
            return {
                isError: true,
                content: [{ type: "text", text: `Query events failed: ${error instanceof Error ? error.message : String(error)}` }]
            };
        }
    },
};

// Handle tool calls
server.setRequestHandler(CallToolRequestSchema, async (request) => {
    const { name, arguments: args } = request.params;

    try {
        const handler = toolHandlers[name as keyof typeof toolHandlers];
        if (!handler) {
            throw new Error(`Tool not found: ${name}`);
        }
        return await handler(args);
    } catch (error: any) {
        return {
            isError: true,
            content: [{ type: "text", text: `Error processing the request: ${error.message}` }]
        };
    }
});

export async function startServer() {
    const transport = new StdioServerTransport();
    await server.connect(transport);
    console.error(`MCP server running on stdio (default network: ${defaultNetwork})`);
}

================
File: .env.example
================
INFURA_API_KEY=your_infura_api_key_here

================
File: .gitignore
================
node_modules/
build/
.env
.env.test

================
File: claude-server.json
================
{
    "name": "ethers-wallet-server",
    "description": "A server that provides Ethereum wallet and blockchain interaction capabilities",
    "command": "node build/index.js",
    "tools": [
        {
            "name": "getWalletBalance",
            "description": "Get the ETH balance of a wallet",
            "parameters": {
                "type": "object",
                "properties": {
                    "address": {
                        "type": "string",
                        "description": "The Ethereum address to query"
                    },
                    "provider": {
                        "type": "string",
                        "description": "Optional. Either a supported network name (mainnet, sepolia, goerli, arbitrum, optimism, base, polygon) or a custom RPC URL"
                    }
                },
                "required": ["address"]
            }
        },
        {
            "name": "getERC20Balance",
            "description": "Get the ERC20 token balance of a wallet",
            "parameters": {
                "type": "object",
                "properties": {
                    "address": {
                        "type": "string",
                        "description": "The Ethereum address to query"
                    },
                    "tokenAddress": {
                        "type": "string",
                        "description": "The address of the ERC20 token contract"
                    },
                    "provider": {
                        "type": "string",
                        "description": "Optional. Either a supported network name (mainnet, sepolia, goerli, arbitrum, optimism, base, polygon) or a custom RPC URL"
                    }
                },
                "required": ["address", "tokenAddress"]
            }
        },
        {
            "name": "getWalletTransactionCount",
            "description": "Get the number of transactions ever sent by an address",
            "parameters": {
                "type": "object",
                "properties": {
                    "address": {
                        "type": "string",
                        "description": "The Ethereum address to query"
                    },
                    "provider": {
                        "type": "string",
                        "description": "Optional. Either a supported network name (mainnet, sepolia, goerli, arbitrum, optimism, base, polygon) or a custom RPC URL"
                    }
                },
                "required": ["address"]
            }
        },
        {
            "name": "getBlockNumber",
            "description": "Get the current block number",
            "parameters": {
                "type": "object",
                "properties": {
                    "provider": {
                        "type": "string",
                        "description": "Optional. Either a supported network name (mainnet, sepolia, goerli, arbitrum, optimism, base, polygon) or a custom RPC URL"
                    }
                }
            }
        },
        {
            "name": "getBlockDetails",
            "description": "Get details about a block",
            "parameters": {
                "type": "object",
                "properties": {
                    "blockTag": {
                        "type": ["string", "number"],
                        "description": "The block number or the string 'latest'"
                    },
                    "provider": {
                        "type": "string",
                        "description": "Optional. Either a supported network name (mainnet, sepolia, goerli, arbitrum, optimism, base, polygon) or a custom RPC URL"
                    }
                },
                "required": ["blockTag"]
            }
        },
        {
            "name": "getTransactionDetails",
            "description": "Get details about a transaction",
            "parameters": {
                "type": "object",
                "properties": {
                    "txHash": {
                        "type": "string",
                        "description": "The transaction hash to lookup"
                    },
                    "provider": {
                        "type": "string",
                        "description": "Optional. Either a supported network name (mainnet, sepolia, goerli, arbitrum, optimism, base, polygon) or a custom RPC URL"
                    }
                },
                "required": ["txHash"]
            }
        },
        {
            "name": "getGasPrice",
            "description": "Get the current gas price",
            "parameters": {
                "type": "object",
                "properties": {
                    "provider": {
                        "type": "string",
                        "description": "Optional. Either a supported network name (mainnet, sepolia, goerli, arbitrum, optimism, base, polygon) or a custom RPC URL"
                    }
                }
            }
        },
        {
            "name": "getFeeData",
            "description": "Get the current network fee data",
            "parameters": {
                "type": "object",
                "properties": {
                    "provider": {
                        "type": "string",
                        "description": "Optional. Either a supported network name (mainnet, sepolia, goerli, arbitrum, optimism, base, polygon) or a custom RPC URL"
                    }
                }
            }
        },
        {
            "name": "getContractCode",
            "description": "Get a contract's bytecode",
            "parameters": {
                "type": "object",
                "properties": {
                    "address": {
                        "type": "string",
                        "description": "The contract's address"
                    },
                    "provider": {
                        "type": "string",
                        "description": "Optional. Either a supported network name (mainnet, sepolia, goerli, arbitrum, optimism, base, polygon) or a custom RPC URL"
                    }
                },
                "required": ["address"]
            }
        },
        {
            "name": "lookupAddress",
            "description": "Get the ENS name for an address",
            "parameters": {
                "type": "object",
                "properties": {
                    "address": {
                        "type": "string",
                        "description": "The Ethereum address to resolve"
                    },
                    "provider": {
                        "type": "string",
                        "description": "Optional. Either a supported network name (mainnet, sepolia, goerli, arbitrum, optimism, base, polygon) or a custom RPC URL"
                    }
                },
                "required": ["address"]
            }
        },
        {
            "name": "resolveName",
            "description": "Get the address for an ENS name",
            "parameters": {
                "type": "object",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "The ENS name to resolve"
                    },
                    "provider": {
                        "type": "string",
                        "description": "Optional. Either a supported network name (mainnet, sepolia, goerli, arbitrum, optimism, base, polygon) or a custom RPC URL"
                    }
                },
                "required": ["name"]
            }
        },
        {
            "name": "formatEther",
            "description": "Convert a wei value to a decimal string in ether",
            "parameters": {
                "type": "object",
                "properties": {
                    "wei": {
                        "type": "string",
                        "description": "The wei value to format"
                    }
                },
                "required": ["wei"]
            }
        },
        {
            "name": "parseEther",
            "description": "Convert an ether value to wei",
            "parameters": {
                "type": "object",
                "properties": {
                    "ether": {
                        "type": "string",
                        "description": "The ether value to parse"
                    }
                },
                "required": ["ether"]
            }
        },
        {
            "name": "formatUnits",
            "description": "Convert a value to a decimal string with specified units",
            "parameters": {
                "type": "object",
                "properties": {
                    "value": {
                        "type": "string",
                        "description": "The value to format"
                    },
                    "unit": {
                        "type": ["string", "number"],
                        "description": "The number of decimals or unit name (e.g., 'gwei', 18)"
                    }
                },
                "required": ["value", "unit"]
            }
        },
        {
            "name": "parseUnits",
            "description": "Convert a decimal string to its smallest unit representation",
            "parameters": {
                "type": "object",
                "properties": {
                    "value": {
                        "type": "string",
                        "description": "The decimal string to parse"
                    },
                    "unit": {
                        "type": ["string", "number"],
                        "description": "The number of decimals or unit name (e.g., 'gwei', 18)"
                    }
                },
                "required": ["value", "unit"]
            }
        },
        {
            "name": "sendTransaction",
            "description": "Send ETH from the server's wallet to a recipient",
            "parameters": {
                "type": "object",
                "properties": {
                    "to": {
                        "type": "string",
                        "description": "The recipient address"
                    },
                    "value": {
                        "type": "string",
                        "description": "The amount of ETH to send"
                    },
                    "data": {
                        "type": "string",
                        "description": "Optional. Data to include in the transaction"
                    },
                    "provider": {
                        "type": "string",
                        "description": "Optional. Either a supported network name (mainnet, sepolia, goerli, arbitrum, optimism, base, polygon) or a custom RPC URL"
                    }
                },
                "required": ["to", "value"]
            }
        },
        {
            "name": "signMessage",
            "description": "Sign a message using the server's wallet",
            "parameters": {
                "type": "object",
                "properties": {
                    "message": {
                        "type": "string",
                        "description": "The message to sign"
                    },
                    "provider": {
                        "type": "string",
                        "description": "Optional. Either a supported network name (mainnet, sepolia, goerli, arbitrum, optimism, base, polygon) or a custom RPC URL"
                    }
                },
                "required": ["message"]
            }
        },
        {
            "name": "contractCall",
            "description": "Call a method on a smart contract",
            "parameters": {
                "type": "object",
                "properties": {
                    "contractAddress": {
                        "type": "string",
                        "description": "The address of the smart contract"
                    },
                    "abi": {
                        "type": "string",
                        "description": "The ABI of the contract as a JSON string"
                    },
                    "method": {
                        "type": "string",
                        "description": "The method name to invoke"
                    },
                    "methodArgs": {
                        "type": "array",
                        "description": "An array of arguments to pass to the method",
                        "items": {
                            "type": ["string", "number", "boolean", "object"]
                        }
                    },
                    "value": {
                        "type": "string",
                        "description": "Optional. The amount of ETH to send with the call"
                    },
                    "provider": {
                        "type": "string",
                        "description": "Optional. Either a supported network name (mainnet, sepolia, goerli, arbitrum, optimism, base, polygon) or a custom RPC URL"
                    }
                },
                "required": ["contractAddress", "abi", "method"]
            }
        }
    ]
}

================
File: hardhat.config.cjs
================
require("@nomicfoundation/hardhat-toolbox");
require("@nomicfoundation/hardhat-ethers");

/** @type import('hardhat/config').HardhatUserConfig */
module.exports = {
  solidity: "0.8.24",
  networks: {
    hardhat: {
      // This is all we need - Hardhat will create a local network
      // with pre-funded accounts automatically
    }
  }
};

================
File: jest.config.cjs
================
/** @type {import('ts-jest').JestConfigWithTsJest} */
module.exports = {
  preset: 'ts-jest/presets/default-esm',
  testEnvironment: 'node',
  testMatch: ['**/*.test.ts'],
  transform: {
    '^.+\\.tsx?$': ['ts-jest', {
      useESM: true,
    }]
  },
  moduleNameMapper: {
    '^(\\.{1,2}/.*)\\.js$': '$1'
  },
  setupFilesAfterEnv: ['./jest.setup.ts'],
  globals: {
    BigInt: {
      toJSON: function() {
        return this.toString();
      }
    }
  }
};

================
File: jest.setup.js
================


================
File: jest.setup.ts
================
import { config } from 'dotenv';

// Load test environment variables
config({ path: '.env.test' });

// Set default environment variables if not set
process.env.PRIVATE_KEY = process.env.PRIVATE_KEY || '0x0123456789012345678901234567890123456789012345678901234567890123';
process.env.INFURA_API_KEY = process.env.INFURA_API_KEY || '1234567890abcdef1234567890abcdef';
process.env.PROVIDER_URL = process.env.PROVIDER_URL || 'https://eth-sepolia.g.alchemy.com/v2/demo'; 

// Add BigInt serialization support
declare global {
  interface BigInt {
    toJSON(): string;
  }
}

// Add BigInt serialization support
(BigInt.prototype as any).toJSON = function() {
  return this.toString();
};

// Extend Jest's expect
declare global {
  namespace jest {
    interface Matchers<R> {
      toBeBigInt(expected: bigint): R;
    }
  }
}

expect.extend({
  toBeBigInt(received: bigint, expected: bigint) {
    const pass = received === expected;
    if (pass) {
      return {
        message: () => `expected ${received} not to be ${expected}`,
        pass: true,
      };
    } else {
      return {
        message: () => `expected ${received} to be ${expected}`,
        pass: false,
      };
    }
  },
});

================
File: package.json
================
{
  "name": "mcp-ethers-wallet",
  "version": "1.0.0",
  "description": "A Model Context Protocol server for interacting with Ethereum wallets using Ethers.js",
  "type": "module",
  "main": "build/index.js",
  "types": "build/index.d.ts",
  "bin": {
    "mcp-ethers-wallet": "build/index.js"
  },
  "scripts": {
    "build": "tsc",
    "prepublishOnly": "npm run build",
    "start": "node build/index.js",
    "dev": "ts-node src/index.ts",
    "test": "jest --config jest.config.cjs 'src/.*\\.ts$'",
    "test:watch": "jest --watch 'src/.*\\.ts$'"
  },
  "files": [
    "build"
  ],
  "dependencies": {
    "@modelcontextprotocol/sdk": "^1.0.0",
    "dotenv": "^16.0.0",
    "ethers": "^6.0.0",
    "solc": "^0.8.28",
    "zod": "^3.0.0"
  },
  "devDependencies": {
    "@nomicfoundation/hardhat-toolbox": "^5.0.0",
    "@types/jest": "^29.5.14",
    "@types/node": "^20.0.0",
    "hardhat": "^2.22.17",
    "jest": "^29.7.0",
    "ts-jest": "^29.2.5",
    "typescript": "^5.0.0"
  },
  "engines": {
    "node": ">=18"
  }
}

================
File: tsconfig.json
================
{
  "compilerOptions": {
    "target": "ES2022",
    "module": "NodeNext",
    "moduleResolution": "NodeNext",
    "esModuleInterop": true,
    "strict": true,
    "skipLibCheck": true,
    "forceConsistentCasingInFileNames": true,
    "outDir": "build",
    "declaration": true,
    "sourceMap": true
  },
  "include": ["src/**/*", "jest.setup.ts"],
  "exclude": ["node_modules", "build"]
}
